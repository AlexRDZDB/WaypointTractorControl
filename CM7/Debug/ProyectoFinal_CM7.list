
ProyectoFinal_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aae4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007ac  0800ad84  0800ad84  0001ad84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b530  0800b530  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b530  0800b530  0001b530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b538  0800b538  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b538  0800b538  0001b538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b53c  0800b53c  0001b53c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  24000000  0800b540  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000450  240000a0  0800b5dc  000200a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  240004f0  0800b5dc  000204f0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ec68  00000000  00000000  000200ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030f8  00000000  00000000  0003ed32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001878  00000000  00000000  00041e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001750  00000000  00000000  000436a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d50d  00000000  00000000  00044df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c300  00000000  00000000  00082305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00197886  00000000  00000000  0009e605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00235e8b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073f0  00000000  00000000  00235edc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000a0 	.word	0x240000a0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800ad6c 	.word	0x0800ad6c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000a4 	.word	0x240000a4
 80002dc:	0800ad6c 	.word	0x0800ad6c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b085      	sub	sp, #20
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <NRF24_DelayMicroSeconds+0x3c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a0b      	ldr	r2, [pc, #44]	; (8000800 <NRF24_DelayMicroSeconds+0x40>)
 80007d2:	fba2 2303 	umull	r2, r3, r2, r3
 80007d6:	0c9a      	lsrs	r2, r3, #18
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	fb02 f303 	mul.w	r3, r2, r3
 80007de:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 80007e0:	bf00      	nop
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	1e5a      	subs	r2, r3, #1
 80007e6:	60fa      	str	r2, [r7, #12]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1fa      	bne.n	80007e2 <NRF24_DelayMicroSeconds+0x22>
}
 80007ec:	bf00      	nop
 80007ee:	bf00      	nop
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	24000000 	.word	0x24000000
 8000800:	165e9f81 	.word	0x165e9f81

08000804 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d008      	beq.n	8000824 <NRF24_csn+0x20>
 8000812:	4b0a      	ldr	r3, [pc, #40]	; (800083c <NRF24_csn+0x38>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a0a      	ldr	r2, [pc, #40]	; (8000840 <NRF24_csn+0x3c>)
 8000818:	8811      	ldrh	r1, [r2, #0]
 800081a:	2201      	movs	r2, #1
 800081c:	4618      	mov	r0, r3
 800081e:	f003 f9eb 	bl	8003bf8 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000822:	e007      	b.n	8000834 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <NRF24_csn+0x38>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a05      	ldr	r2, [pc, #20]	; (8000840 <NRF24_csn+0x3c>)
 800082a:	8811      	ldrh	r1, [r2, #0]
 800082c:	2200      	movs	r2, #0
 800082e:	4618      	mov	r0, r3
 8000830:	f003 f9e2 	bl	8003bf8 <HAL_GPIO_WritePin>
}
 8000834:	bf00      	nop
 8000836:	3708      	adds	r7, #8
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	240000cc 	.word	0x240000cc
 8000840:	240000d0 	.word	0x240000d0

08000844 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d008      	beq.n	8000864 <NRF24_ce+0x20>
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <NRF24_ce+0x38>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <NRF24_ce+0x3c>)
 8000858:	8811      	ldrh	r1, [r2, #0]
 800085a:	2201      	movs	r2, #1
 800085c:	4618      	mov	r0, r3
 800085e:	f003 f9cb 	bl	8003bf8 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000862:	e007      	b.n	8000874 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000864:	4b05      	ldr	r3, [pc, #20]	; (800087c <NRF24_ce+0x38>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a05      	ldr	r2, [pc, #20]	; (8000880 <NRF24_ce+0x3c>)
 800086a:	8811      	ldrh	r1, [r2, #0]
 800086c:	2200      	movs	r2, #0
 800086e:	4618      	mov	r0, r3
 8000870:	f003 f9c2 	bl	8003bf8 <HAL_GPIO_WritePin>
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	240000cc 	.word	0x240000cc
 8000880:	240000d2 	.word	0x240000d2

08000884 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 800088e:	2000      	movs	r0, #0
 8000890:	f7ff ffb8 	bl	8000804 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	f003 031f 	and.w	r3, r3, #31
 800089a:	b2db      	uxtb	r3, r3
 800089c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800089e:	f107 010c 	add.w	r1, r7, #12
 80008a2:	2364      	movs	r3, #100	; 0x64
 80008a4:	2201      	movs	r2, #1
 80008a6:	480a      	ldr	r0, [pc, #40]	; (80008d0 <NRF24_read_register+0x4c>)
 80008a8:	f005 fe70 	bl	800658c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	1c59      	adds	r1, r3, #1
 80008b2:	2364      	movs	r3, #100	; 0x64
 80008b4:	2201      	movs	r2, #1
 80008b6:	4806      	ldr	r0, [pc, #24]	; (80008d0 <NRF24_read_register+0x4c>)
 80008b8:	f006 f85a 	bl	8006970 <HAL_SPI_Receive>
	retData = spiBuf[1];
 80008bc:	7b7b      	ldrb	r3, [r7, #13]
 80008be:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 80008c0:	2001      	movs	r0, #1
 80008c2:	f7ff ff9f 	bl	8000804 <NRF24_csn>
	return retData;
 80008c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3710      	adds	r7, #16
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	240000d4 	.word	0x240000d4

080008d4 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	6039      	str	r1, [r7, #0]
 80008de:	71fb      	strb	r3, [r7, #7]
 80008e0:	4613      	mov	r3, r2
 80008e2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80008e4:	2000      	movs	r0, #0
 80008e6:	f7ff ff8d 	bl	8000804 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	f003 031f 	and.w	r3, r3, #31
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80008f4:	f107 010c 	add.w	r1, r7, #12
 80008f8:	2364      	movs	r3, #100	; 0x64
 80008fa:	2201      	movs	r2, #1
 80008fc:	4808      	ldr	r0, [pc, #32]	; (8000920 <NRF24_read_registerN+0x4c>)
 80008fe:	f005 fe45 	bl	800658c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000902:	79bb      	ldrb	r3, [r7, #6]
 8000904:	b29a      	uxth	r2, r3
 8000906:	2364      	movs	r3, #100	; 0x64
 8000908:	6839      	ldr	r1, [r7, #0]
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <NRF24_read_registerN+0x4c>)
 800090c:	f006 f830 	bl	8006970 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000910:	2001      	movs	r0, #1
 8000912:	f7ff ff77 	bl	8000804 <NRF24_csn>
}
 8000916:	bf00      	nop
 8000918:	3710      	adds	r7, #16
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	240000d4 	.word	0x240000d4

08000924 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	460a      	mov	r2, r1
 800092e:	71fb      	strb	r3, [r7, #7]
 8000930:	4613      	mov	r3, r2
 8000932:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000934:	2000      	movs	r0, #0
 8000936:	f7ff ff65 	bl	8000804 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800093a:	79fb      	ldrb	r3, [r7, #7]
 800093c:	f043 0320 	orr.w	r3, r3, #32
 8000940:	b2db      	uxtb	r3, r3
 8000942:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000944:	79bb      	ldrb	r3, [r7, #6]
 8000946:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000948:	f107 010c 	add.w	r1, r7, #12
 800094c:	2364      	movs	r3, #100	; 0x64
 800094e:	2202      	movs	r2, #2
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <NRF24_write_register+0x40>)
 8000952:	f005 fe1b 	bl	800658c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000956:	2001      	movs	r0, #1
 8000958:	f7ff ff54 	bl	8000804 <NRF24_csn>
}
 800095c:	bf00      	nop
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	240000d4 	.word	0x240000d4

08000968 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	4603      	mov	r3, r0
 8000970:	6039      	str	r1, [r7, #0]
 8000972:	71fb      	strb	r3, [r7, #7]
 8000974:	4613      	mov	r3, r2
 8000976:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000978:	2000      	movs	r0, #0
 800097a:	f7ff ff43 	bl	8000804 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800097e:	79fb      	ldrb	r3, [r7, #7]
 8000980:	f043 0320 	orr.w	r3, r3, #32
 8000984:	b2db      	uxtb	r3, r3
 8000986:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000988:	f107 010c 	add.w	r1, r7, #12
 800098c:	2364      	movs	r3, #100	; 0x64
 800098e:	2201      	movs	r2, #1
 8000990:	4808      	ldr	r0, [pc, #32]	; (80009b4 <NRF24_write_registerN+0x4c>)
 8000992:	f005 fdfb 	bl	800658c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000996:	79bb      	ldrb	r3, [r7, #6]
 8000998:	b29a      	uxth	r2, r3
 800099a:	2364      	movs	r3, #100	; 0x64
 800099c:	6839      	ldr	r1, [r7, #0]
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <NRF24_write_registerN+0x4c>)
 80009a0:	f005 fdf4 	bl	800658c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80009a4:	2001      	movs	r0, #1
 80009a6:	f7ff ff2d 	bl	8000804 <NRF24_csn>
}
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	240000d4 	.word	0x240000d4

080009b8 <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	460b      	mov	r3, r1
 80009c2:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 80009c4:	f000 fa0a 	bl	8000ddc <NRF24_getPayloadSize>
 80009c8:	4603      	mov	r3, r0
 80009ca:	461a      	mov	r2, r3
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d303      	bcc.n	80009da <NRF24_read_payload+0x22>
 80009d2:	f000 fa03 	bl	8000ddc <NRF24_getPayloadSize>
 80009d6:	4603      	mov	r3, r0
 80009d8:	e000      	b.n	80009dc <NRF24_read_payload+0x24>
 80009da:	78fb      	ldrb	r3, [r7, #3]
 80009dc:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80009de:	2000      	movs	r0, #0
 80009e0:	f7ff ff10 	bl	8000804 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 80009e4:	2361      	movs	r3, #97	; 0x61
 80009e6:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 80009e8:	f107 010e 	add.w	r1, r7, #14
 80009ec:	2364      	movs	r3, #100	; 0x64
 80009ee:	2201      	movs	r2, #1
 80009f0:	4808      	ldr	r0, [pc, #32]	; (8000a14 <NRF24_read_payload+0x5c>)
 80009f2:	f005 fdcb 	bl	800658c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	b29a      	uxth	r2, r3
 80009fa:	2364      	movs	r3, #100	; 0x64
 80009fc:	6879      	ldr	r1, [r7, #4]
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <NRF24_read_payload+0x5c>)
 8000a00:	f005 ffb6 	bl	8006970 <HAL_SPI_Receive>
	NRF24_csn(1);
 8000a04:	2001      	movs	r0, #1
 8000a06:	f7ff fefd 	bl	8000804 <NRF24_csn>
}
 8000a0a:	bf00      	nop
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	240000d4 	.word	0x240000d4

08000a18 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000a1c:	21ff      	movs	r1, #255	; 0xff
 8000a1e:	20e1      	movs	r0, #225	; 0xe1
 8000a20:	f7ff ff80 	bl	8000924 <NRF24_write_register>
}
 8000a24:	bf00      	nop
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000a2c:	21ff      	movs	r1, #255	; 0xff
 8000a2e:	20e2      	movs	r0, #226	; 0xe2
 8000a30:	f7ff ff78 	bl	8000924 <NRF24_write_register>
}
 8000a34:	bf00      	nop
 8000a36:	bd80      	pop	{r7, pc}

08000a38 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8000a3e:	2007      	movs	r0, #7
 8000a40:	f7ff ff20 	bl	8000884 <NRF24_read_register>
 8000a44:	4603      	mov	r3, r0
 8000a46:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000a48:	79fb      	ldrb	r3, [r7, #7]
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
	...

08000a54 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000a54:	b082      	sub	sp, #8
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b084      	sub	sp, #16
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	6078      	str	r0, [r7, #4]
 8000a5e:	61fb      	str	r3, [r7, #28]
 8000a60:	460b      	mov	r3, r1
 8000a62:	807b      	strh	r3, [r7, #2]
 8000a64:	4613      	mov	r3, r2
 8000a66:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000a68:	4b66      	ldr	r3, [pc, #408]	; (8000c04 <NRF24_begin+0x1b0>)
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	2288      	movs	r2, #136	; 0x88
 8000a72:	4619      	mov	r1, r3
 8000a74:	f008 ff5e 	bl	8009934 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000a78:	4a63      	ldr	r2, [pc, #396]	; (8000c08 <NRF24_begin+0x1b4>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000a7e:	4a63      	ldr	r2, [pc, #396]	; (8000c0c <NRF24_begin+0x1b8>)
 8000a80:	887b      	ldrh	r3, [r7, #2]
 8000a82:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000a84:	4a62      	ldr	r2, [pc, #392]	; (8000c10 <NRF24_begin+0x1bc>)
 8000a86:	883b      	ldrh	r3, [r7, #0]
 8000a88:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	f7ff feba 	bl	8000804 <NRF24_csn>
	NRF24_ce(0);
 8000a90:	2000      	movs	r0, #0
 8000a92:	f7ff fed7 	bl	8000844 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000a96:	2005      	movs	r0, #5
 8000a98:	f002 f912 	bl	8002cc0 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000a9c:	2108      	movs	r1, #8
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f7ff ff40 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000aa4:	213f      	movs	r1, #63	; 0x3f
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	f7ff ff3c 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000aac:	2103      	movs	r1, #3
 8000aae:	2002      	movs	r0, #2
 8000ab0:	f7ff ff38 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000ab4:	2103      	movs	r1, #3
 8000ab6:	2003      	movs	r0, #3
 8000ab8:	f7ff ff34 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000abc:	2103      	movs	r1, #3
 8000abe:	2004      	movs	r0, #4
 8000ac0:	f7ff ff30 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000ac4:	2102      	movs	r1, #2
 8000ac6:	2005      	movs	r0, #5
 8000ac8:	f7ff ff2c 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000acc:	210f      	movs	r1, #15
 8000ace:	2006      	movs	r0, #6
 8000ad0:	f7ff ff28 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000ad4:	210e      	movs	r1, #14
 8000ad6:	2007      	movs	r0, #7
 8000ad8:	f7ff ff24 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000adc:	2100      	movs	r1, #0
 8000ade:	2008      	movs	r0, #8
 8000ae0:	f7ff ff20 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2009      	movs	r0, #9
 8000ae8:	f7ff ff1c 	bl	8000924 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000aec:	23e7      	movs	r3, #231	; 0xe7
 8000aee:	733b      	strb	r3, [r7, #12]
 8000af0:	23e7      	movs	r3, #231	; 0xe7
 8000af2:	72fb      	strb	r3, [r7, #11]
 8000af4:	23e7      	movs	r3, #231	; 0xe7
 8000af6:	72bb      	strb	r3, [r7, #10]
 8000af8:	23e7      	movs	r3, #231	; 0xe7
 8000afa:	727b      	strb	r3, [r7, #9]
 8000afc:	23e7      	movs	r3, #231	; 0xe7
 8000afe:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	2205      	movs	r2, #5
 8000b06:	4619      	mov	r1, r3
 8000b08:	200a      	movs	r0, #10
 8000b0a:	f7ff ff2d 	bl	8000968 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8000b0e:	23c2      	movs	r3, #194	; 0xc2
 8000b10:	733b      	strb	r3, [r7, #12]
 8000b12:	23c2      	movs	r3, #194	; 0xc2
 8000b14:	72fb      	strb	r3, [r7, #11]
 8000b16:	23c2      	movs	r3, #194	; 0xc2
 8000b18:	72bb      	strb	r3, [r7, #10]
 8000b1a:	23c2      	movs	r3, #194	; 0xc2
 8000b1c:	727b      	strb	r3, [r7, #9]
 8000b1e:	23c2      	movs	r3, #194	; 0xc2
 8000b20:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000b22:	f107 0308 	add.w	r3, r7, #8
 8000b26:	2205      	movs	r2, #5
 8000b28:	4619      	mov	r1, r3
 8000b2a:	200b      	movs	r0, #11
 8000b2c:	f7ff ff1c 	bl	8000968 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000b30:	21c3      	movs	r1, #195	; 0xc3
 8000b32:	200c      	movs	r0, #12
 8000b34:	f7ff fef6 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000b38:	21c4      	movs	r1, #196	; 0xc4
 8000b3a:	200d      	movs	r0, #13
 8000b3c:	f7ff fef2 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000b40:	21c5      	movs	r1, #197	; 0xc5
 8000b42:	200e      	movs	r0, #14
 8000b44:	f7ff feee 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000b48:	21c6      	movs	r1, #198	; 0xc6
 8000b4a:	200f      	movs	r0, #15
 8000b4c:	f7ff feea 	bl	8000924 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000b50:	23e7      	movs	r3, #231	; 0xe7
 8000b52:	733b      	strb	r3, [r7, #12]
 8000b54:	23e7      	movs	r3, #231	; 0xe7
 8000b56:	72fb      	strb	r3, [r7, #11]
 8000b58:	23e7      	movs	r3, #231	; 0xe7
 8000b5a:	72bb      	strb	r3, [r7, #10]
 8000b5c:	23e7      	movs	r3, #231	; 0xe7
 8000b5e:	727b      	strb	r3, [r7, #9]
 8000b60:	23e7      	movs	r3, #231	; 0xe7
 8000b62:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000b64:	f107 0308 	add.w	r3, r7, #8
 8000b68:	2205      	movs	r2, #5
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	2010      	movs	r0, #16
 8000b6e:	f7ff fefb 	bl	8000968 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000b72:	2100      	movs	r1, #0
 8000b74:	2011      	movs	r0, #17
 8000b76:	f7ff fed5 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2012      	movs	r0, #18
 8000b7e:	f7ff fed1 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000b82:	2100      	movs	r1, #0
 8000b84:	2013      	movs	r0, #19
 8000b86:	f7ff fecd 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	2014      	movs	r0, #20
 8000b8e:	f7ff fec9 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000b92:	2100      	movs	r1, #0
 8000b94:	2015      	movs	r0, #21
 8000b96:	f7ff fec5 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	2016      	movs	r0, #22
 8000b9e:	f7ff fec1 	bl	8000924 <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 8000ba2:	f000 fad5 	bl	8001150 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	201c      	movs	r0, #28
 8000baa:	f7ff febb 	bl	8000924 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000bae:	2100      	movs	r1, #0
 8000bb0:	201d      	movs	r0, #29
 8000bb2:	f7ff feb7 	bl	8000924 <NRF24_write_register>
	printRadioSettings();
 8000bb6:	f000 fae5 	bl	8001184 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000bba:	210f      	movs	r1, #15
 8000bbc:	200f      	movs	r0, #15
 8000bbe:	f000 f8c5 	bl	8000d4c <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000bc2:	2003      	movs	r0, #3
 8000bc4:	f000 f9ab 	bl	8000f1e <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000bc8:	2001      	movs	r0, #1
 8000bca:	f000 f9e1 	bl	8000f90 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000bce:	2002      	movs	r0, #2
 8000bd0:	f000 fa24 	bl	800101c <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000bd4:	f000 f976 	bl	8000ec4 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000bd8:	2020      	movs	r0, #32
 8000bda:	f000 f8e7 	bl	8000dac <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8000bde:	f000 faae 	bl	800113e <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000be2:	204c      	movs	r0, #76	; 0x4c
 8000be4:	f000 f8cd 	bl	8000d82 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000be8:	f7ff ff16 	bl	8000a18 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000bec:	f7ff ff1c 	bl	8000a28 <NRF24_flush_rx>
	
	NRF24_powerDown();
 8000bf0:	f000 fa3c 	bl	800106c <NRF24_powerDown>
	
}
 8000bf4:	bf00      	nop
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000bfe:	b002      	add	sp, #8
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	240000d4 	.word	0x240000d4
 8000c08:	240000cc 	.word	0x240000cc
 8000c0c:	240000d0 	.word	0x240000d0
 8000c10:	240000d2 	.word	0x240000d2

08000c14 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8000c18:	2000      	movs	r0, #0
 8000c1a:	f7ff fe33 	bl	8000884 <NRF24_read_register>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	f043 0303 	orr.w	r3, r3, #3
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	4619      	mov	r1, r3
 8000c28:	2000      	movs	r0, #0
 8000c2a:	f7ff fe7b 	bl	8000924 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <NRF24_startListening+0x48>)
 8000c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	d004      	beq.n	8000c42 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8000c38:	2205      	movs	r2, #5
 8000c3a:	4908      	ldr	r1, [pc, #32]	; (8000c5c <NRF24_startListening+0x48>)
 8000c3c:	200a      	movs	r0, #10
 8000c3e:	f7ff fe93 	bl	8000968 <NRF24_write_registerN>
	
	//Flush buffers
	NRF24_flush_tx();
 8000c42:	f7ff fee9 	bl	8000a18 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000c46:	f7ff feef 	bl	8000a28 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f7ff fdfa 	bl	8000844 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8000c50:	2096      	movs	r0, #150	; 0x96
 8000c52:	f7ff fdb5 	bl	80007c0 <NRF24_DelayMicroSeconds>
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	240000c0 	.word	0x240000c0

08000c60 <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000c64:	2000      	movs	r0, #0
 8000c66:	f000 fa10 	bl	800108a <NRF24_availablePipe>
 8000c6a:	4603      	mov	r3, r0
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8000c7c:	78fb      	ldrb	r3, [r7, #3]
 8000c7e:	4619      	mov	r1, r3
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff fe99 	bl	80009b8 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8000c86:	2017      	movs	r0, #23
 8000c88:	f7ff fdfc 	bl	8000884 <NRF24_read_register>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8000c94:	f7ff fec8 	bl	8000a28 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8000c98:	f000 f8ac 	bl	8000df4 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8000c9c:	7bfb      	ldrb	r3, [r7, #15]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	bf14      	ite	ne
 8000ca2:	2301      	movne	r3, #1
 8000ca4:	2300      	moveq	r3, #0
 8000ca6:	b2db      	uxtb	r3, r3
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4601      	mov	r1, r0
 8000cb8:	e9c7 2300 	strd	r2, r3, [r7]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8000cc0:	7bfb      	ldrb	r3, [r7, #15]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d104      	bne.n	8000cd0 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8000cc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000cca:	491c      	ldr	r1, [pc, #112]	; (8000d3c <NRF24_openReadingPipe+0x8c>)
 8000ccc:	e9c1 2300 	strd	r2, r3, [r1]
	
	if(number <= 6)
 8000cd0:	7bfb      	ldrb	r3, [r7, #15]
 8000cd2:	2b06      	cmp	r3, #6
 8000cd4:	d82d      	bhi.n	8000d32 <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8000cd6:	7bfb      	ldrb	r3, [r7, #15]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d808      	bhi.n	8000cee <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8000cdc:	7bfb      	ldrb	r3, [r7, #15]
 8000cde:	4a18      	ldr	r2, [pc, #96]	; (8000d40 <NRF24_openReadingPipe+0x90>)
 8000ce0:	5cd3      	ldrb	r3, [r2, r3]
 8000ce2:	4639      	mov	r1, r7
 8000ce4:	2205      	movs	r2, #5
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff fe3e 	bl	8000968 <NRF24_write_registerN>
 8000cec:	e007      	b.n	8000cfe <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
 8000cf0:	4a13      	ldr	r2, [pc, #76]	; (8000d40 <NRF24_openReadingPipe+0x90>)
 8000cf2:	5cd3      	ldrb	r3, [r2, r3]
 8000cf4:	4639      	mov	r1, r7
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff fe35 	bl	8000968 <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
 8000d00:	4a10      	ldr	r2, [pc, #64]	; (8000d44 <NRF24_openReadingPipe+0x94>)
 8000d02:	5cd3      	ldrb	r3, [r2, r3]
 8000d04:	4a10      	ldr	r2, [pc, #64]	; (8000d48 <NRF24_openReadingPipe+0x98>)
 8000d06:	7812      	ldrb	r2, [r2, #0]
 8000d08:	4611      	mov	r1, r2
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f7ff fe0a 	bl	8000924 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8000d10:	2002      	movs	r0, #2
 8000d12:	f7ff fdb7 	bl	8000884 <NRF24_read_register>
 8000d16:	4603      	mov	r3, r0
 8000d18:	b25a      	sxtb	r2, r3
 8000d1a:	7bfb      	ldrb	r3, [r7, #15]
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	b25b      	sxtb	r3, r3
 8000d24:	4313      	orrs	r3, r2
 8000d26:	b25b      	sxtb	r3, r3
 8000d28:	b2db      	uxtb	r3, r3
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	2002      	movs	r0, #2
 8000d2e:	f7ff fdf9 	bl	8000924 <NRF24_write_register>
	}
	
}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	240000c0 	.word	0x240000c0
 8000d40:	0800b460 	.word	0x0800b460
 8000d44:	0800b468 	.word	0x0800b468
 8000d48:	240000c8 	.word	0x240000c8

08000d4c <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	460a      	mov	r2, r1
 8000d56:	71fb      	strb	r3, [r7, #7]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	011b      	lsls	r3, r3, #4
 8000d60:	b25a      	sxtb	r2, r3
 8000d62:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	b25b      	sxtb	r3, r3
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	b25b      	sxtb	r3, r3
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	4619      	mov	r1, r3
 8000d74:	2004      	movs	r0, #4
 8000d76:	f7ff fdd5 	bl	8000924 <NRF24_write_register>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b084      	sub	sp, #16
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000d8c:	237f      	movs	r3, #127	; 0x7f
 8000d8e:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8000d90:	7bfa      	ldrb	r2, [r7, #15]
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	4293      	cmp	r3, r2
 8000d96:	bf28      	it	cs
 8000d98:	4613      	movcs	r3, r2
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	2005      	movs	r0, #5
 8000da0:	f7ff fdc0 	bl	8000924 <NRF24_write_register>
}
 8000da4:	bf00      	nop
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b085      	sub	sp, #20
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000db6:	2320      	movs	r3, #32
 8000db8:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000dba:	7bfa      	ldrb	r2, [r7, #15]
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	bf28      	it	cs
 8000dc2:	4613      	movcs	r3, r2
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <NRF24_setPayloadSize+0x2c>)
 8000dc8:	701a      	strb	r2, [r3, #0]
}
 8000dca:	bf00      	nop
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	240000c8 	.word	0x240000c8

08000ddc <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
	return payload_size;
 8000de0:	4b03      	ldr	r3, [pc, #12]	; (8000df0 <NRF24_getPayloadSize+0x14>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	240000c8 	.word	0x240000c8

08000df4 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000df8:	2060      	movs	r0, #96	; 0x60
 8000dfa:	f7ff fd43 	bl	8000884 <NRF24_read_register>
 8000dfe:	4603      	mov	r3, r0
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	bd80      	pop	{r7, pc}

08000e04 <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8000e08:	201d      	movs	r0, #29
 8000e0a:	f7ff fd3b 	bl	8000884 <NRF24_read_register>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	f043 0306 	orr.w	r3, r3, #6
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	4619      	mov	r1, r3
 8000e18:	201d      	movs	r0, #29
 8000e1a:	f7ff fd83 	bl	8000924 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8000e1e:	201d      	movs	r0, #29
 8000e20:	f7ff fd30 	bl	8000884 <NRF24_read_register>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d10c      	bne.n	8000e44 <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8000e2a:	f000 f991 	bl	8001150 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8000e2e:	201d      	movs	r0, #29
 8000e30:	f7ff fd28 	bl	8000884 <NRF24_read_register>
 8000e34:	4603      	mov	r3, r0
 8000e36:	f043 0306 	orr.w	r3, r3, #6
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	201d      	movs	r0, #29
 8000e40:	f7ff fd70 	bl	8000924 <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8000e44:	201c      	movs	r0, #28
 8000e46:	f7ff fd1d 	bl	8000884 <NRF24_read_register>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	f043 0303 	orr.w	r3, r3, #3
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	4619      	mov	r1, r3
 8000e54:	201c      	movs	r0, #28
 8000e56:	f7ff fd65 	bl	8000924 <NRF24_write_register>
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <NRF24_enableDynamicPayloads>:
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000e64:	201d      	movs	r0, #29
 8000e66:	f7ff fd0d 	bl	8000884 <NRF24_read_register>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	f043 0304 	orr.w	r3, r3, #4
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	4619      	mov	r1, r3
 8000e74:	201d      	movs	r0, #29
 8000e76:	f7ff fd55 	bl	8000924 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8000e7a:	201d      	movs	r0, #29
 8000e7c:	f7ff fd02 	bl	8000884 <NRF24_read_register>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d10c      	bne.n	8000ea0 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8000e86:	f000 f963 	bl	8001150 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000e8a:	201d      	movs	r0, #29
 8000e8c:	f7ff fcfa 	bl	8000884 <NRF24_read_register>
 8000e90:	4603      	mov	r3, r0
 8000e92:	f043 0304 	orr.w	r3, r3, #4
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	4619      	mov	r1, r3
 8000e9a:	201d      	movs	r0, #29
 8000e9c:	f7ff fd42 	bl	8000924 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8000ea0:	201c      	movs	r0, #28
 8000ea2:	f7ff fcef 	bl	8000884 <NRF24_read_register>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	4619      	mov	r1, r3
 8000eb0:	201c      	movs	r0, #28
 8000eb2:	f7ff fd37 	bl	8000924 <NRF24_write_register>
  dynamic_payloads_enabled = true;
 8000eb6:	4b02      	ldr	r3, [pc, #8]	; (8000ec0 <NRF24_enableDynamicPayloads+0x60>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	701a      	strb	r2, [r3, #0]
	
}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	240000c9 	.word	0x240000c9

08000ec4 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000ec8:	201d      	movs	r0, #29
 8000eca:	f7ff fcdb 	bl	8000884 <NRF24_read_register>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	f023 0304 	bic.w	r3, r3, #4
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	201d      	movs	r0, #29
 8000eda:	f7ff fd23 	bl	8000924 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8000ede:	2100      	movs	r1, #0
 8000ee0:	201c      	movs	r0, #28
 8000ee2:	f7ff fd1f 	bl	8000924 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000ee6:	4b02      	ldr	r3, [pc, #8]	; (8000ef0 <NRF24_disableDynamicPayloads+0x2c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	240000c9 	.word	0x240000c9

08000ef4 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d004      	beq.n	8000f0e <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000f04:	213f      	movs	r1, #63	; 0x3f
 8000f06:	2001      	movs	r0, #1
 8000f08:	f7ff fd0c 	bl	8000924 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8000f0c:	e003      	b.n	8000f16 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8000f0e:	2100      	movs	r1, #0
 8000f10:	2001      	movs	r0, #1
 8000f12:	f7ff fd07 	bl	8000924 <NRF24_write_register>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b084      	sub	sp, #16
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000f28:	2006      	movs	r0, #6
 8000f2a:	f7ff fcab 	bl	8000884 <NRF24_read_register>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000f32:	7bfb      	ldrb	r3, [r7, #15]
 8000f34:	f023 0306 	bic.w	r3, r3, #6
 8000f38:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	2b03      	cmp	r3, #3
 8000f3e:	d104      	bne.n	8000f4a <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
 8000f42:	f043 0306 	orr.w	r3, r3, #6
 8000f46:	73fb      	strb	r3, [r7, #15]
 8000f48:	e019      	b.n	8000f7e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d104      	bne.n	8000f5a <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	f043 0304 	orr.w	r3, r3, #4
 8000f56:	73fb      	strb	r3, [r7, #15]
 8000f58:	e011      	b.n	8000f7e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d104      	bne.n	8000f6a <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	f043 0302 	orr.w	r3, r3, #2
 8000f66:	73fb      	strb	r3, [r7, #15]
 8000f68:	e009      	b.n	8000f7e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d006      	beq.n	8000f7e <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	d103      	bne.n	8000f7e <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	f043 0306 	orr.w	r3, r3, #6
 8000f7c:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	4619      	mov	r1, r3
 8000f82:	2006      	movs	r0, #6
 8000f84:	f7ff fcce 	bl	8000924 <NRF24_write_register>
}
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000f9e:	2006      	movs	r0, #6
 8000fa0:	f7ff fc70 	bl	8000884 <NRF24_read_register>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000fa8:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <NRF24_setDataRate+0x88>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000fae:	7bbb      	ldrb	r3, [r7, #14]
 8000fb0:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000fb4:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d107      	bne.n	8000fcc <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8000fbc:	4b16      	ldr	r3, [pc, #88]	; (8001018 <NRF24_setDataRate+0x88>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000fc2:	7bbb      	ldrb	r3, [r7, #14]
 8000fc4:	f043 0320 	orr.w	r3, r3, #32
 8000fc8:	73bb      	strb	r3, [r7, #14]
 8000fca:	e00d      	b.n	8000fe8 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	d107      	bne.n	8000fe2 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000fd2:	4b11      	ldr	r3, [pc, #68]	; (8001018 <NRF24_setDataRate+0x88>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000fd8:	7bbb      	ldrb	r3, [r7, #14]
 8000fda:	f043 0308 	orr.w	r3, r3, #8
 8000fde:	73bb      	strb	r3, [r7, #14]
 8000fe0:	e002      	b.n	8000fe8 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000fe2:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <NRF24_setDataRate+0x88>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000fe8:	7bbb      	ldrb	r3, [r7, #14]
 8000fea:	4619      	mov	r1, r3
 8000fec:	2006      	movs	r0, #6
 8000fee:	f7ff fc99 	bl	8000924 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000ff2:	2006      	movs	r0, #6
 8000ff4:	f7ff fc46 	bl	8000884 <NRF24_read_register>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	7bbb      	ldrb	r3, [r7, #14]
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d102      	bne.n	8001008 <NRF24_setDataRate+0x78>
  {
    result = true;
 8001002:	2301      	movs	r3, #1
 8001004:	73fb      	strb	r3, [r7, #15]
 8001006:	e002      	b.n	800100e <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <NRF24_setDataRate+0x88>)
 800100a:	2200      	movs	r2, #0
 800100c:	701a      	strb	r2, [r3, #0]
  }

  return result;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	240000ca 	.word	0x240000ca

0800101c <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8001026:	2000      	movs	r0, #0
 8001028:	f7ff fc2c 	bl	8000884 <NRF24_read_register>
 800102c:	4603      	mov	r3, r0
 800102e:	f023 030c 	bic.w	r3, r3, #12
 8001032:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d00f      	beq.n	800105a <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	2b01      	cmp	r3, #1
 800103e:	d104      	bne.n	800104a <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	f043 0308 	orr.w	r3, r3, #8
 8001046:	73fb      	strb	r3, [r7, #15]
 8001048:	e007      	b.n	800105a <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 800104a:	7bfb      	ldrb	r3, [r7, #15]
 800104c:	f043 0308 	orr.w	r3, r3, #8
 8001050:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	f043 0304 	orr.w	r3, r3, #4
 8001058:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 800105a:	7bfb      	ldrb	r3, [r7, #15]
 800105c:	4619      	mov	r1, r3
 800105e:	2000      	movs	r0, #0
 8001060:	f7ff fc60 	bl	8000924 <NRF24_write_register>
}
 8001064:	bf00      	nop
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8001070:	2000      	movs	r0, #0
 8001072:	f7ff fc07 	bl	8000884 <NRF24_read_register>
 8001076:	4603      	mov	r3, r0
 8001078:	f023 0302 	bic.w	r3, r3, #2
 800107c:	b2db      	uxtb	r3, r3
 800107e:	4619      	mov	r1, r3
 8001080:	2000      	movs	r0, #0
 8001082:	f7ff fc4f 	bl	8000924 <NRF24_write_register>
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}

0800108a <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b084      	sub	sp, #16
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001092:	f7ff fcd1 	bl	8000a38 <NRF24_get_status>
 8001096:	4603      	mov	r3, r0
 8001098:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 800109a:	7bfb      	ldrb	r3, [r7, #15]
 800109c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	bf14      	ite	ne
 80010a4:	2301      	movne	r3, #1
 80010a6:	2300      	moveq	r3, #0
 80010a8:	73bb      	strb	r3, [r7, #14]

  if (result)
 80010aa:	7bbb      	ldrb	r3, [r7, #14]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d017      	beq.n	80010e0 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d007      	beq.n	80010c6 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 80010b6:	7bfb      	ldrb	r3, [r7, #15]
 80010b8:	085b      	lsrs	r3, r3, #1
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	f003 0307 	and.w	r3, r3, #7
 80010c0:	b2da      	uxtb	r2, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 80010c6:	2140      	movs	r1, #64	; 0x40
 80010c8:	2007      	movs	r0, #7
 80010ca:	f7ff fc2b 	bl	8000924 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 80010ce:	7bfb      	ldrb	r3, [r7, #15]
 80010d0:	f003 0320 	and.w	r3, r3, #32
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d003      	beq.n	80010e0 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 80010d8:	2120      	movs	r1, #32
 80010da:	2007      	movs	r0, #7
 80010dc:	f7ff fc22 	bl	8000924 <NRF24_write_register>
    }
  }
  return result;
 80010e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <NRF24_writeAckPayload>:
  NRF24_DelayMicroSeconds(15);
  NRF24_ce(0);
}
//41. Write acknowledge payload
void NRF24_writeAckPayload(uint8_t pipe, const void* buf, uint8_t len)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b084      	sub	sp, #16
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	4603      	mov	r3, r0
 80010f2:	6039      	str	r1, [r7, #0]
 80010f4:	71fb      	strb	r3, [r7, #7]
 80010f6:	4613      	mov	r3, r2
 80010f8:	71bb      	strb	r3, [r7, #6]
	const uint8_t* current = (uint8_t *)buf;
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	60fb      	str	r3, [r7, #12]
	const uint8_t max_payload_size = 32;
 80010fe:	2320      	movs	r3, #32
 8001100:	72fb      	strb	r3, [r7, #11]
  uint8_t data_len = MIN(len,max_payload_size);
 8001102:	7afa      	ldrb	r2, [r7, #11]
 8001104:	79bb      	ldrb	r3, [r7, #6]
 8001106:	4293      	cmp	r3, r2
 8001108:	bf28      	it	cs
 800110a:	4613      	movcs	r3, r2
 800110c:	72bb      	strb	r3, [r7, #10]
	
  NRF24_csn(0);
 800110e:	2000      	movs	r0, #0
 8001110:	f7ff fb78 	bl	8000804 <NRF24_csn>
	NRF24_write_registerN(CMD_W_ACK_PAYLOAD | ( pipe & 0x7 ) , current, data_len);
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	f003 0307 	and.w	r3, r3, #7
 800111c:	b25b      	sxtb	r3, r3
 800111e:	f063 0357 	orn	r3, r3, #87	; 0x57
 8001122:	b25b      	sxtb	r3, r3
 8001124:	b2db      	uxtb	r3, r3
 8001126:	7aba      	ldrb	r2, [r7, #10]
 8001128:	68f9      	ldr	r1, [r7, #12]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fc1c 	bl	8000968 <NRF24_write_registerN>
  NRF24_csn(1);
 8001130:	2001      	movs	r0, #1
 8001132:	f7ff fb67 	bl	8000804 <NRF24_csn>
}
 8001136:	bf00      	nop
 8001138:	3710      	adds	r7, #16
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001142:	2170      	movs	r1, #112	; 0x70
 8001144:	2007      	movs	r0, #7
 8001146:	f7ff fbed 	bl	8000924 <NRF24_write_register>
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
	...

08001150 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8001156:	2000      	movs	r0, #0
 8001158:	f7ff fb54 	bl	8000804 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 800115c:	2350      	movs	r3, #80	; 0x50
 800115e:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8001160:	2373      	movs	r3, #115	; 0x73
 8001162:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8001164:	1d39      	adds	r1, r7, #4
 8001166:	2364      	movs	r3, #100	; 0x64
 8001168:	2202      	movs	r2, #2
 800116a:	4805      	ldr	r0, [pc, #20]	; (8001180 <NRF24_ACTIVATE_cmd+0x30>)
 800116c:	f005 fa0e 	bl	800658c <HAL_SPI_Transmit>
	NRF24_csn(1);
 8001170:	2001      	movs	r0, #1
 8001172:	f7ff fb47 	bl	8000804 <NRF24_csn>
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	240000d4 	.word	0x240000d4

08001184 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8001184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001186:	b0a1      	sub	sp, #132	; 0x84
 8001188:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800118a:	f107 0308 	add.w	r3, r7, #8
 800118e:	49c3      	ldr	r1, [pc, #780]	; (800149c <printRadioSettings+0x318>)
 8001190:	4618      	mov	r0, r3
 8001192:	f008 fca7 	bl	8009ae4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001196:	f107 0308 	add.w	r3, r7, #8
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff f8a0 	bl	80002e0 <strlen>
 80011a0:	4603      	mov	r3, r0
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	f107 0108 	add.w	r1, r7, #8
 80011a8:	230a      	movs	r3, #10
 80011aa:	48bd      	ldr	r0, [pc, #756]	; (80014a0 <printRadioSettings+0x31c>)
 80011ac:	f007 fae2 	bl	8008774 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 80011b0:	2000      	movs	r0, #0
 80011b2:	f7ff fb67 	bl	8000884 <NRF24_read_register>
 80011b6:	4603      	mov	r3, r0
 80011b8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 80011bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011c0:	f003 0308 	and.w	r3, r3, #8
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d013      	beq.n	80011f0 <printRadioSettings+0x6c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 80011c8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011cc:	f003 0304 	and.w	r3, r3, #4
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d006      	beq.n	80011e2 <printRadioSettings+0x5e>
 80011d4:	f107 0308 	add.w	r3, r7, #8
 80011d8:	49b2      	ldr	r1, [pc, #712]	; (80014a4 <printRadioSettings+0x320>)
 80011da:	4618      	mov	r0, r3
 80011dc:	f008 fc82 	bl	8009ae4 <siprintf>
 80011e0:	e00c      	b.n	80011fc <printRadioSettings+0x78>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 80011e2:	f107 0308 	add.w	r3, r7, #8
 80011e6:	49b0      	ldr	r1, [pc, #704]	; (80014a8 <printRadioSettings+0x324>)
 80011e8:	4618      	mov	r0, r3
 80011ea:	f008 fc7b 	bl	8009ae4 <siprintf>
 80011ee:	e005      	b.n	80011fc <printRadioSettings+0x78>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 80011f0:	f107 0308 	add.w	r3, r7, #8
 80011f4:	49ad      	ldr	r1, [pc, #692]	; (80014ac <printRadioSettings+0x328>)
 80011f6:	4618      	mov	r0, r3
 80011f8:	f008 fc74 	bl	8009ae4 <siprintf>
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011fc:	f107 0308 	add.w	r3, r7, #8
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff f86d 	bl	80002e0 <strlen>
 8001206:	4603      	mov	r3, r0
 8001208:	b29a      	uxth	r2, r3
 800120a:	f107 0108 	add.w	r1, r7, #8
 800120e:	230a      	movs	r3, #10
 8001210:	48a3      	ldr	r0, [pc, #652]	; (80014a0 <printRadioSettings+0x31c>)
 8001212:	f007 faaf 	bl	8008774 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8001216:	2001      	movs	r0, #1
 8001218:	f7ff fb34 	bl	8000884 <NRF24_read_register>
 800121c:	4603      	mov	r3, r0
 800121e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001222:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001226:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800122a:	2b00      	cmp	r3, #0
 800122c:	bfcc      	ite	gt
 800122e:	2301      	movgt	r3, #1
 8001230:	2300      	movle	r3, #0
 8001232:	b2db      	uxtb	r3, r3
 8001234:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001236:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800123a:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800123e:	2b00      	cmp	r3, #0
 8001240:	bfcc      	ite	gt
 8001242:	2301      	movgt	r3, #1
 8001244:	2300      	movle	r3, #0
 8001246:	b2db      	uxtb	r3, r3
 8001248:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800124a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800124e:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001252:	2b00      	cmp	r3, #0
 8001254:	bfcc      	ite	gt
 8001256:	2301      	movgt	r3, #1
 8001258:	2300      	movle	r3, #0
 800125a:	b2db      	uxtb	r3, r3
 800125c:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800125e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001262:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001266:	2b00      	cmp	r3, #0
 8001268:	bfcc      	ite	gt
 800126a:	2301      	movgt	r3, #1
 800126c:	2300      	movle	r3, #0
 800126e:	b2db      	uxtb	r3, r3
 8001270:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001272:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001276:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800127a:	2b00      	cmp	r3, #0
 800127c:	bfcc      	ite	gt
 800127e:	2301      	movgt	r3, #1
 8001280:	2300      	movle	r3, #0
 8001282:	b2db      	uxtb	r3, r3
 8001284:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001286:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800128a:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800128e:	2b00      	cmp	r3, #0
 8001290:	bfcc      	ite	gt
 8001292:	2301      	movgt	r3, #1
 8001294:	2300      	movle	r3, #0
 8001296:	b2db      	uxtb	r3, r3
 8001298:	f107 0008 	add.w	r0, r7, #8
 800129c:	9303      	str	r3, [sp, #12]
 800129e:	9402      	str	r4, [sp, #8]
 80012a0:	9101      	str	r1, [sp, #4]
 80012a2:	9200      	str	r2, [sp, #0]
 80012a4:	4633      	mov	r3, r6
 80012a6:	462a      	mov	r2, r5
 80012a8:	4981      	ldr	r1, [pc, #516]	; (80014b0 <printRadioSettings+0x32c>)
 80012aa:	f008 fc1b 	bl	8009ae4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012ae:	f107 0308 	add.w	r3, r7, #8
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff f814 	bl	80002e0 <strlen>
 80012b8:	4603      	mov	r3, r0
 80012ba:	b29a      	uxth	r2, r3
 80012bc:	f107 0108 	add.w	r1, r7, #8
 80012c0:	230a      	movs	r3, #10
 80012c2:	4877      	ldr	r0, [pc, #476]	; (80014a0 <printRadioSettings+0x31c>)
 80012c4:	f007 fa56 	bl	8008774 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 80012c8:	2002      	movs	r0, #2
 80012ca:	f7ff fadb 	bl	8000884 <NRF24_read_register>
 80012ce:	4603      	mov	r3, r0
 80012d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012d4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012d8:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80012dc:	2b00      	cmp	r3, #0
 80012de:	bfcc      	ite	gt
 80012e0:	2301      	movgt	r3, #1
 80012e2:	2300      	movle	r3, #0
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012e8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012ec:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	bfcc      	ite	gt
 80012f4:	2301      	movgt	r3, #1
 80012f6:	2300      	movle	r3, #0
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012fc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001300:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001304:	2b00      	cmp	r3, #0
 8001306:	bfcc      	ite	gt
 8001308:	2301      	movgt	r3, #1
 800130a:	2300      	movle	r3, #0
 800130c:	b2db      	uxtb	r3, r3
 800130e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001310:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001314:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001318:	2b00      	cmp	r3, #0
 800131a:	bfcc      	ite	gt
 800131c:	2301      	movgt	r3, #1
 800131e:	2300      	movle	r3, #0
 8001320:	b2db      	uxtb	r3, r3
 8001322:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001324:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001328:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800132c:	2b00      	cmp	r3, #0
 800132e:	bfcc      	ite	gt
 8001330:	2301      	movgt	r3, #1
 8001332:	2300      	movle	r3, #0
 8001334:	b2db      	uxtb	r3, r3
 8001336:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001338:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800133c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001340:	2b00      	cmp	r3, #0
 8001342:	bfcc      	ite	gt
 8001344:	2301      	movgt	r3, #1
 8001346:	2300      	movle	r3, #0
 8001348:	b2db      	uxtb	r3, r3
 800134a:	f107 0008 	add.w	r0, r7, #8
 800134e:	9303      	str	r3, [sp, #12]
 8001350:	9402      	str	r4, [sp, #8]
 8001352:	9101      	str	r1, [sp, #4]
 8001354:	9200      	str	r2, [sp, #0]
 8001356:	4633      	mov	r3, r6
 8001358:	462a      	mov	r2, r5
 800135a:	4956      	ldr	r1, [pc, #344]	; (80014b4 <printRadioSettings+0x330>)
 800135c:	f008 fbc2 	bl	8009ae4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001360:	f107 0308 	add.w	r3, r7, #8
 8001364:	4618      	mov	r0, r3
 8001366:	f7fe ffbb 	bl	80002e0 <strlen>
 800136a:	4603      	mov	r3, r0
 800136c:	b29a      	uxth	r2, r3
 800136e:	f107 0108 	add.w	r1, r7, #8
 8001372:	230a      	movs	r3, #10
 8001374:	484a      	ldr	r0, [pc, #296]	; (80014a0 <printRadioSettings+0x31c>)
 8001376:	f007 f9fd 	bl	8008774 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 800137a:	2003      	movs	r0, #3
 800137c:	f7ff fa82 	bl	8000884 <NRF24_read_register>
 8001380:	4603      	mov	r3, r0
 8001382:	f003 0303 	and.w	r3, r3, #3
 8001386:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 800138a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800138e:	3302      	adds	r3, #2
 8001390:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8001394:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001398:	f107 0308 	add.w	r3, r7, #8
 800139c:	4946      	ldr	r1, [pc, #280]	; (80014b8 <printRadioSettings+0x334>)
 800139e:	4618      	mov	r0, r3
 80013a0:	f008 fba0 	bl	8009ae4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013a4:	f107 0308 	add.w	r3, r7, #8
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7fe ff99 	bl	80002e0 <strlen>
 80013ae:	4603      	mov	r3, r0
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	f107 0108 	add.w	r1, r7, #8
 80013b6:	230a      	movs	r3, #10
 80013b8:	4839      	ldr	r0, [pc, #228]	; (80014a0 <printRadioSettings+0x31c>)
 80013ba:	f007 f9db 	bl	8008774 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 80013be:	2005      	movs	r0, #5
 80013c0:	f7ff fa60 	bl	8000884 <NRF24_read_register>
 80013c4:	4603      	mov	r3, r0
 80013c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 80013ca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80013d2:	f107 0308 	add.w	r3, r7, #8
 80013d6:	4939      	ldr	r1, [pc, #228]	; (80014bc <printRadioSettings+0x338>)
 80013d8:	4618      	mov	r0, r3
 80013da:	f008 fb83 	bl	8009ae4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013de:	f107 0308 	add.w	r3, r7, #8
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7fe ff7c 	bl	80002e0 <strlen>
 80013e8:	4603      	mov	r3, r0
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	f107 0108 	add.w	r1, r7, #8
 80013f0:	230a      	movs	r3, #10
 80013f2:	482b      	ldr	r0, [pc, #172]	; (80014a0 <printRadioSettings+0x31c>)
 80013f4:	f007 f9be 	bl	8008774 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 80013f8:	2006      	movs	r0, #6
 80013fa:	f7ff fa43 	bl	8000884 <NRF24_read_register>
 80013fe:	4603      	mov	r3, r0
 8001400:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8001404:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001408:	f003 0308 	and.w	r3, r3, #8
 800140c:	2b00      	cmp	r3, #0
 800140e:	d006      	beq.n	800141e <printRadioSettings+0x29a>
 8001410:	f107 0308 	add.w	r3, r7, #8
 8001414:	492a      	ldr	r1, [pc, #168]	; (80014c0 <printRadioSettings+0x33c>)
 8001416:	4618      	mov	r0, r3
 8001418:	f008 fb64 	bl	8009ae4 <siprintf>
 800141c:	e005      	b.n	800142a <printRadioSettings+0x2a6>
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 800141e:	f107 0308 	add.w	r3, r7, #8
 8001422:	4928      	ldr	r1, [pc, #160]	; (80014c4 <printRadioSettings+0x340>)
 8001424:	4618      	mov	r0, r3
 8001426:	f008 fb5d 	bl	8009ae4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800142a:	f107 0308 	add.w	r3, r7, #8
 800142e:	4618      	mov	r0, r3
 8001430:	f7fe ff56 	bl	80002e0 <strlen>
 8001434:	4603      	mov	r3, r0
 8001436:	b29a      	uxth	r2, r3
 8001438:	f107 0108 	add.w	r1, r7, #8
 800143c:	230a      	movs	r3, #10
 800143e:	4818      	ldr	r0, [pc, #96]	; (80014a0 <printRadioSettings+0x31c>)
 8001440:	f007 f998 	bl	8008774 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8001444:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001448:	f003 0306 	and.w	r3, r3, #6
 800144c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8001450:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001454:	085b      	lsrs	r3, r3, #1
 8001456:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 800145a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800145e:	2b00      	cmp	r3, #0
 8001460:	d106      	bne.n	8001470 <printRadioSettings+0x2ec>
 8001462:	f107 0308 	add.w	r3, r7, #8
 8001466:	4918      	ldr	r1, [pc, #96]	; (80014c8 <printRadioSettings+0x344>)
 8001468:	4618      	mov	r0, r3
 800146a:	f008 fb3b 	bl	8009ae4 <siprintf>
 800146e:	e03b      	b.n	80014e8 <printRadioSettings+0x364>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001470:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001474:	2b01      	cmp	r3, #1
 8001476:	d106      	bne.n	8001486 <printRadioSettings+0x302>
 8001478:	f107 0308 	add.w	r3, r7, #8
 800147c:	4913      	ldr	r1, [pc, #76]	; (80014cc <printRadioSettings+0x348>)
 800147e:	4618      	mov	r0, r3
 8001480:	f008 fb30 	bl	8009ae4 <siprintf>
 8001484:	e030      	b.n	80014e8 <printRadioSettings+0x364>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8001486:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800148a:	2b02      	cmp	r3, #2
 800148c:	d122      	bne.n	80014d4 <printRadioSettings+0x350>
 800148e:	f107 0308 	add.w	r3, r7, #8
 8001492:	490f      	ldr	r1, [pc, #60]	; (80014d0 <printRadioSettings+0x34c>)
 8001494:	4618      	mov	r0, r3
 8001496:	f008 fb25 	bl	8009ae4 <siprintf>
 800149a:	e025      	b.n	80014e8 <printRadioSettings+0x364>
 800149c:	0800ad84 	.word	0x0800ad84
 80014a0:	2400015c 	.word	0x2400015c
 80014a4:	0800adb8 	.word	0x0800adb8
 80014a8:	0800add4 	.word	0x0800add4
 80014ac:	0800adf0 	.word	0x0800adf0
 80014b0:	0800ae04 	.word	0x0800ae04
 80014b4:	0800ae48 	.word	0x0800ae48
 80014b8:	0800ae94 	.word	0x0800ae94
 80014bc:	0800aeb0 	.word	0x0800aeb0
 80014c0:	0800aec4 	.word	0x0800aec4
 80014c4:	0800aedc 	.word	0x0800aedc
 80014c8:	0800aef4 	.word	0x0800aef4
 80014cc:	0800af08 	.word	0x0800af08
 80014d0:	0800af1c 	.word	0x0800af1c
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 80014d4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014d8:	2b03      	cmp	r3, #3
 80014da:	d105      	bne.n	80014e8 <printRadioSettings+0x364>
 80014dc:	f107 0308 	add.w	r3, r7, #8
 80014e0:	49d7      	ldr	r1, [pc, #860]	; (8001840 <printRadioSettings+0x6bc>)
 80014e2:	4618      	mov	r0, r3
 80014e4:	f008 fafe 	bl	8009ae4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014e8:	f107 0308 	add.w	r3, r7, #8
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7fe fef7 	bl	80002e0 <strlen>
 80014f2:	4603      	mov	r3, r0
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	f107 0108 	add.w	r1, r7, #8
 80014fa:	230a      	movs	r3, #10
 80014fc:	48d1      	ldr	r0, [pc, #836]	; (8001844 <printRadioSettings+0x6c0>)
 80014fe:	f007 f939 	bl	8008774 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001502:	463b      	mov	r3, r7
 8001504:	2205      	movs	r2, #5
 8001506:	4619      	mov	r1, r3
 8001508:	200a      	movs	r0, #10
 800150a:	f7ff f9e3 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800150e:	793b      	ldrb	r3, [r7, #4]
 8001510:	461c      	mov	r4, r3
 8001512:	78fb      	ldrb	r3, [r7, #3]
 8001514:	461d      	mov	r5, r3
 8001516:	78bb      	ldrb	r3, [r7, #2]
 8001518:	787a      	ldrb	r2, [r7, #1]
 800151a:	7839      	ldrb	r1, [r7, #0]
 800151c:	f107 0008 	add.w	r0, r7, #8
 8001520:	9102      	str	r1, [sp, #8]
 8001522:	9201      	str	r2, [sp, #4]
 8001524:	9300      	str	r3, [sp, #0]
 8001526:	462b      	mov	r3, r5
 8001528:	4622      	mov	r2, r4
 800152a:	49c7      	ldr	r1, [pc, #796]	; (8001848 <printRadioSettings+0x6c4>)
 800152c:	f008 fada 	bl	8009ae4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001530:	f107 0308 	add.w	r3, r7, #8
 8001534:	4618      	mov	r0, r3
 8001536:	f7fe fed3 	bl	80002e0 <strlen>
 800153a:	4603      	mov	r3, r0
 800153c:	b29a      	uxth	r2, r3
 800153e:	f107 0108 	add.w	r1, r7, #8
 8001542:	230a      	movs	r3, #10
 8001544:	48bf      	ldr	r0, [pc, #764]	; (8001844 <printRadioSettings+0x6c0>)
 8001546:	f007 f915 	bl	8008774 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 800154a:	463b      	mov	r3, r7
 800154c:	2205      	movs	r2, #5
 800154e:	4619      	mov	r1, r3
 8001550:	200b      	movs	r0, #11
 8001552:	f7ff f9bf 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001556:	793b      	ldrb	r3, [r7, #4]
 8001558:	461c      	mov	r4, r3
 800155a:	78fb      	ldrb	r3, [r7, #3]
 800155c:	461d      	mov	r5, r3
 800155e:	78bb      	ldrb	r3, [r7, #2]
 8001560:	787a      	ldrb	r2, [r7, #1]
 8001562:	7839      	ldrb	r1, [r7, #0]
 8001564:	f107 0008 	add.w	r0, r7, #8
 8001568:	9102      	str	r1, [sp, #8]
 800156a:	9201      	str	r2, [sp, #4]
 800156c:	9300      	str	r3, [sp, #0]
 800156e:	462b      	mov	r3, r5
 8001570:	4622      	mov	r2, r4
 8001572:	49b6      	ldr	r1, [pc, #728]	; (800184c <printRadioSettings+0x6c8>)
 8001574:	f008 fab6 	bl	8009ae4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001578:	f107 0308 	add.w	r3, r7, #8
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe feaf 	bl	80002e0 <strlen>
 8001582:	4603      	mov	r3, r0
 8001584:	b29a      	uxth	r2, r3
 8001586:	f107 0108 	add.w	r1, r7, #8
 800158a:	230a      	movs	r3, #10
 800158c:	48ad      	ldr	r0, [pc, #692]	; (8001844 <printRadioSettings+0x6c0>)
 800158e:	f007 f8f1 	bl	8008774 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8001592:	463b      	mov	r3, r7
 8001594:	2201      	movs	r2, #1
 8001596:	4619      	mov	r1, r3
 8001598:	200c      	movs	r0, #12
 800159a:	f7ff f99b 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800159e:	783b      	ldrb	r3, [r7, #0]
 80015a0:	461a      	mov	r2, r3
 80015a2:	f107 0308 	add.w	r3, r7, #8
 80015a6:	49aa      	ldr	r1, [pc, #680]	; (8001850 <printRadioSettings+0x6cc>)
 80015a8:	4618      	mov	r0, r3
 80015aa:	f008 fa9b 	bl	8009ae4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015ae:	f107 0308 	add.w	r3, r7, #8
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7fe fe94 	bl	80002e0 <strlen>
 80015b8:	4603      	mov	r3, r0
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	f107 0108 	add.w	r1, r7, #8
 80015c0:	230a      	movs	r3, #10
 80015c2:	48a0      	ldr	r0, [pc, #640]	; (8001844 <printRadioSettings+0x6c0>)
 80015c4:	f007 f8d6 	bl	8008774 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 80015c8:	463b      	mov	r3, r7
 80015ca:	2201      	movs	r2, #1
 80015cc:	4619      	mov	r1, r3
 80015ce:	200d      	movs	r0, #13
 80015d0:	f7ff f980 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80015d4:	783b      	ldrb	r3, [r7, #0]
 80015d6:	461a      	mov	r2, r3
 80015d8:	f107 0308 	add.w	r3, r7, #8
 80015dc:	499d      	ldr	r1, [pc, #628]	; (8001854 <printRadioSettings+0x6d0>)
 80015de:	4618      	mov	r0, r3
 80015e0:	f008 fa80 	bl	8009ae4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015e4:	f107 0308 	add.w	r3, r7, #8
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7fe fe79 	bl	80002e0 <strlen>
 80015ee:	4603      	mov	r3, r0
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	f107 0108 	add.w	r1, r7, #8
 80015f6:	230a      	movs	r3, #10
 80015f8:	4892      	ldr	r0, [pc, #584]	; (8001844 <printRadioSettings+0x6c0>)
 80015fa:	f007 f8bb 	bl	8008774 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 80015fe:	463b      	mov	r3, r7
 8001600:	2201      	movs	r2, #1
 8001602:	4619      	mov	r1, r3
 8001604:	200e      	movs	r0, #14
 8001606:	f7ff f965 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800160a:	783b      	ldrb	r3, [r7, #0]
 800160c:	461a      	mov	r2, r3
 800160e:	f107 0308 	add.w	r3, r7, #8
 8001612:	4991      	ldr	r1, [pc, #580]	; (8001858 <printRadioSettings+0x6d4>)
 8001614:	4618      	mov	r0, r3
 8001616:	f008 fa65 	bl	8009ae4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800161a:	f107 0308 	add.w	r3, r7, #8
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe fe5e 	bl	80002e0 <strlen>
 8001624:	4603      	mov	r3, r0
 8001626:	b29a      	uxth	r2, r3
 8001628:	f107 0108 	add.w	r1, r7, #8
 800162c:	230a      	movs	r3, #10
 800162e:	4885      	ldr	r0, [pc, #532]	; (8001844 <printRadioSettings+0x6c0>)
 8001630:	f007 f8a0 	bl	8008774 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001634:	463b      	mov	r3, r7
 8001636:	2201      	movs	r2, #1
 8001638:	4619      	mov	r1, r3
 800163a:	200f      	movs	r0, #15
 800163c:	f7ff f94a 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001640:	783b      	ldrb	r3, [r7, #0]
 8001642:	461a      	mov	r2, r3
 8001644:	f107 0308 	add.w	r3, r7, #8
 8001648:	4984      	ldr	r1, [pc, #528]	; (800185c <printRadioSettings+0x6d8>)
 800164a:	4618      	mov	r0, r3
 800164c:	f008 fa4a 	bl	8009ae4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001650:	f107 0308 	add.w	r3, r7, #8
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe fe43 	bl	80002e0 <strlen>
 800165a:	4603      	mov	r3, r0
 800165c:	b29a      	uxth	r2, r3
 800165e:	f107 0108 	add.w	r1, r7, #8
 8001662:	230a      	movs	r3, #10
 8001664:	4877      	ldr	r0, [pc, #476]	; (8001844 <printRadioSettings+0x6c0>)
 8001666:	f007 f885 	bl	8008774 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 800166a:	463b      	mov	r3, r7
 800166c:	2205      	movs	r2, #5
 800166e:	4619      	mov	r1, r3
 8001670:	2010      	movs	r0, #16
 8001672:	f7ff f92f 	bl	80008d4 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001676:	793b      	ldrb	r3, [r7, #4]
 8001678:	461c      	mov	r4, r3
 800167a:	78fb      	ldrb	r3, [r7, #3]
 800167c:	461d      	mov	r5, r3
 800167e:	78bb      	ldrb	r3, [r7, #2]
 8001680:	787a      	ldrb	r2, [r7, #1]
 8001682:	7839      	ldrb	r1, [r7, #0]
 8001684:	f107 0008 	add.w	r0, r7, #8
 8001688:	9102      	str	r1, [sp, #8]
 800168a:	9201      	str	r2, [sp, #4]
 800168c:	9300      	str	r3, [sp, #0]
 800168e:	462b      	mov	r3, r5
 8001690:	4622      	mov	r2, r4
 8001692:	4973      	ldr	r1, [pc, #460]	; (8001860 <printRadioSettings+0x6dc>)
 8001694:	f008 fa26 	bl	8009ae4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001698:	f107 0308 	add.w	r3, r7, #8
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe fe1f 	bl	80002e0 <strlen>
 80016a2:	4603      	mov	r3, r0
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	f107 0108 	add.w	r1, r7, #8
 80016aa:	230a      	movs	r3, #10
 80016ac:	4865      	ldr	r0, [pc, #404]	; (8001844 <printRadioSettings+0x6c0>)
 80016ae:	f007 f861 	bl	8008774 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 80016b2:	2011      	movs	r0, #17
 80016b4:	f7ff f8e6 	bl	8000884 <NRF24_read_register>
 80016b8:	4603      	mov	r3, r0
 80016ba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80016be:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016c6:	f107 0308 	add.w	r3, r7, #8
 80016ca:	4966      	ldr	r1, [pc, #408]	; (8001864 <printRadioSettings+0x6e0>)
 80016cc:	4618      	mov	r0, r3
 80016ce:	f008 fa09 	bl	8009ae4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016d2:	f107 0308 	add.w	r3, r7, #8
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7fe fe02 	bl	80002e0 <strlen>
 80016dc:	4603      	mov	r3, r0
 80016de:	b29a      	uxth	r2, r3
 80016e0:	f107 0108 	add.w	r1, r7, #8
 80016e4:	230a      	movs	r3, #10
 80016e6:	4857      	ldr	r0, [pc, #348]	; (8001844 <printRadioSettings+0x6c0>)
 80016e8:	f007 f844 	bl	8008774 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 80016ec:	2012      	movs	r0, #18
 80016ee:	f7ff f8c9 	bl	8000884 <NRF24_read_register>
 80016f2:	4603      	mov	r3, r0
 80016f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80016f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016fc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001700:	f107 0308 	add.w	r3, r7, #8
 8001704:	4958      	ldr	r1, [pc, #352]	; (8001868 <printRadioSettings+0x6e4>)
 8001706:	4618      	mov	r0, r3
 8001708:	f008 f9ec 	bl	8009ae4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800170c:	f107 0308 	add.w	r3, r7, #8
 8001710:	4618      	mov	r0, r3
 8001712:	f7fe fde5 	bl	80002e0 <strlen>
 8001716:	4603      	mov	r3, r0
 8001718:	b29a      	uxth	r2, r3
 800171a:	f107 0108 	add.w	r1, r7, #8
 800171e:	230a      	movs	r3, #10
 8001720:	4848      	ldr	r0, [pc, #288]	; (8001844 <printRadioSettings+0x6c0>)
 8001722:	f007 f827 	bl	8008774 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8001726:	2013      	movs	r0, #19
 8001728:	f7ff f8ac 	bl	8000884 <NRF24_read_register>
 800172c:	4603      	mov	r3, r0
 800172e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001732:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001736:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800173a:	f107 0308 	add.w	r3, r7, #8
 800173e:	494b      	ldr	r1, [pc, #300]	; (800186c <printRadioSettings+0x6e8>)
 8001740:	4618      	mov	r0, r3
 8001742:	f008 f9cf 	bl	8009ae4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001746:	f107 0308 	add.w	r3, r7, #8
 800174a:	4618      	mov	r0, r3
 800174c:	f7fe fdc8 	bl	80002e0 <strlen>
 8001750:	4603      	mov	r3, r0
 8001752:	b29a      	uxth	r2, r3
 8001754:	f107 0108 	add.w	r1, r7, #8
 8001758:	230a      	movs	r3, #10
 800175a:	483a      	ldr	r0, [pc, #232]	; (8001844 <printRadioSettings+0x6c0>)
 800175c:	f007 f80a 	bl	8008774 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8001760:	2014      	movs	r0, #20
 8001762:	f7ff f88f 	bl	8000884 <NRF24_read_register>
 8001766:	4603      	mov	r3, r0
 8001768:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800176c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001770:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001774:	f107 0308 	add.w	r3, r7, #8
 8001778:	493d      	ldr	r1, [pc, #244]	; (8001870 <printRadioSettings+0x6ec>)
 800177a:	4618      	mov	r0, r3
 800177c:	f008 f9b2 	bl	8009ae4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001780:	f107 0308 	add.w	r3, r7, #8
 8001784:	4618      	mov	r0, r3
 8001786:	f7fe fdab 	bl	80002e0 <strlen>
 800178a:	4603      	mov	r3, r0
 800178c:	b29a      	uxth	r2, r3
 800178e:	f107 0108 	add.w	r1, r7, #8
 8001792:	230a      	movs	r3, #10
 8001794:	482b      	ldr	r0, [pc, #172]	; (8001844 <printRadioSettings+0x6c0>)
 8001796:	f006 ffed 	bl	8008774 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 800179a:	2015      	movs	r0, #21
 800179c:	f7ff f872 	bl	8000884 <NRF24_read_register>
 80017a0:	4603      	mov	r3, r0
 80017a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80017a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017ae:	f107 0308 	add.w	r3, r7, #8
 80017b2:	4930      	ldr	r1, [pc, #192]	; (8001874 <printRadioSettings+0x6f0>)
 80017b4:	4618      	mov	r0, r3
 80017b6:	f008 f995 	bl	8009ae4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017ba:	f107 0308 	add.w	r3, r7, #8
 80017be:	4618      	mov	r0, r3
 80017c0:	f7fe fd8e 	bl	80002e0 <strlen>
 80017c4:	4603      	mov	r3, r0
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	f107 0108 	add.w	r1, r7, #8
 80017cc:	230a      	movs	r3, #10
 80017ce:	481d      	ldr	r0, [pc, #116]	; (8001844 <printRadioSettings+0x6c0>)
 80017d0:	f006 ffd0 	bl	8008774 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 80017d4:	2016      	movs	r0, #22
 80017d6:	f7ff f855 	bl	8000884 <NRF24_read_register>
 80017da:	4603      	mov	r3, r0
 80017dc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80017e0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017e8:	f107 0308 	add.w	r3, r7, #8
 80017ec:	4922      	ldr	r1, [pc, #136]	; (8001878 <printRadioSettings+0x6f4>)
 80017ee:	4618      	mov	r0, r3
 80017f0:	f008 f978 	bl	8009ae4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017f4:	f107 0308 	add.w	r3, r7, #8
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe fd71 	bl	80002e0 <strlen>
 80017fe:	4603      	mov	r3, r0
 8001800:	b29a      	uxth	r2, r3
 8001802:	f107 0108 	add.w	r1, r7, #8
 8001806:	230a      	movs	r3, #10
 8001808:	480e      	ldr	r0, [pc, #56]	; (8001844 <printRadioSettings+0x6c0>)
 800180a:	f006 ffb3 	bl	8008774 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 800180e:	201c      	movs	r0, #28
 8001810:	f7ff f838 	bl	8000884 <NRF24_read_register>
 8001814:	4603      	mov	r3, r0
 8001816:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800181a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800181e:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001822:	2b00      	cmp	r3, #0
 8001824:	bfcc      	ite	gt
 8001826:	2301      	movgt	r3, #1
 8001828:	2300      	movle	r3, #0
 800182a:	b2db      	uxtb	r3, r3
 800182c:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800182e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001832:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001836:	2b00      	cmp	r3, #0
 8001838:	bfcc      	ite	gt
 800183a:	2301      	movgt	r3, #1
 800183c:	2300      	movle	r3, #0
 800183e:	e01d      	b.n	800187c <printRadioSettings+0x6f8>
 8001840:	0800af30 	.word	0x0800af30
 8001844:	2400015c 	.word	0x2400015c
 8001848:	0800af44 	.word	0x0800af44
 800184c:	0800af74 	.word	0x0800af74
 8001850:	0800afa4 	.word	0x0800afa4
 8001854:	0800afcc 	.word	0x0800afcc
 8001858:	0800aff4 	.word	0x0800aff4
 800185c:	0800b01c 	.word	0x0800b01c
 8001860:	0800b044 	.word	0x0800b044
 8001864:	0800b070 	.word	0x0800b070
 8001868:	0800b08c 	.word	0x0800b08c
 800186c:	0800b0a8 	.word	0x0800b0a8
 8001870:	0800b0c4 	.word	0x0800b0c4
 8001874:	0800b0e0 	.word	0x0800b0e0
 8001878:	0800b0fc 	.word	0x0800b0fc
 800187c:	b2db      	uxtb	r3, r3
 800187e:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001880:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001884:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001888:	2b00      	cmp	r3, #0
 800188a:	bfcc      	ite	gt
 800188c:	2301      	movgt	r3, #1
 800188e:	2300      	movle	r3, #0
 8001890:	b2db      	uxtb	r3, r3
 8001892:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001894:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001898:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800189c:	2b00      	cmp	r3, #0
 800189e:	bfcc      	ite	gt
 80018a0:	2301      	movgt	r3, #1
 80018a2:	2300      	movle	r3, #0
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80018a8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80018ac:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	bfcc      	ite	gt
 80018b4:	2301      	movgt	r3, #1
 80018b6:	2300      	movle	r3, #0
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80018bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80018c0:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	bfcc      	ite	gt
 80018c8:	2301      	movgt	r3, #1
 80018ca:	2300      	movle	r3, #0
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	f107 0008 	add.w	r0, r7, #8
 80018d2:	9303      	str	r3, [sp, #12]
 80018d4:	9402      	str	r4, [sp, #8]
 80018d6:	9101      	str	r1, [sp, #4]
 80018d8:	9200      	str	r2, [sp, #0]
 80018da:	4633      	mov	r3, r6
 80018dc:	462a      	mov	r2, r5
 80018de:	4936      	ldr	r1, [pc, #216]	; (80019b8 <printRadioSettings+0x834>)
 80018e0:	f008 f900 	bl	8009ae4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018e4:	f107 0308 	add.w	r3, r7, #8
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7fe fcf9 	bl	80002e0 <strlen>
 80018ee:	4603      	mov	r3, r0
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	f107 0108 	add.w	r1, r7, #8
 80018f6:	230a      	movs	r3, #10
 80018f8:	4830      	ldr	r0, [pc, #192]	; (80019bc <printRadioSettings+0x838>)
 80018fa:	f006 ff3b 	bl	8008774 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 80018fe:	201d      	movs	r0, #29
 8001900:	f7fe ffc0 	bl	8000884 <NRF24_read_register>
 8001904:	4603      	mov	r3, r0
 8001906:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 800190a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800190e:	f003 0304 	and.w	r3, r3, #4
 8001912:	2b00      	cmp	r3, #0
 8001914:	d006      	beq.n	8001924 <printRadioSettings+0x7a0>
 8001916:	f107 0308 	add.w	r3, r7, #8
 800191a:	4929      	ldr	r1, [pc, #164]	; (80019c0 <printRadioSettings+0x83c>)
 800191c:	4618      	mov	r0, r3
 800191e:	f008 f8e1 	bl	8009ae4 <siprintf>
 8001922:	e005      	b.n	8001930 <printRadioSettings+0x7ac>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001924:	f107 0308 	add.w	r3, r7, #8
 8001928:	4926      	ldr	r1, [pc, #152]	; (80019c4 <printRadioSettings+0x840>)
 800192a:	4618      	mov	r0, r3
 800192c:	f008 f8da 	bl	8009ae4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001930:	f107 0308 	add.w	r3, r7, #8
 8001934:	4618      	mov	r0, r3
 8001936:	f7fe fcd3 	bl	80002e0 <strlen>
 800193a:	4603      	mov	r3, r0
 800193c:	b29a      	uxth	r2, r3
 800193e:	f107 0108 	add.w	r1, r7, #8
 8001942:	230a      	movs	r3, #10
 8001944:	481d      	ldr	r0, [pc, #116]	; (80019bc <printRadioSettings+0x838>)
 8001946:	f006 ff15 	bl	8008774 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 800194a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d006      	beq.n	8001964 <printRadioSettings+0x7e0>
 8001956:	f107 0308 	add.w	r3, r7, #8
 800195a:	491b      	ldr	r1, [pc, #108]	; (80019c8 <printRadioSettings+0x844>)
 800195c:	4618      	mov	r0, r3
 800195e:	f008 f8c1 	bl	8009ae4 <siprintf>
 8001962:	e005      	b.n	8001970 <printRadioSettings+0x7ec>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001964:	f107 0308 	add.w	r3, r7, #8
 8001968:	4918      	ldr	r1, [pc, #96]	; (80019cc <printRadioSettings+0x848>)
 800196a:	4618      	mov	r0, r3
 800196c:	f008 f8ba 	bl	8009ae4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001970:	f107 0308 	add.w	r3, r7, #8
 8001974:	4618      	mov	r0, r3
 8001976:	f7fe fcb3 	bl	80002e0 <strlen>
 800197a:	4603      	mov	r3, r0
 800197c:	b29a      	uxth	r2, r3
 800197e:	f107 0108 	add.w	r1, r7, #8
 8001982:	230a      	movs	r3, #10
 8001984:	480d      	ldr	r0, [pc, #52]	; (80019bc <printRadioSettings+0x838>)
 8001986:	f006 fef5 	bl	8008774 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800198a:	f107 0308 	add.w	r3, r7, #8
 800198e:	4910      	ldr	r1, [pc, #64]	; (80019d0 <printRadioSettings+0x84c>)
 8001990:	4618      	mov	r0, r3
 8001992:	f008 f8a7 	bl	8009ae4 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001996:	f107 0308 	add.w	r3, r7, #8
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe fca0 	bl	80002e0 <strlen>
 80019a0:	4603      	mov	r3, r0
 80019a2:	b29a      	uxth	r2, r3
 80019a4:	f107 0108 	add.w	r1, r7, #8
 80019a8:	230a      	movs	r3, #10
 80019aa:	4804      	ldr	r0, [pc, #16]	; (80019bc <printRadioSettings+0x838>)
 80019ac:	f006 fee2 	bl	8008774 <HAL_UART_Transmit>
}
 80019b0:	bf00      	nop
 80019b2:	3774      	adds	r7, #116	; 0x74
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019b8:	0800b118 	.word	0x0800b118
 80019bc:	2400015c 	.word	0x2400015c
 80019c0:	0800b164 	.word	0x0800b164
 80019c4:	0800b17c 	.word	0x0800b17c
 80019c8:	0800b194 	.word	0x0800b194
 80019cc:	0800b1b0 	.word	0x0800b1b0
 80019d0:	0800ad84 	.word	0x0800ad84

080019d4 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 80019d4:	b084      	sub	sp, #16
 80019d6:	b580      	push	{r7, lr}
 80019d8:	af00      	add	r7, sp, #0
 80019da:	f107 0c08 	add.w	ip, r7, #8
 80019de:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 80019e2:	4b07      	ldr	r3, [pc, #28]	; (8001a00 <nrf24_DebugUART_Init+0x2c>)
 80019e4:	4618      	mov	r0, r3
 80019e6:	f107 0308 	add.w	r3, r7, #8
 80019ea:	2290      	movs	r2, #144	; 0x90
 80019ec:	4619      	mov	r1, r3
 80019ee:	f007 ffa1 	bl	8009934 <memcpy>
}
 80019f2:	bf00      	nop
 80019f4:	46bd      	mov	sp, r7
 80019f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80019fa:	b004      	add	sp, #16
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	2400015c 	.word	0x2400015c

08001a04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a04:	b590      	push	{r4, r7, lr}
 8001a06:	b0b3      	sub	sp, #204	; 0xcc
 8001a08:	af22      	add	r7, sp, #136	; 0x88
  /* USER CODE BEGIN 1 */
	printf("Entered main");
 8001a0a:	4898      	ldr	r0, [pc, #608]	; (8001c6c <main+0x268>)
 8001a0c:	f007 ffa8 	bl	8009960 <iprintf>
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8001a10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a14:	63fb      	str	r3, [r7, #60]	; 0x3c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001a16:	bf00      	nop
 8001a18:	4b95      	ldr	r3, [pc, #596]	; (8001c70 <main+0x26c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d004      	beq.n	8001a2e <main+0x2a>
 8001a24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a26:	1e5a      	subs	r2, r3, #1
 8001a28:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	dcf4      	bgt.n	8001a18 <main+0x14>
  if ( timeout < 0 )
 8001a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	da01      	bge.n	8001a38 <main+0x34>
  {
  Error_Handler();
 8001a34:	f000 fd80 	bl	8002538 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a38:	f001 f8b0 	bl	8002b9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a3c:	f000 f942 	bl	8001cc4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001a40:	4b8b      	ldr	r3, [pc, #556]	; (8001c70 <main+0x26c>)
 8001a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a46:	4a8a      	ldr	r2, [pc, #552]	; (8001c70 <main+0x26c>)
 8001a48:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a50:	4b87      	ldr	r3, [pc, #540]	; (8001c70 <main+0x26c>)
 8001a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5a:	637b      	str	r3, [r7, #52]	; 0x34
 8001a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f002 f8e4 	bl	8003c2c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001a64:	2100      	movs	r1, #0
 8001a66:	2000      	movs	r0, #0
 8001a68:	f002 f8fa 	bl	8003c60 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8001a6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a70:	63fb      	str	r3, [r7, #60]	; 0x3c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001a72:	bf00      	nop
 8001a74:	4b7e      	ldr	r3, [pc, #504]	; (8001c70 <main+0x26c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d104      	bne.n	8001a8a <main+0x86>
 8001a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a82:	1e5a      	subs	r2, r3, #1
 8001a84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	dcf4      	bgt.n	8001a74 <main+0x70>
if ( timeout < 0 )
 8001a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	da01      	bge.n	8001a94 <main+0x90>
{
Error_Handler();
 8001a90:	f000 fd52 	bl	8002538 <Error_Handler>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a94:	f000 fbde 	bl	8002254 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001a98:	f000 fb90 	bl	80021bc <MX_USART3_UART_Init>
  MX_TIM14_Init();
 8001a9c:	f000 faee 	bl	800207c <MX_TIM14_Init>
  MX_TIM13_Init();
 8001aa0:	f000 fa9e 	bl	8001fe0 <MX_TIM13_Init>
  MX_TIM15_Init();
 8001aa4:	f000 fb38 	bl	8002118 <MX_TIM15_Init>
  MX_SPI5_Init();
 8001aa8:	f000 fa44 	bl	8001f34 <MX_SPI5_Init>
  MX_FDCAN1_Init();
 8001aac:	f000 f988 	bl	8001dc0 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  enum CurrentState state = GoingTo60;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  NRF24_begin(GPIOC, Nrf_CSn_Pin, Nrf_CE_Pin, hspi5);
 8001ab6:	4c6f      	ldr	r4, [pc, #444]	; (8001c74 <main+0x270>)
 8001ab8:	4668      	mov	r0, sp
 8001aba:	1d23      	adds	r3, r4, #4
 8001abc:	2284      	movs	r2, #132	; 0x84
 8001abe:	4619      	mov	r1, r3
 8001ac0:	f007 ff38 	bl	8009934 <memcpy>
 8001ac4:	6823      	ldr	r3, [r4, #0]
 8001ac6:	2240      	movs	r2, #64	; 0x40
 8001ac8:	2180      	movs	r1, #128	; 0x80
 8001aca:	486b      	ldr	r0, [pc, #428]	; (8001c78 <main+0x274>)
 8001acc:	f7fe ffc2 	bl	8000a54 <NRF24_begin>
    nrf24_DebugUART_Init(huart3);
 8001ad0:	4c6a      	ldr	r4, [pc, #424]	; (8001c7c <main+0x278>)
 8001ad2:	4668      	mov	r0, sp
 8001ad4:	f104 0310 	add.w	r3, r4, #16
 8001ad8:	2280      	movs	r2, #128	; 0x80
 8001ada:	4619      	mov	r1, r3
 8001adc:	f007 ff2a 	bl	8009934 <memcpy>
 8001ae0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ae4:	f7ff ff76 	bl	80019d4 <nrf24_DebugUART_Init>
    NRF24_openReadingPipe(1, RxpipeAddrs);
 8001ae8:	4b65      	ldr	r3, [pc, #404]	; (8001c80 <main+0x27c>)
 8001aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aee:	2001      	movs	r0, #1
 8001af0:	f7ff f8de 	bl	8000cb0 <NRF24_openReadingPipe>
    NRF24_setAutoAck(false);
 8001af4:	2000      	movs	r0, #0
 8001af6:	f7ff f9fd 	bl	8000ef4 <NRF24_setAutoAck>
    NRF24_setChannel(52);
 8001afa:	2034      	movs	r0, #52	; 0x34
 8001afc:	f7ff f941 	bl	8000d82 <NRF24_setChannel>
    NRF24_setPayloadSize(32);
 8001b00:	2020      	movs	r0, #32
 8001b02:	f7ff f953 	bl	8000dac <NRF24_setPayloadSize>
    NRF24_setDataRate(RF24_2MBPS);
 8001b06:	2001      	movs	r0, #1
 8001b08:	f7ff fa42 	bl	8000f90 <NRF24_setDataRate>

    NRF24_enableDynamicPayloads();
 8001b0c:	f7ff f9a8 	bl	8000e60 <NRF24_enableDynamicPayloads>
    NRF24_enableAckPayload();
 8001b10:	f7ff f978 	bl	8000e04 <NRF24_enableAckPayload>
    printRadioSettings();
 8001b14:	f7ff fb36 	bl	8001184 <printRadioSettings>
    NRF24_startListening();
 8001b18:	f7ff f87c 	bl	8000c14 <NRF24_startListening>
    printf("Starting NRF24\r\n");
 8001b1c:	4859      	ldr	r0, [pc, #356]	; (8001c84 <main+0x280>)
 8001b1e:	f007 ffa5 	bl	8009a6c <puts>
    HAL_Delay(1000);
 8001b22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b26:	f001 f8cb 	bl	8002cc0 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	4856      	ldr	r0, [pc, #344]	; (8001c88 <main+0x284>)
 8001b2e:	f005 fc85 	bl	800743c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8001b32:	2100      	movs	r1, #0
 8001b34:	4855      	ldr	r0, [pc, #340]	; (8001c8c <main+0x288>)
 8001b36:	f005 fc81 	bl	800743c <HAL_TIM_PWM_Start>
  while (1)
  {
	  //ProcessCANMessage();
	 	  char myRxData[50] = "";
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	603b      	str	r3, [r7, #0]
 8001b3e:	1d3b      	adds	r3, r7, #4
 8001b40:	222e      	movs	r2, #46	; 0x2e
 8001b42:	2100      	movs	r1, #0
 8001b44:	4618      	mov	r0, r3
 8001b46:	f007 ff03 	bl	8009950 <memset>

	       // Verifica si hay datos disponibles desde el módulo NRF
	       if (NRF24_available()) {
 8001b4a:	f7ff f889 	bl	8000c60 <NRF24_available>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d038      	beq.n	8001bc6 <main+0x1c2>
	           NRF24_read(buffer, 6);  // Lee 6 bytes del buffer
 8001b54:	2106      	movs	r1, #6
 8001b56:	484e      	ldr	r0, [pc, #312]	; (8001c90 <main+0x28c>)
 8001b58:	f7ff f88a 	bl	8000c70 <NRF24_read>
	           parseMessage(buffer, &varX, &varY, &varD);  // Parsea mensaje para obtener varX, varY, varD
 8001b5c:	4b4d      	ldr	r3, [pc, #308]	; (8001c94 <main+0x290>)
 8001b5e:	4a4e      	ldr	r2, [pc, #312]	; (8001c98 <main+0x294>)
 8001b60:	494e      	ldr	r1, [pc, #312]	; (8001c9c <main+0x298>)
 8001b62:	484b      	ldr	r0, [pc, #300]	; (8001c90 <main+0x28c>)
 8001b64:	f000 fc0e 	bl	8002384 <parseMessage>

	           if (buffer[0] == 0xFF && buffer[1] == 0xFF) {
 8001b68:	4b49      	ldr	r3, [pc, #292]	; (8001c90 <main+0x28c>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2bff      	cmp	r3, #255	; 0xff
 8001b6e:	d10a      	bne.n	8001b86 <main+0x182>
 8001b70:	4b47      	ldr	r3, [pc, #284]	; (8001c90 <main+0x28c>)
 8001b72:	785b      	ldrb	r3, [r3, #1]
 8001b74:	2bff      	cmp	r3, #255	; 0xff
 8001b76:	d106      	bne.n	8001b86 <main+0x182>
	               snprintf(myRxData, 32, "Coordinates not found\r\n");
 8001b78:	463b      	mov	r3, r7
 8001b7a:	4a49      	ldr	r2, [pc, #292]	; (8001ca0 <main+0x29c>)
 8001b7c:	2120      	movs	r1, #32
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f007 ff7c 	bl	8009a7c <sniprintf>
 8001b84:	e00f      	b.n	8001ba6 <main+0x1a2>
	           } else {
	               snprintf(myRxData, 32, "%u %u %u \r\n", varX, varY, varD);
 8001b86:	4b45      	ldr	r3, [pc, #276]	; (8001c9c <main+0x298>)
 8001b88:	881b      	ldrh	r3, [r3, #0]
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4b42      	ldr	r3, [pc, #264]	; (8001c98 <main+0x294>)
 8001b8e:	881b      	ldrh	r3, [r3, #0]
 8001b90:	461a      	mov	r2, r3
 8001b92:	4b40      	ldr	r3, [pc, #256]	; (8001c94 <main+0x290>)
 8001b94:	881b      	ldrh	r3, [r3, #0]
 8001b96:	4638      	mov	r0, r7
 8001b98:	9301      	str	r3, [sp, #4]
 8001b9a:	9200      	str	r2, [sp, #0]
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	4a41      	ldr	r2, [pc, #260]	; (8001ca4 <main+0x2a0>)
 8001ba0:	2120      	movs	r1, #32
 8001ba2:	f007 ff6b 	bl	8009a7c <sniprintf>
	               // Controla el duty cycle del motor en función de varY
	           }


	           // Envía una carga útil de respuesta al módulo NRF
	           NRF24_writeAckPayload(1, myAckPayload, 32);
 8001ba6:	2220      	movs	r2, #32
 8001ba8:	493f      	ldr	r1, [pc, #252]	; (8001ca8 <main+0x2a4>)
 8001baa:	2001      	movs	r0, #1
 8001bac:	f7ff fa9d 	bl	80010ea <NRF24_writeAckPayload>

	           // Transmite los datos recibidos a través de UART
	           HAL_UART_Transmit(&huart3, (uint8_t *)myRxData, strlen(myRxData), 10);
 8001bb0:	463b      	mov	r3, r7
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7fe fb94 	bl	80002e0 <strlen>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	4639      	mov	r1, r7
 8001bbe:	230a      	movs	r3, #10
 8001bc0:	482e      	ldr	r0, [pc, #184]	; (8001c7c <main+0x278>)
 8001bc2:	f006 fdd7 	bl	8008774 <HAL_UART_Transmit>
	       }


      if(state == GoingTo60){
 8001bc6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d112      	bne.n	8001bf4 <main+0x1f0>
    	  printf("GoingTo60");
 8001bce:	4837      	ldr	r0, [pc, #220]	; (8001cac <main+0x2a8>)
 8001bd0:	f007 fec6 	bl	8009960 <iprintf>
    	  Turning_SetAngle(0);
 8001bd4:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8001cb0 <main+0x2ac>
 8001bd8:	f000 fc18 	bl	800240c <Turning_SetAngle>
    	  MotorSetSpeed(1.0f);
 8001bdc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001be0:	f000 fc6a 	bl	80024b8 <MotorSetSpeed>
    	  if(varX > 60){
 8001be4:	4b2d      	ldr	r3, [pc, #180]	; (8001c9c <main+0x298>)
 8001be6:	881b      	ldrh	r3, [r3, #0]
 8001be8:	2b3c      	cmp	r3, #60	; 0x3c
 8001bea:	d9a6      	bls.n	8001b3a <main+0x136>
    		  state = Turning;
 8001bec:	2301      	movs	r3, #1
 8001bee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8001bf2:	e7a2      	b.n	8001b3a <main+0x136>
    	  }
      }
      else if(state == Turning){
 8001bf4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d112      	bne.n	8001c22 <main+0x21e>
    	  printf("Turning");
 8001bfc:	482d      	ldr	r0, [pc, #180]	; (8001cb4 <main+0x2b0>)
 8001bfe:	f007 feaf 	bl	8009960 <iprintf>
    	  Turning_SetAngle(45.0f);
 8001c02:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8001cb8 <main+0x2b4>
 8001c06:	f000 fc01 	bl	800240c <Turning_SetAngle>
    	  MotorSetSpeed(1.0f);
 8001c0a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001c0e:	f000 fc53 	bl	80024b8 <MotorSetSpeed>
    	  if(varD <= 180){
 8001c12:	4b20      	ldr	r3, [pc, #128]	; (8001c94 <main+0x290>)
 8001c14:	881b      	ldrh	r3, [r3, #0]
 8001c16:	2bb4      	cmp	r3, #180	; 0xb4
 8001c18:	d88f      	bhi.n	8001b3a <main+0x136>
    		  state = HeadingBack;
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8001c20:	e78b      	b.n	8001b3a <main+0x136>
    	  }
      }
      else if(state == HeadingBack){
 8001c22:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d113      	bne.n	8001c52 <main+0x24e>
    	  printf("HeadingBack");
 8001c2a:	4824      	ldr	r0, [pc, #144]	; (8001cbc <main+0x2b8>)
 8001c2c:	f007 fe98 	bl	8009960 <iprintf>
    	  Turning_SetAngle(0);
 8001c30:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8001cb0 <main+0x2ac>
 8001c34:	f000 fbea 	bl	800240c <Turning_SetAngle>
    	  MotorSetSpeed(1.0f);
 8001c38:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001c3c:	f000 fc3c 	bl	80024b8 <MotorSetSpeed>
    	  if(varX < 10){
 8001c40:	4b16      	ldr	r3, [pc, #88]	; (8001c9c <main+0x298>)
 8001c42:	881b      	ldrh	r3, [r3, #0]
 8001c44:	2b09      	cmp	r3, #9
 8001c46:	f63f af78 	bhi.w	8001b3a <main+0x136>
    		  state = Finished;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8001c50:	e773      	b.n	8001b3a <main+0x136>
    	  }
      }
      else if(state == Finished){
 8001c52:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001c56:	2b03      	cmp	r3, #3
 8001c58:	f47f af6f 	bne.w	8001b3a <main+0x136>
    	  MotorSetSpeed(0.0f);
 8001c5c:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8001cb0 <main+0x2ac>
 8001c60:	f000 fc2a 	bl	80024b8 <MotorSetSpeed>
    	  printf("CONCLUDED");
 8001c64:	4816      	ldr	r0, [pc, #88]	; (8001cc0 <main+0x2bc>)
 8001c66:	f007 fe7b 	bl	8009960 <iprintf>
  {
 8001c6a:	e766      	b.n	8001b3a <main+0x136>
 8001c6c:	0800b394 	.word	0x0800b394
 8001c70:	58024400 	.word	0x58024400
 8001c74:	2400028c 	.word	0x2400028c
 8001c78:	58020800 	.word	0x58020800
 8001c7c:	240003f8 	.word	0x240003f8
 8001c80:	24000008 	.word	0x24000008
 8001c84:	0800b3a4 	.word	0x0800b3a4
 8001c88:	24000314 	.word	0x24000314
 8001c8c:	24000360 	.word	0x24000360
 8001c90:	240004cc 	.word	0x240004cc
 8001c94:	240004d6 	.word	0x240004d6
 8001c98:	240004d4 	.word	0x240004d4
 8001c9c:	240004d2 	.word	0x240004d2
 8001ca0:	0800b3b4 	.word	0x0800b3b4
 8001ca4:	0800b3cc 	.word	0x0800b3cc
 8001ca8:	24000010 	.word	0x24000010
 8001cac:	0800b3d8 	.word	0x0800b3d8
 8001cb0:	00000000 	.word	0x00000000
 8001cb4:	0800b3e4 	.word	0x0800b3e4
 8001cb8:	42340000 	.word	0x42340000
 8001cbc:	0800b3ec 	.word	0x0800b3ec
 8001cc0:	0800b3f8 	.word	0x0800b3f8

08001cc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b09c      	sub	sp, #112	; 0x70
 8001cc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cce:	224c      	movs	r2, #76	; 0x4c
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f007 fe3c 	bl	8009950 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cd8:	1d3b      	adds	r3, r7, #4
 8001cda:	2220      	movs	r2, #32
 8001cdc:	2100      	movs	r1, #0
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f007 fe36 	bl	8009950 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001ce4:	2004      	movs	r0, #4
 8001ce6:	f001 ffcf 	bl	8003c88 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001cea:	2300      	movs	r3, #0
 8001cec:	603b      	str	r3, [r7, #0]
 8001cee:	4b32      	ldr	r3, [pc, #200]	; (8001db8 <SystemClock_Config+0xf4>)
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	4a31      	ldr	r2, [pc, #196]	; (8001db8 <SystemClock_Config+0xf4>)
 8001cf4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cf8:	6193      	str	r3, [r2, #24]
 8001cfa:	4b2f      	ldr	r3, [pc, #188]	; (8001db8 <SystemClock_Config+0xf4>)
 8001cfc:	699b      	ldr	r3, [r3, #24]
 8001cfe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d02:	603b      	str	r3, [r7, #0]
 8001d04:	4b2d      	ldr	r3, [pc, #180]	; (8001dbc <SystemClock_Config+0xf8>)
 8001d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d08:	4a2c      	ldr	r2, [pc, #176]	; (8001dbc <SystemClock_Config+0xf8>)
 8001d0a:	f043 0301 	orr.w	r3, r3, #1
 8001d0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001d10:	4b2a      	ldr	r3, [pc, #168]	; (8001dbc <SystemClock_Config+0xf8>)
 8001d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	603b      	str	r3, [r7, #0]
 8001d1a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001d1c:	bf00      	nop
 8001d1e:	4b26      	ldr	r3, [pc, #152]	; (8001db8 <SystemClock_Config+0xf4>)
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d2a:	d1f8      	bne.n	8001d1e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001d30:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001d34:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001d36:	2301      	movs	r3, #1
 8001d38:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d3a:	2340      	movs	r3, #64	; 0x40
 8001d3c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d42:	2302      	movs	r3, #2
 8001d44:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001d46:	2302      	movs	r3, #2
 8001d48:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8001d4a:	23f0      	movs	r3, #240	; 0xf0
 8001d4c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 24;
 8001d52:	2318      	movs	r3, #24
 8001d54:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001d56:	2302      	movs	r3, #2
 8001d58:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001d5a:	2308      	movs	r3, #8
 8001d5c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001d62:	2300      	movs	r3, #0
 8001d64:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f001 ffe6 	bl	8003d3c <HAL_RCC_OscConfig>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d001      	beq.n	8001d7a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001d76:	f000 fbdf 	bl	8002538 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d7a:	233f      	movs	r3, #63	; 0x3f
 8001d7c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001d86:	2308      	movs	r3, #8
 8001d88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001d8a:	2340      	movs	r3, #64	; 0x40
 8001d8c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001d8e:	2340      	movs	r3, #64	; 0x40
 8001d90:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001d92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d96:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001d98:	2340      	movs	r3, #64	; 0x40
 8001d9a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001d9c:	1d3b      	adds	r3, r7, #4
 8001d9e:	2104      	movs	r1, #4
 8001da0:	4618      	mov	r0, r3
 8001da2:	f002 fbf9 	bl	8004598 <HAL_RCC_ClockConfig>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <SystemClock_Config+0xec>
  {
    Error_Handler();
 8001dac:	f000 fbc4 	bl	8002538 <Error_Handler>
  }
}
 8001db0:	bf00      	nop
 8001db2:	3770      	adds	r7, #112	; 0x70
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	58024800 	.word	0x58024800
 8001dbc:	58000400 	.word	0x58000400

08001dc0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001dc6:	4b57      	ldr	r3, [pc, #348]	; (8001f24 <MX_FDCAN1_Init+0x164>)
 8001dc8:	4a57      	ldr	r2, [pc, #348]	; (8001f28 <MX_FDCAN1_Init+0x168>)
 8001dca:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001dcc:	4b55      	ldr	r3, [pc, #340]	; (8001f24 <MX_FDCAN1_Init+0x164>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001dd2:	4b54      	ldr	r3, [pc, #336]	; (8001f24 <MX_FDCAN1_Init+0x164>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001dd8:	4b52      	ldr	r3, [pc, #328]	; (8001f24 <MX_FDCAN1_Init+0x164>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001dde:	4b51      	ldr	r3, [pc, #324]	; (8001f24 <MX_FDCAN1_Init+0x164>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 8001de4:	4b4f      	ldr	r3, [pc, #316]	; (8001f24 <MX_FDCAN1_Init+0x164>)
 8001de6:	2201      	movs	r2, #1
 8001de8:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8001dea:	4b4e      	ldr	r3, [pc, #312]	; (8001f24 <MX_FDCAN1_Init+0x164>)
 8001dec:	2202      	movs	r2, #2
 8001dee:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8001df0:	4b4c      	ldr	r3, [pc, #304]	; (8001f24 <MX_FDCAN1_Init+0x164>)
 8001df2:	2208      	movs	r2, #8
 8001df4:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 0x1F;
 8001df6:	4b4b      	ldr	r3, [pc, #300]	; (8001f24 <MX_FDCAN1_Init+0x164>)
 8001df8:	221f      	movs	r2, #31
 8001dfa:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8001dfc:	4b49      	ldr	r3, [pc, #292]	; (8001f24 <MX_FDCAN1_Init+0x164>)
 8001dfe:	2208      	movs	r2, #8
 8001e00:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001e02:	4b48      	ldr	r3, [pc, #288]	; (8001f24 <MX_FDCAN1_Init+0x164>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001e08:	4b46      	ldr	r3, [pc, #280]	; (8001f24 <MX_FDCAN1_Init+0x164>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001e0e:	4b45      	ldr	r3, [pc, #276]	; (8001f24 <MX_FDCAN1_Init+0x164>)
 8001e10:	2201      	movs	r2, #1
 8001e12:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001e14:	4b43      	ldr	r3, [pc, #268]	; (8001f24 <MX_FDCAN1_Init+0x164>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8001e1a:	4b42      	ldr	r3, [pc, #264]	; (8001f24 <MX_FDCAN1_Init+0x164>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8001e20:	4b40      	ldr	r3, [pc, #256]	; (8001f24 <MX_FDCAN1_Init+0x164>)
 8001e22:	2201      	movs	r2, #1
 8001e24:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001e26:	4b3f      	ldr	r3, [pc, #252]	; (8001f24 <MX_FDCAN1_Init+0x164>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8001e2c:	4b3d      	ldr	r3, [pc, #244]	; (8001f24 <MX_FDCAN1_Init+0x164>)
 8001e2e:	2201      	movs	r2, #1
 8001e30:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001e32:	4b3c      	ldr	r3, [pc, #240]	; (8001f24 <MX_FDCAN1_Init+0x164>)
 8001e34:	2204      	movs	r2, #4
 8001e36:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8001e38:	4b3a      	ldr	r3, [pc, #232]	; (8001f24 <MX_FDCAN1_Init+0x164>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001e3e:	4b39      	ldr	r3, [pc, #228]	; (8001f24 <MX_FDCAN1_Init+0x164>)
 8001e40:	2204      	movs	r2, #4
 8001e42:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8001e44:	4b37      	ldr	r3, [pc, #220]	; (8001f24 <MX_FDCAN1_Init+0x164>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001e4a:	4b36      	ldr	r3, [pc, #216]	; (8001f24 <MX_FDCAN1_Init+0x164>)
 8001e4c:	2204      	movs	r2, #4
 8001e4e:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8001e50:	4b34      	ldr	r3, [pc, #208]	; (8001f24 <MX_FDCAN1_Init+0x164>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8001e56:	4b33      	ldr	r3, [pc, #204]	; (8001f24 <MX_FDCAN1_Init+0x164>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8001e5c:	4b31      	ldr	r3, [pc, #196]	; (8001f24 <MX_FDCAN1_Init+0x164>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001e62:	4b30      	ldr	r3, [pc, #192]	; (8001f24 <MX_FDCAN1_Init+0x164>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001e68:	4b2e      	ldr	r3, [pc, #184]	; (8001f24 <MX_FDCAN1_Init+0x164>)
 8001e6a:	2204      	movs	r2, #4
 8001e6c:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001e6e:	482d      	ldr	r0, [pc, #180]	; (8001f24 <MX_FDCAN1_Init+0x164>)
 8001e70:	f001 f866 	bl	8002f40 <HAL_FDCAN_Init>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8001e7a:	f000 fb5d 	bl	8002538 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
      /* Configure Rx filter */
       sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8001e7e:	4b2b      	ldr	r3, [pc, #172]	; (8001f2c <MX_FDCAN1_Init+0x16c>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
       sFilterConfig.FilterIndex = 0;
 8001e84:	4b29      	ldr	r3, [pc, #164]	; (8001f2c <MX_FDCAN1_Init+0x16c>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	605a      	str	r2, [r3, #4]
       sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001e8a:	4b28      	ldr	r3, [pc, #160]	; (8001f2c <MX_FDCAN1_Init+0x16c>)
 8001e8c:	2202      	movs	r2, #2
 8001e8e:	609a      	str	r2, [r3, #8]
       sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001e90:	4b26      	ldr	r3, [pc, #152]	; (8001f2c <MX_FDCAN1_Init+0x16c>)
 8001e92:	2201      	movs	r2, #1
 8001e94:	60da      	str	r2, [r3, #12]
       sFilterConfig.FilterID1 = 0x000;
 8001e96:	4b25      	ldr	r3, [pc, #148]	; (8001f2c <MX_FDCAN1_Init+0x16c>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	611a      	str	r2, [r3, #16]
       sFilterConfig.FilterID2 = 0x000;
 8001e9c:	4b23      	ldr	r3, [pc, #140]	; (8001f2c <MX_FDCAN1_Init+0x16c>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	615a      	str	r2, [r3, #20]
       //sFilterConfig.FilterID1 = 0x617;
       //sFilterConfig.FilterID2 = 0x7FF;

       /* Configure global filter to reject all non-matching frames */
       HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	9300      	str	r3, [sp, #0]
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	2202      	movs	r2, #2
 8001eaa:	2102      	movs	r1, #2
 8001eac:	481d      	ldr	r0, [pc, #116]	; (8001f24 <MX_FDCAN1_Init+0x164>)
 8001eae:	f001 fa9b 	bl	80033e8 <HAL_FDCAN_ConfigGlobalFilter>

       if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8001eb2:	491e      	ldr	r1, [pc, #120]	; (8001f2c <MX_FDCAN1_Init+0x16c>)
 8001eb4:	481b      	ldr	r0, [pc, #108]	; (8001f24 <MX_FDCAN1_Init+0x164>)
 8001eb6:	f001 fa21 	bl	80032fc <HAL_FDCAN_ConfigFilter>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_FDCAN1_Init+0x104>
         {
            /* Filter configuration Error */
            Error_Handler();
 8001ec0:	f000 fb3a 	bl	8002538 <Error_Handler>
         }

        /* Start the FDCAN module */
       if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8001ec4:	4817      	ldr	r0, [pc, #92]	; (8001f24 <MX_FDCAN1_Init+0x164>)
 8001ec6:	f001 fabc 	bl	8003442 <HAL_FDCAN_Start>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00b      	beq.n	8001ee8 <MX_FDCAN1_Init+0x128>
            /* Start Error */

       if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	4813      	ldr	r0, [pc, #76]	; (8001f24 <MX_FDCAN1_Init+0x164>)
 8001ed6:	f001 fadf 	bl	8003498 <HAL_FDCAN_ActivateNotification>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <MX_FDCAN1_Init+0x128>
            /* Notification Error */

        /* Configure Tx buffer message */
       TxHeader.Identifier = 0x111;
 8001ee0:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <MX_FDCAN1_Init+0x170>)
 8001ee2:	f240 1211 	movw	r2, #273	; 0x111
 8001ee6:	601a      	str	r2, [r3, #0]
       TxHeader.IdType = FDCAN_STANDARD_ID;
 8001ee8:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <MX_FDCAN1_Init+0x170>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	605a      	str	r2, [r3, #4]
       TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001eee:	4b10      	ldr	r3, [pc, #64]	; (8001f30 <MX_FDCAN1_Init+0x170>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	609a      	str	r2, [r3, #8]
       TxHeader.DataLength = FDCAN_DLC_BYTES_12;
 8001ef4:	4b0e      	ldr	r3, [pc, #56]	; (8001f30 <MX_FDCAN1_Init+0x170>)
 8001ef6:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8001efa:	60da      	str	r2, [r3, #12]
       TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001efc:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <MX_FDCAN1_Init+0x170>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	611a      	str	r2, [r3, #16]
       TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8001f02:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <MX_FDCAN1_Init+0x170>)
 8001f04:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001f08:	615a      	str	r2, [r3, #20]
       TxHeader.FDFormat = FDCAN_FD_CAN;
 8001f0a:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <MX_FDCAN1_Init+0x170>)
 8001f0c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001f10:	619a      	str	r2, [r3, #24]
       TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001f12:	4b07      	ldr	r3, [pc, #28]	; (8001f30 <MX_FDCAN1_Init+0x170>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	61da      	str	r2, [r3, #28]
       TxHeader.MessageMarker = 0x00;
 8001f18:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <MX_FDCAN1_Init+0x170>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	621a      	str	r2, [r3, #32]
  /* USER CODE END FDCAN1_Init 2 */

}
 8001f1e:	bf00      	nop
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	240001ec 	.word	0x240001ec
 8001f28:	4000a000 	.word	0x4000a000
 8001f2c:	24000488 	.word	0x24000488
 8001f30:	240004a8 	.word	0x240004a8

08001f34 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001f38:	4b27      	ldr	r3, [pc, #156]	; (8001fd8 <MX_SPI5_Init+0xa4>)
 8001f3a:	4a28      	ldr	r2, [pc, #160]	; (8001fdc <MX_SPI5_Init+0xa8>)
 8001f3c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001f3e:	4b26      	ldr	r3, [pc, #152]	; (8001fd8 <MX_SPI5_Init+0xa4>)
 8001f40:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001f44:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001f46:	4b24      	ldr	r3, [pc, #144]	; (8001fd8 <MX_SPI5_Init+0xa4>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f4c:	4b22      	ldr	r3, [pc, #136]	; (8001fd8 <MX_SPI5_Init+0xa4>)
 8001f4e:	2207      	movs	r2, #7
 8001f50:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f52:	4b21      	ldr	r3, [pc, #132]	; (8001fd8 <MX_SPI5_Init+0xa4>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f58:	4b1f      	ldr	r3, [pc, #124]	; (8001fd8 <MX_SPI5_Init+0xa4>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001f5e:	4b1e      	ldr	r3, [pc, #120]	; (8001fd8 <MX_SPI5_Init+0xa4>)
 8001f60:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f64:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001f66:	4b1c      	ldr	r3, [pc, #112]	; (8001fd8 <MX_SPI5_Init+0xa4>)
 8001f68:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8001f6c:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f6e:	4b1a      	ldr	r3, [pc, #104]	; (8001fd8 <MX_SPI5_Init+0xa4>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f74:	4b18      	ldr	r3, [pc, #96]	; (8001fd8 <MX_SPI5_Init+0xa4>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f7a:	4b17      	ldr	r3, [pc, #92]	; (8001fd8 <MX_SPI5_Init+0xa4>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8001f80:	4b15      	ldr	r3, [pc, #84]	; (8001fd8 <MX_SPI5_Init+0xa4>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f86:	4b14      	ldr	r3, [pc, #80]	; (8001fd8 <MX_SPI5_Init+0xa4>)
 8001f88:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f8c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001f8e:	4b12      	ldr	r3, [pc, #72]	; (8001fd8 <MX_SPI5_Init+0xa4>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001f94:	4b10      	ldr	r3, [pc, #64]	; (8001fd8 <MX_SPI5_Init+0xa4>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f9a:	4b0f      	ldr	r3, [pc, #60]	; (8001fd8 <MX_SPI5_Init+0xa4>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001fa0:	4b0d      	ldr	r3, [pc, #52]	; (8001fd8 <MX_SPI5_Init+0xa4>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001fa6:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <MX_SPI5_Init+0xa4>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	649a      	str	r2, [r3, #72]	; 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001fac:	4b0a      	ldr	r3, [pc, #40]	; (8001fd8 <MX_SPI5_Init+0xa4>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001fb2:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <MX_SPI5_Init+0xa4>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001fb8:	4b07      	ldr	r3, [pc, #28]	; (8001fd8 <MX_SPI5_Init+0xa4>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001fbe:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <MX_SPI5_Init+0xa4>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001fc4:	4804      	ldr	r0, [pc, #16]	; (8001fd8 <MX_SPI5_Init+0xa4>)
 8001fc6:	f004 f9db 	bl	8006380 <HAL_SPI_Init>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <MX_SPI5_Init+0xa0>
  {
    Error_Handler();
 8001fd0:	f000 fab2 	bl	8002538 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001fd4:	bf00      	nop
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	2400028c 	.word	0x2400028c
 8001fdc:	40015000 	.word	0x40015000

08001fe0 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b088      	sub	sp, #32
 8001fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fe6:	1d3b      	adds	r3, r7, #4
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
 8001ff4:	615a      	str	r2, [r3, #20]
 8001ff6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001ff8:	4b1e      	ldr	r3, [pc, #120]	; (8002074 <MX_TIM13_Init+0x94>)
 8001ffa:	4a1f      	ldr	r2, [pc, #124]	; (8002078 <MX_TIM13_Init+0x98>)
 8001ffc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 239;
 8001ffe:	4b1d      	ldr	r3, [pc, #116]	; (8002074 <MX_TIM13_Init+0x94>)
 8002000:	22ef      	movs	r2, #239	; 0xef
 8002002:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002004:	4b1b      	ldr	r3, [pc, #108]	; (8002074 <MX_TIM13_Init+0x94>)
 8002006:	2200      	movs	r2, #0
 8002008:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 19999;
 800200a:	4b1a      	ldr	r3, [pc, #104]	; (8002074 <MX_TIM13_Init+0x94>)
 800200c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002010:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002012:	4b18      	ldr	r3, [pc, #96]	; (8002074 <MX_TIM13_Init+0x94>)
 8002014:	2200      	movs	r2, #0
 8002016:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002018:	4b16      	ldr	r3, [pc, #88]	; (8002074 <MX_TIM13_Init+0x94>)
 800201a:	2280      	movs	r2, #128	; 0x80
 800201c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800201e:	4815      	ldr	r0, [pc, #84]	; (8002074 <MX_TIM13_Init+0x94>)
 8002020:	f005 f953 	bl	80072ca <HAL_TIM_Base_Init>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800202a:	f000 fa85 	bl	8002538 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800202e:	4811      	ldr	r0, [pc, #68]	; (8002074 <MX_TIM13_Init+0x94>)
 8002030:	f005 f9a2 	bl	8007378 <HAL_TIM_PWM_Init>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800203a:	f000 fa7d 	bl	8002538 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800203e:	2360      	movs	r3, #96	; 0x60
 8002040:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8002042:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8002046:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002048:	2300      	movs	r3, #0
 800204a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002050:	1d3b      	adds	r3, r7, #4
 8002052:	2200      	movs	r2, #0
 8002054:	4619      	mov	r1, r3
 8002056:	4807      	ldr	r0, [pc, #28]	; (8002074 <MX_TIM13_Init+0x94>)
 8002058:	f005 fc1e 	bl	8007898 <HAL_TIM_PWM_ConfigChannel>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <MX_TIM13_Init+0x86>
  {
    Error_Handler();
 8002062:	f000 fa69 	bl	8002538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8002066:	4803      	ldr	r0, [pc, #12]	; (8002074 <MX_TIM13_Init+0x94>)
 8002068:	f000 fbce 	bl	8002808 <HAL_TIM_MspPostInit>

}
 800206c:	bf00      	nop
 800206e:	3720      	adds	r7, #32
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	24000314 	.word	0x24000314
 8002078:	40001c00 	.word	0x40001c00

0800207c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b088      	sub	sp, #32
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002082:	1d3b      	adds	r3, r7, #4
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	611a      	str	r2, [r3, #16]
 8002090:	615a      	str	r2, [r3, #20]
 8002092:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002094:	4b1e      	ldr	r3, [pc, #120]	; (8002110 <MX_TIM14_Init+0x94>)
 8002096:	4a1f      	ldr	r2, [pc, #124]	; (8002114 <MX_TIM14_Init+0x98>)
 8002098:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 239;
 800209a:	4b1d      	ldr	r3, [pc, #116]	; (8002110 <MX_TIM14_Init+0x94>)
 800209c:	22ef      	movs	r2, #239	; 0xef
 800209e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a0:	4b1b      	ldr	r3, [pc, #108]	; (8002110 <MX_TIM14_Init+0x94>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 19999;
 80020a6:	4b1a      	ldr	r3, [pc, #104]	; (8002110 <MX_TIM14_Init+0x94>)
 80020a8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80020ac:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ae:	4b18      	ldr	r3, [pc, #96]	; (8002110 <MX_TIM14_Init+0x94>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020b4:	4b16      	ldr	r3, [pc, #88]	; (8002110 <MX_TIM14_Init+0x94>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80020ba:	4815      	ldr	r0, [pc, #84]	; (8002110 <MX_TIM14_Init+0x94>)
 80020bc:	f005 f905 	bl	80072ca <HAL_TIM_Base_Init>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 80020c6:	f000 fa37 	bl	8002538 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80020ca:	4811      	ldr	r0, [pc, #68]	; (8002110 <MX_TIM14_Init+0x94>)
 80020cc:	f005 f954 	bl	8007378 <HAL_TIM_PWM_Init>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 80020d6:	f000 fa2f 	bl	8002538 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020da:	2360      	movs	r3, #96	; 0x60
 80020dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 80020de:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80020e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020e4:	2300      	movs	r3, #0
 80020e6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020e8:	2300      	movs	r3, #0
 80020ea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020ec:	1d3b      	adds	r3, r7, #4
 80020ee:	2200      	movs	r2, #0
 80020f0:	4619      	mov	r1, r3
 80020f2:	4807      	ldr	r0, [pc, #28]	; (8002110 <MX_TIM14_Init+0x94>)
 80020f4:	f005 fbd0 	bl	8007898 <HAL_TIM_PWM_ConfigChannel>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_TIM14_Init+0x86>
  {
    Error_Handler();
 80020fe:	f000 fa1b 	bl	8002538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8002102:	4803      	ldr	r0, [pc, #12]	; (8002110 <MX_TIM14_Init+0x94>)
 8002104:	f000 fb80 	bl	8002808 <HAL_TIM_MspPostInit>

}
 8002108:	bf00      	nop
 800210a:	3720      	adds	r7, #32
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	24000360 	.word	0x24000360
 8002114:	40002000 	.word	0x40002000

08002118 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b088      	sub	sp, #32
 800211c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800211e:	f107 0310 	add.w	r3, r7, #16
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	605a      	str	r2, [r3, #4]
 8002128:	609a      	str	r2, [r3, #8]
 800212a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800212c:	1d3b      	adds	r3, r7, #4
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	605a      	str	r2, [r3, #4]
 8002134:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002136:	4b1f      	ldr	r3, [pc, #124]	; (80021b4 <MX_TIM15_Init+0x9c>)
 8002138:	4a1f      	ldr	r2, [pc, #124]	; (80021b8 <MX_TIM15_Init+0xa0>)
 800213a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 23;
 800213c:	4b1d      	ldr	r3, [pc, #116]	; (80021b4 <MX_TIM15_Init+0x9c>)
 800213e:	2217      	movs	r2, #23
 8002140:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002142:	4b1c      	ldr	r3, [pc, #112]	; (80021b4 <MX_TIM15_Init+0x9c>)
 8002144:	2200      	movs	r2, #0
 8002146:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 9999;
 8002148:	4b1a      	ldr	r3, [pc, #104]	; (80021b4 <MX_TIM15_Init+0x9c>)
 800214a:	f242 720f 	movw	r2, #9999	; 0x270f
 800214e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002150:	4b18      	ldr	r3, [pc, #96]	; (80021b4 <MX_TIM15_Init+0x9c>)
 8002152:	2200      	movs	r2, #0
 8002154:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002156:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <MX_TIM15_Init+0x9c>)
 8002158:	2200      	movs	r2, #0
 800215a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800215c:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <MX_TIM15_Init+0x9c>)
 800215e:	2200      	movs	r2, #0
 8002160:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002162:	4814      	ldr	r0, [pc, #80]	; (80021b4 <MX_TIM15_Init+0x9c>)
 8002164:	f005 f8b1 	bl	80072ca <HAL_TIM_Base_Init>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 800216e:	f000 f9e3 	bl	8002538 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002172:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002176:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002178:	f107 0310 	add.w	r3, r7, #16
 800217c:	4619      	mov	r1, r3
 800217e:	480d      	ldr	r0, [pc, #52]	; (80021b4 <MX_TIM15_Init+0x9c>)
 8002180:	f005 fc9e 	bl	8007ac0 <HAL_TIM_ConfigClockSource>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 800218a:	f000 f9d5 	bl	8002538 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800218e:	2300      	movs	r3, #0
 8002190:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002196:	1d3b      	adds	r3, r7, #4
 8002198:	4619      	mov	r1, r3
 800219a:	4806      	ldr	r0, [pc, #24]	; (80021b4 <MX_TIM15_Init+0x9c>)
 800219c:	f006 f9ee 	bl	800857c <HAL_TIMEx_MasterConfigSynchronization>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 80021a6:	f000 f9c7 	bl	8002538 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80021aa:	bf00      	nop
 80021ac:	3720      	adds	r7, #32
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	240003ac 	.word	0x240003ac
 80021b8:	40014000 	.word	0x40014000

080021bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80021c0:	4b22      	ldr	r3, [pc, #136]	; (800224c <MX_USART3_UART_Init+0x90>)
 80021c2:	4a23      	ldr	r2, [pc, #140]	; (8002250 <MX_USART3_UART_Init+0x94>)
 80021c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80021c6:	4b21      	ldr	r3, [pc, #132]	; (800224c <MX_USART3_UART_Init+0x90>)
 80021c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80021ce:	4b1f      	ldr	r3, [pc, #124]	; (800224c <MX_USART3_UART_Init+0x90>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80021d4:	4b1d      	ldr	r3, [pc, #116]	; (800224c <MX_USART3_UART_Init+0x90>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80021da:	4b1c      	ldr	r3, [pc, #112]	; (800224c <MX_USART3_UART_Init+0x90>)
 80021dc:	2200      	movs	r2, #0
 80021de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80021e0:	4b1a      	ldr	r3, [pc, #104]	; (800224c <MX_USART3_UART_Init+0x90>)
 80021e2:	220c      	movs	r2, #12
 80021e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021e6:	4b19      	ldr	r3, [pc, #100]	; (800224c <MX_USART3_UART_Init+0x90>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80021ec:	4b17      	ldr	r3, [pc, #92]	; (800224c <MX_USART3_UART_Init+0x90>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021f2:	4b16      	ldr	r3, [pc, #88]	; (800224c <MX_USART3_UART_Init+0x90>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021f8:	4b14      	ldr	r3, [pc, #80]	; (800224c <MX_USART3_UART_Init+0x90>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021fe:	4b13      	ldr	r3, [pc, #76]	; (800224c <MX_USART3_UART_Init+0x90>)
 8002200:	2200      	movs	r2, #0
 8002202:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002204:	4811      	ldr	r0, [pc, #68]	; (800224c <MX_USART3_UART_Init+0x90>)
 8002206:	f006 fa65 	bl	80086d4 <HAL_UART_Init>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002210:	f000 f992 	bl	8002538 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002214:	2100      	movs	r1, #0
 8002216:	480d      	ldr	r0, [pc, #52]	; (800224c <MX_USART3_UART_Init+0x90>)
 8002218:	f007 fa98 	bl	800974c <HAL_UARTEx_SetTxFifoThreshold>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002222:	f000 f989 	bl	8002538 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002226:	2100      	movs	r1, #0
 8002228:	4808      	ldr	r0, [pc, #32]	; (800224c <MX_USART3_UART_Init+0x90>)
 800222a:	f007 facd 	bl	80097c8 <HAL_UARTEx_SetRxFifoThreshold>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002234:	f000 f980 	bl	8002538 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002238:	4804      	ldr	r0, [pc, #16]	; (800224c <MX_USART3_UART_Init+0x90>)
 800223a:	f007 fa4e 	bl	80096da <HAL_UARTEx_DisableFifoMode>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002244:	f000 f978 	bl	8002538 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002248:	bf00      	nop
 800224a:	bd80      	pop	{r7, pc}
 800224c:	240003f8 	.word	0x240003f8
 8002250:	40004800 	.word	0x40004800

08002254 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08c      	sub	sp, #48	; 0x30
 8002258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800225a:	f107 031c 	add.w	r3, r7, #28
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	605a      	str	r2, [r3, #4]
 8002264:	609a      	str	r2, [r3, #8]
 8002266:	60da      	str	r2, [r3, #12]
 8002268:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800226a:	4b43      	ldr	r3, [pc, #268]	; (8002378 <MX_GPIO_Init+0x124>)
 800226c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002270:	4a41      	ldr	r2, [pc, #260]	; (8002378 <MX_GPIO_Init+0x124>)
 8002272:	f043 0304 	orr.w	r3, r3, #4
 8002276:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800227a:	4b3f      	ldr	r3, [pc, #252]	; (8002378 <MX_GPIO_Init+0x124>)
 800227c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002280:	f003 0304 	and.w	r3, r3, #4
 8002284:	61bb      	str	r3, [r7, #24]
 8002286:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002288:	4b3b      	ldr	r3, [pc, #236]	; (8002378 <MX_GPIO_Init+0x124>)
 800228a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800228e:	4a3a      	ldr	r2, [pc, #232]	; (8002378 <MX_GPIO_Init+0x124>)
 8002290:	f043 0320 	orr.w	r3, r3, #32
 8002294:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002298:	4b37      	ldr	r3, [pc, #220]	; (8002378 <MX_GPIO_Init+0x124>)
 800229a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800229e:	f003 0320 	and.w	r3, r3, #32
 80022a2:	617b      	str	r3, [r7, #20]
 80022a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80022a6:	4b34      	ldr	r3, [pc, #208]	; (8002378 <MX_GPIO_Init+0x124>)
 80022a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ac:	4a32      	ldr	r2, [pc, #200]	; (8002378 <MX_GPIO_Init+0x124>)
 80022ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022b6:	4b30      	ldr	r3, [pc, #192]	; (8002378 <MX_GPIO_Init+0x124>)
 80022b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c0:	613b      	str	r3, [r7, #16]
 80022c2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c4:	4b2c      	ldr	r3, [pc, #176]	; (8002378 <MX_GPIO_Init+0x124>)
 80022c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ca:	4a2b      	ldr	r2, [pc, #172]	; (8002378 <MX_GPIO_Init+0x124>)
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022d4:	4b28      	ldr	r3, [pc, #160]	; (8002378 <MX_GPIO_Init+0x124>)
 80022d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e2:	4b25      	ldr	r3, [pc, #148]	; (8002378 <MX_GPIO_Init+0x124>)
 80022e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022e8:	4a23      	ldr	r2, [pc, #140]	; (8002378 <MX_GPIO_Init+0x124>)
 80022ea:	f043 0302 	orr.w	r3, r3, #2
 80022ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022f2:	4b21      	ldr	r3, [pc, #132]	; (8002378 <MX_GPIO_Init+0x124>)
 80022f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002300:	4b1d      	ldr	r3, [pc, #116]	; (8002378 <MX_GPIO_Init+0x124>)
 8002302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002306:	4a1c      	ldr	r2, [pc, #112]	; (8002378 <MX_GPIO_Init+0x124>)
 8002308:	f043 0308 	orr.w	r3, r3, #8
 800230c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002310:	4b19      	ldr	r3, [pc, #100]	; (8002378 <MX_GPIO_Init+0x124>)
 8002312:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002316:	f003 0308 	and.w	r3, r3, #8
 800231a:	607b      	str	r3, [r7, #4]
 800231c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD2_Pin, GPIO_PIN_RESET);
 800231e:	2200      	movs	r2, #0
 8002320:	f244 0101 	movw	r1, #16385	; 0x4001
 8002324:	4815      	ldr	r0, [pc, #84]	; (800237c <MX_GPIO_Init+0x128>)
 8002326:	f001 fc67 	bl	8003bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Nrf_CE_Pin|Nrf_CSn_Pin, GPIO_PIN_RESET);
 800232a:	2200      	movs	r2, #0
 800232c:	21c0      	movs	r1, #192	; 0xc0
 800232e:	4814      	ldr	r0, [pc, #80]	; (8002380 <MX_GPIO_Init+0x12c>)
 8002330:	f001 fc62 	bl	8003bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD2_Pin;
 8002334:	f244 0301 	movw	r3, #16385	; 0x4001
 8002338:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800233a:	2301      	movs	r3, #1
 800233c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233e:	2300      	movs	r3, #0
 8002340:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002342:	2300      	movs	r3, #0
 8002344:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002346:	f107 031c 	add.w	r3, r7, #28
 800234a:	4619      	mov	r1, r3
 800234c:	480b      	ldr	r0, [pc, #44]	; (800237c <MX_GPIO_Init+0x128>)
 800234e:	f001 faa3 	bl	8003898 <HAL_GPIO_Init>

  /*Configure GPIO pins : Nrf_CE_Pin Nrf_CSn_Pin */
  GPIO_InitStruct.Pin = Nrf_CE_Pin|Nrf_CSn_Pin;
 8002352:	23c0      	movs	r3, #192	; 0xc0
 8002354:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002356:	2301      	movs	r3, #1
 8002358:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235a:	2300      	movs	r3, #0
 800235c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235e:	2300      	movs	r3, #0
 8002360:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002362:	f107 031c 	add.w	r3, r7, #28
 8002366:	4619      	mov	r1, r3
 8002368:	4805      	ldr	r0, [pc, #20]	; (8002380 <MX_GPIO_Init+0x12c>)
 800236a:	f001 fa95 	bl	8003898 <HAL_GPIO_Init>

}
 800236e:	bf00      	nop
 8002370:	3730      	adds	r7, #48	; 0x30
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	58024400 	.word	0x58024400
 800237c:	58020400 	.word	0x58020400
 8002380:	58020800 	.word	0x58020800

08002384 <parseMessage>:

/* USER CODE BEGIN 4 */
void parseMessage(uint8_t *buffer, uint16_t *var1, uint16_t *var2, uint16_t *var3) {
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
 8002390:	603b      	str	r3, [r7, #0]
    if (buffer == NULL || var1 == NULL || var2 == NULL || var3 == NULL) {
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d032      	beq.n	80023fe <parseMessage+0x7a>
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d02f      	beq.n	80023fe <parseMessage+0x7a>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d02c      	beq.n	80023fe <parseMessage+0x7a>
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d029      	beq.n	80023fe <parseMessage+0x7a>
        return;  // Ensure valid pointers
    }

    *var1 = (buffer[0] << 8) | buffer[1];
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	021b      	lsls	r3, r3, #8
 80023b0:	b21a      	sxth	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	3301      	adds	r3, #1
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	b21b      	sxth	r3, r3
 80023ba:	4313      	orrs	r3, r2
 80023bc:	b21b      	sxth	r3, r3
 80023be:	b29a      	uxth	r2, r3
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	801a      	strh	r2, [r3, #0]
    *var2 = (buffer[2] << 8) | buffer[3];
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	3302      	adds	r3, #2
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	021b      	lsls	r3, r3, #8
 80023cc:	b21a      	sxth	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	3303      	adds	r3, #3
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	b21b      	sxth	r3, r3
 80023d6:	4313      	orrs	r3, r2
 80023d8:	b21b      	sxth	r3, r3
 80023da:	b29a      	uxth	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	801a      	strh	r2, [r3, #0]
    *var3 = (buffer[4] << 8) | buffer[5];
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	3304      	adds	r3, #4
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	021b      	lsls	r3, r3, #8
 80023e8:	b21a      	sxth	r2, r3
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	3305      	adds	r3, #5
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	b21b      	sxth	r3, r3
 80023f2:	4313      	orrs	r3, r2
 80023f4:	b21b      	sxth	r3, r3
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	801a      	strh	r2, [r3, #0]
 80023fc:	e000      	b.n	8002400 <parseMessage+0x7c>
        return;  // Ensure valid pointers
 80023fe:	bf00      	nop
}
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
	...

0800240c <Turning_SetAngle>:

void Turning_SetAngle(float angle) {
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	ed87 0a01 	vstr	s0, [r7, #4]
    // Ensure the angle is within the valid range
    if (angle < -90.0f) angle = -90.0f;
 8002416:	edd7 7a01 	vldr	s15, [r7, #4]
 800241a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80024a0 <Turning_SetAngle+0x94>
 800241e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002426:	d501      	bpl.n	800242c <Turning_SetAngle+0x20>
 8002428:	4b1e      	ldr	r3, [pc, #120]	; (80024a4 <Turning_SetAngle+0x98>)
 800242a:	607b      	str	r3, [r7, #4]
    if (angle > 90.0f) angle = 90.0f;
 800242c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002430:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80024a8 <Turning_SetAngle+0x9c>
 8002434:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800243c:	dd01      	ble.n	8002442 <Turning_SetAngle+0x36>
 800243e:	4b1b      	ldr	r3, [pc, #108]	; (80024ac <Turning_SetAngle+0xa0>)
 8002440:	607b      	str	r3, [r7, #4]

    // Map angle (-90 to 90) to pulse width (1 to 2 ms)
    float pulseWidth = 1.5f + (angle / 180.0f);
 8002442:	ed97 7a01 	vldr	s14, [r7, #4]
 8002446:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80024b0 <Turning_SetAngle+0xa4>
 800244a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800244e:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8002452:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002456:	edc7 7a05 	vstr	s15, [r7, #20]

    // Get the autoreload register value
    uint32_t autoreload_register_value = __HAL_TIM_GET_AUTORELOAD(&htim13);
 800245a:	4b16      	ldr	r3, [pc, #88]	; (80024b4 <Turning_SetAngle+0xa8>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002460:	613b      	str	r3, [r7, #16]

    // Calculate the compare register value
    uint32_t value = (uint32_t)((pulseWidth / 20.0f) * (autoreload_register_value + 1));
 8002462:	edd7 7a05 	vldr	s15, [r7, #20]
 8002466:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800246a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	3301      	adds	r3, #1
 8002472:	ee07 3a90 	vmov	s15, r3
 8002476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800247a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800247e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002482:	ee17 3a90 	vmov	r3, s15
 8002486:	60fb      	str	r3, [r7, #12]

    // Set the compare register value
    __HAL_TIM_SET_COMPARE(&htim13, TIM_CHANNEL_1, value);
 8002488:	4b0a      	ldr	r3, [pc, #40]	; (80024b4 <Turning_SetAngle+0xa8>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68fa      	ldr	r2, [r7, #12]
 800248e:	635a      	str	r2, [r3, #52]	; 0x34

    // Ensure the PWM peripheral is started
    HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 8002490:	2100      	movs	r1, #0
 8002492:	4808      	ldr	r0, [pc, #32]	; (80024b4 <Turning_SetAngle+0xa8>)
 8002494:	f004 ffd2 	bl	800743c <HAL_TIM_PWM_Start>
}
 8002498:	bf00      	nop
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	c2b40000 	.word	0xc2b40000
 80024a4:	c2b40000 	.word	0xc2b40000
 80024a8:	42b40000 	.word	0x42b40000
 80024ac:	42b40000 	.word	0x42b40000
 80024b0:	43340000 	.word	0x43340000
 80024b4:	24000314 	.word	0x24000314

080024b8 <MotorSetSpeed>:
void MotorSetSpeed(float speed) {
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	ed87 0a01 	vstr	s0, [r7, #4]
    // Ensure the speed is within the valid range [0.0, 1.0]
    if (speed < -1.0f) speed = -1.0f;
 80024c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80024c6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80024ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d2:	d501      	bpl.n	80024d8 <MotorSetSpeed+0x20>
 80024d4:	4b16      	ldr	r3, [pc, #88]	; (8002530 <MotorSetSpeed+0x78>)
 80024d6:	607b      	str	r3, [r7, #4]
    if (speed > 1.0f) speed = 1.0f;
 80024d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80024dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80024e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e8:	dd02      	ble.n	80024f0 <MotorSetSpeed+0x38>
 80024ea:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80024ee:	607b      	str	r3, [r7, #4]
    // Calculate the CCR1 value with inverted mapping for forward/backward
    TIM14->CCR1 = (uint32_t)((19999 * 0.075) - (19999 * 0.025 * speed));
 80024f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80024f4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80024f8:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8002520 <MotorSetSpeed+0x68>
 80024fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002500:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8002528 <MotorSetSpeed+0x70>
 8002504:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002508:	4b0a      	ldr	r3, [pc, #40]	; (8002534 <MotorSetSpeed+0x7c>)
 800250a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800250e:	ee17 2a90 	vmov	r2, s15
 8002512:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	9999999a 	.word	0x9999999a
 8002524:	407f3f99 	.word	0x407f3f99
 8002528:	33333333 	.word	0x33333333
 800252c:	40976fb3 	.word	0x40976fb3
 8002530:	bf800000 	.word	0xbf800000
 8002534:	40002000 	.word	0x40002000

08002538 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800253c:	b672      	cpsid	i
}
 800253e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002540:	e7fe      	b.n	8002540 <Error_Handler+0x8>
	...

08002544 <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* write a character to the USART3 and Loop until the end of transmission*/
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800254c:	1d39      	adds	r1, r7, #4
 800254e:	f04f 33ff 	mov.w	r3, #4294967295
 8002552:	2201      	movs	r2, #1
 8002554:	4803      	ldr	r0, [pc, #12]	; (8002564 <__io_putchar+0x20>)
 8002556:	f006 f90d 	bl	8008774 <HAL_UART_Transmit>
  return ch;
 800255a:	687b      	ldr	r3, [r7, #4]
}
 800255c:	4618      	mov	r0, r3
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	240003f8 	.word	0x240003f8

08002568 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800256e:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <HAL_MspInit+0x30>)
 8002570:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002574:	4a08      	ldr	r2, [pc, #32]	; (8002598 <HAL_MspInit+0x30>)
 8002576:	f043 0302 	orr.w	r3, r3, #2
 800257a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_MspInit+0x30>)
 8002580:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	607b      	str	r3, [r7, #4]
 800258a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	58024400 	.word	0x58024400

0800259c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b0b8      	sub	sp, #224	; 0xe0
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	609a      	str	r2, [r3, #8]
 80025b0:	60da      	str	r2, [r3, #12]
 80025b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025b4:	f107 0310 	add.w	r3, r7, #16
 80025b8:	22bc      	movs	r2, #188	; 0xbc
 80025ba:	2100      	movs	r1, #0
 80025bc:	4618      	mov	r0, r3
 80025be:	f007 f9c7 	bl	8009950 <memset>
  if(hfdcan->Instance==FDCAN1)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a2f      	ldr	r2, [pc, #188]	; (8002684 <HAL_FDCAN_MspInit+0xe8>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d157      	bne.n	800267c <HAL_FDCAN_MspInit+0xe0>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80025cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025d0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80025d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80025d6:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025d8:	f107 0310 	add.w	r3, r7, #16
 80025dc:	4618      	mov	r0, r3
 80025de:	f002 fb67 	bl	8004cb0 <HAL_RCCEx_PeriphCLKConfig>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80025e8:	f7ff ffa6 	bl	8002538 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80025ec:	4b26      	ldr	r3, [pc, #152]	; (8002688 <HAL_FDCAN_MspInit+0xec>)
 80025ee:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80025f2:	4a25      	ldr	r2, [pc, #148]	; (8002688 <HAL_FDCAN_MspInit+0xec>)
 80025f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f8:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80025fc:	4b22      	ldr	r3, [pc, #136]	; (8002688 <HAL_FDCAN_MspInit+0xec>)
 80025fe:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002606:	60fb      	str	r3, [r7, #12]
 8002608:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800260a:	4b1f      	ldr	r3, [pc, #124]	; (8002688 <HAL_FDCAN_MspInit+0xec>)
 800260c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002610:	4a1d      	ldr	r2, [pc, #116]	; (8002688 <HAL_FDCAN_MspInit+0xec>)
 8002612:	f043 0308 	orr.w	r3, r3, #8
 8002616:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800261a:	4b1b      	ldr	r3, [pc, #108]	; (8002688 <HAL_FDCAN_MspInit+0xec>)
 800261c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002620:	f003 0308 	and.w	r3, r3, #8
 8002624:	60bb      	str	r3, [r7, #8]
 8002626:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002628:	2301      	movs	r3, #1
 800262a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262e:	2302      	movs	r3, #2
 8002630:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002634:	2300      	movs	r3, #0
 8002636:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800263a:	2303      	movs	r3, #3
 800263c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002640:	2309      	movs	r3, #9
 8002642:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002646:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800264a:	4619      	mov	r1, r3
 800264c:	480f      	ldr	r0, [pc, #60]	; (800268c <HAL_FDCAN_MspInit+0xf0>)
 800264e:	f001 f923 	bl	8003898 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002652:	2302      	movs	r3, #2
 8002654:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002658:	2302      	movs	r3, #2
 800265a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800265e:	2301      	movs	r3, #1
 8002660:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002664:	2303      	movs	r3, #3
 8002666:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800266a:	2309      	movs	r3, #9
 800266c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002670:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002674:	4619      	mov	r1, r3
 8002676:	4805      	ldr	r0, [pc, #20]	; (800268c <HAL_FDCAN_MspInit+0xf0>)
 8002678:	f001 f90e 	bl	8003898 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800267c:	bf00      	nop
 800267e:	37e0      	adds	r7, #224	; 0xe0
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	4000a000 	.word	0x4000a000
 8002688:	58024400 	.word	0x58024400
 800268c:	58020c00 	.word	0x58020c00

08002690 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b0b8      	sub	sp, #224	; 0xe0
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002698:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	605a      	str	r2, [r3, #4]
 80026a2:	609a      	str	r2, [r3, #8]
 80026a4:	60da      	str	r2, [r3, #12]
 80026a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026a8:	f107 0310 	add.w	r3, r7, #16
 80026ac:	22bc      	movs	r2, #188	; 0xbc
 80026ae:	2100      	movs	r1, #0
 80026b0:	4618      	mov	r0, r3
 80026b2:	f007 f94d 	bl	8009950 <memset>
  if(hspi->Instance==SPI5)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a25      	ldr	r2, [pc, #148]	; (8002750 <HAL_SPI_MspInit+0xc0>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d143      	bne.n	8002748 <HAL_SPI_MspInit+0xb8>

  /* USER CODE END SPI5_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 80026c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026c4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_HSI;
 80026c6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80026ca:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80026cc:	f107 0310 	add.w	r3, r7, #16
 80026d0:	4618      	mov	r0, r3
 80026d2:	f002 faed 	bl	8004cb0 <HAL_RCCEx_PeriphCLKConfig>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 80026dc:	f7ff ff2c 	bl	8002538 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80026e0:	4b1c      	ldr	r3, [pc, #112]	; (8002754 <HAL_SPI_MspInit+0xc4>)
 80026e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026e6:	4a1b      	ldr	r2, [pc, #108]	; (8002754 <HAL_SPI_MspInit+0xc4>)
 80026e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80026f0:	4b18      	ldr	r3, [pc, #96]	; (8002754 <HAL_SPI_MspInit+0xc4>)
 80026f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80026f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80026fe:	4b15      	ldr	r3, [pc, #84]	; (8002754 <HAL_SPI_MspInit+0xc4>)
 8002700:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002704:	4a13      	ldr	r2, [pc, #76]	; (8002754 <HAL_SPI_MspInit+0xc4>)
 8002706:	f043 0320 	orr.w	r3, r3, #32
 800270a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800270e:	4b11      	ldr	r3, [pc, #68]	; (8002754 <HAL_SPI_MspInit+0xc4>)
 8002710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002714:	f003 0320 	and.w	r3, r3, #32
 8002718:	60bb      	str	r3, [r7, #8]
 800271a:	68bb      	ldr	r3, [r7, #8]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800271c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8002720:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002724:	2302      	movs	r3, #2
 8002726:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272a:	2300      	movs	r3, #0
 800272c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002730:	2300      	movs	r3, #0
 8002732:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002736:	2305      	movs	r3, #5
 8002738:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800273c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002740:	4619      	mov	r1, r3
 8002742:	4805      	ldr	r0, [pc, #20]	; (8002758 <HAL_SPI_MspInit+0xc8>)
 8002744:	f001 f8a8 	bl	8003898 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8002748:	bf00      	nop
 800274a:	37e0      	adds	r7, #224	; 0xe0
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40015000 	.word	0x40015000
 8002754:	58024400 	.word	0x58024400
 8002758:	58021400 	.word	0x58021400

0800275c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a23      	ldr	r2, [pc, #140]	; (80027f8 <HAL_TIM_Base_MspInit+0x9c>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d10f      	bne.n	800278e <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 800276e:	4b23      	ldr	r3, [pc, #140]	; (80027fc <HAL_TIM_Base_MspInit+0xa0>)
 8002770:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002774:	4a21      	ldr	r2, [pc, #132]	; (80027fc <HAL_TIM_Base_MspInit+0xa0>)
 8002776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800277a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800277e:	4b1f      	ldr	r3, [pc, #124]	; (80027fc <HAL_TIM_Base_MspInit+0xa0>)
 8002780:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002788:	617b      	str	r3, [r7, #20]
 800278a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800278c:	e030      	b.n	80027f0 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM14)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a1b      	ldr	r2, [pc, #108]	; (8002800 <HAL_TIM_Base_MspInit+0xa4>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d10f      	bne.n	80027b8 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002798:	4b18      	ldr	r3, [pc, #96]	; (80027fc <HAL_TIM_Base_MspInit+0xa0>)
 800279a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800279e:	4a17      	ldr	r2, [pc, #92]	; (80027fc <HAL_TIM_Base_MspInit+0xa0>)
 80027a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80027a8:	4b14      	ldr	r3, [pc, #80]	; (80027fc <HAL_TIM_Base_MspInit+0xa0>)
 80027aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80027ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b2:	613b      	str	r3, [r7, #16]
 80027b4:	693b      	ldr	r3, [r7, #16]
}
 80027b6:	e01b      	b.n	80027f0 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM15)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a11      	ldr	r2, [pc, #68]	; (8002804 <HAL_TIM_Base_MspInit+0xa8>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d116      	bne.n	80027f0 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80027c2:	4b0e      	ldr	r3, [pc, #56]	; (80027fc <HAL_TIM_Base_MspInit+0xa0>)
 80027c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027c8:	4a0c      	ldr	r2, [pc, #48]	; (80027fc <HAL_TIM_Base_MspInit+0xa0>)
 80027ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80027d2:	4b0a      	ldr	r3, [pc, #40]	; (80027fc <HAL_TIM_Base_MspInit+0xa0>)
 80027d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 80027e0:	2200      	movs	r2, #0
 80027e2:	2100      	movs	r1, #0
 80027e4:	2074      	movs	r0, #116	; 0x74
 80027e6:	f000 fb76 	bl	8002ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 80027ea:	2074      	movs	r0, #116	; 0x74
 80027ec:	f000 fb8d 	bl	8002f0a <HAL_NVIC_EnableIRQ>
}
 80027f0:	bf00      	nop
 80027f2:	3718      	adds	r7, #24
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40001c00 	.word	0x40001c00
 80027fc:	58024400 	.word	0x58024400
 8002800:	40002000 	.word	0x40002000
 8002804:	40014000 	.word	0x40014000

08002808 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08a      	sub	sp, #40	; 0x28
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002810:	f107 0314 	add.w	r3, r7, #20
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	60da      	str	r2, [r3, #12]
 800281e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM13)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a25      	ldr	r2, [pc, #148]	; (80028bc <HAL_TIM_MspPostInit+0xb4>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d11f      	bne.n	800286a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800282a:	4b25      	ldr	r3, [pc, #148]	; (80028c0 <HAL_TIM_MspPostInit+0xb8>)
 800282c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002830:	4a23      	ldr	r2, [pc, #140]	; (80028c0 <HAL_TIM_MspPostInit+0xb8>)
 8002832:	f043 0301 	orr.w	r3, r3, #1
 8002836:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800283a:	4b21      	ldr	r3, [pc, #132]	; (80028c0 <HAL_TIM_MspPostInit+0xb8>)
 800283c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	613b      	str	r3, [r7, #16]
 8002846:	693b      	ldr	r3, [r7, #16]
    /**TIM13 GPIO Configuration
    PA6     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002848:	2340      	movs	r3, #64	; 0x40
 800284a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284c:	2302      	movs	r3, #2
 800284e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002850:	2300      	movs	r3, #0
 8002852:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002854:	2300      	movs	r3, #0
 8002856:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002858:	2309      	movs	r3, #9
 800285a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800285c:	f107 0314 	add.w	r3, r7, #20
 8002860:	4619      	mov	r1, r3
 8002862:	4818      	ldr	r0, [pc, #96]	; (80028c4 <HAL_TIM_MspPostInit+0xbc>)
 8002864:	f001 f818 	bl	8003898 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8002868:	e023      	b.n	80028b2 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM14)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a16      	ldr	r2, [pc, #88]	; (80028c8 <HAL_TIM_MspPostInit+0xc0>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d11e      	bne.n	80028b2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002874:	4b12      	ldr	r3, [pc, #72]	; (80028c0 <HAL_TIM_MspPostInit+0xb8>)
 8002876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800287a:	4a11      	ldr	r2, [pc, #68]	; (80028c0 <HAL_TIM_MspPostInit+0xb8>)
 800287c:	f043 0301 	orr.w	r3, r3, #1
 8002880:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002884:	4b0e      	ldr	r3, [pc, #56]	; (80028c0 <HAL_TIM_MspPostInit+0xb8>)
 8002886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002892:	2380      	movs	r3, #128	; 0x80
 8002894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002896:	2302      	movs	r3, #2
 8002898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289a:	2300      	movs	r3, #0
 800289c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289e:	2300      	movs	r3, #0
 80028a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 80028a2:	2309      	movs	r3, #9
 80028a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a6:	f107 0314 	add.w	r3, r7, #20
 80028aa:	4619      	mov	r1, r3
 80028ac:	4805      	ldr	r0, [pc, #20]	; (80028c4 <HAL_TIM_MspPostInit+0xbc>)
 80028ae:	f000 fff3 	bl	8003898 <HAL_GPIO_Init>
}
 80028b2:	bf00      	nop
 80028b4:	3728      	adds	r7, #40	; 0x28
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40001c00 	.word	0x40001c00
 80028c0:	58024400 	.word	0x58024400
 80028c4:	58020000 	.word	0x58020000
 80028c8:	40002000 	.word	0x40002000

080028cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b0b8      	sub	sp, #224	; 0xe0
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	605a      	str	r2, [r3, #4]
 80028de:	609a      	str	r2, [r3, #8]
 80028e0:	60da      	str	r2, [r3, #12]
 80028e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028e4:	f107 0310 	add.w	r3, r7, #16
 80028e8:	22bc      	movs	r2, #188	; 0xbc
 80028ea:	2100      	movs	r1, #0
 80028ec:	4618      	mov	r0, r3
 80028ee:	f007 f82f 	bl	8009950 <memset>
  if(huart->Instance==USART3)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a25      	ldr	r2, [pc, #148]	; (800298c <HAL_UART_MspInit+0xc0>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d142      	bne.n	8002982 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80028fc:	2302      	movs	r3, #2
 80028fe:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002900:	2300      	movs	r3, #0
 8002902:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002906:	f107 0310 	add.w	r3, r7, #16
 800290a:	4618      	mov	r0, r3
 800290c:	f002 f9d0 	bl	8004cb0 <HAL_RCCEx_PeriphCLKConfig>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002916:	f7ff fe0f 	bl	8002538 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800291a:	4b1d      	ldr	r3, [pc, #116]	; (8002990 <HAL_UART_MspInit+0xc4>)
 800291c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002920:	4a1b      	ldr	r2, [pc, #108]	; (8002990 <HAL_UART_MspInit+0xc4>)
 8002922:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002926:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800292a:	4b19      	ldr	r3, [pc, #100]	; (8002990 <HAL_UART_MspInit+0xc4>)
 800292c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002930:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002938:	4b15      	ldr	r3, [pc, #84]	; (8002990 <HAL_UART_MspInit+0xc4>)
 800293a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800293e:	4a14      	ldr	r2, [pc, #80]	; (8002990 <HAL_UART_MspInit+0xc4>)
 8002940:	f043 0308 	orr.w	r3, r3, #8
 8002944:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002948:	4b11      	ldr	r3, [pc, #68]	; (8002990 <HAL_UART_MspInit+0xc4>)
 800294a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	60bb      	str	r3, [r7, #8]
 8002954:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8002956:	f44f 7340 	mov.w	r3, #768	; 0x300
 800295a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295e:	2302      	movs	r3, #2
 8002960:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002964:	2300      	movs	r3, #0
 8002966:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800296a:	2300      	movs	r3, #0
 800296c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002970:	2307      	movs	r3, #7
 8002972:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002976:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800297a:	4619      	mov	r1, r3
 800297c:	4805      	ldr	r0, [pc, #20]	; (8002994 <HAL_UART_MspInit+0xc8>)
 800297e:	f000 ff8b 	bl	8003898 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002982:	bf00      	nop
 8002984:	37e0      	adds	r7, #224	; 0xe0
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40004800 	.word	0x40004800
 8002990:	58024400 	.word	0x58024400
 8002994:	58020c00 	.word	0x58020c00

08002998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800299c:	e7fe      	b.n	800299c <NMI_Handler+0x4>

0800299e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800299e:	b480      	push	{r7}
 80029a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029a2:	e7fe      	b.n	80029a2 <HardFault_Handler+0x4>

080029a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029a8:	e7fe      	b.n	80029a8 <MemManage_Handler+0x4>

080029aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029aa:	b480      	push	{r7}
 80029ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029ae:	e7fe      	b.n	80029ae <BusFault_Handler+0x4>

080029b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029b4:	e7fe      	b.n	80029b4 <UsageFault_Handler+0x4>

080029b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029b6:	b480      	push	{r7}
 80029b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029ba:	bf00      	nop
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029c8:	bf00      	nop
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029d2:	b480      	push	{r7}
 80029d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029d6:	bf00      	nop
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029e4:	f000 f94c 	bl	8002c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029e8:	bf00      	nop
 80029ea:	bd80      	pop	{r7, pc}

080029ec <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80029f0:	4802      	ldr	r0, [pc, #8]	; (80029fc <TIM15_IRQHandler+0x10>)
 80029f2:	f004 fe31 	bl	8007658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 80029f6:	bf00      	nop
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	240003ac 	.word	0x240003ac

08002a00 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	617b      	str	r3, [r7, #20]
 8002a10:	e00a      	b.n	8002a28 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a12:	f3af 8000 	nop.w
 8002a16:	4601      	mov	r1, r0
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	1c5a      	adds	r2, r3, #1
 8002a1c:	60ba      	str	r2, [r7, #8]
 8002a1e:	b2ca      	uxtb	r2, r1
 8002a20:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	3301      	adds	r3, #1
 8002a26:	617b      	str	r3, [r7, #20]
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	dbf0      	blt.n	8002a12 <_read+0x12>
	}

return len;
 8002a30:	687b      	ldr	r3, [r7, #4]
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3718      	adds	r7, #24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b086      	sub	sp, #24
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	60f8      	str	r0, [r7, #12]
 8002a42:	60b9      	str	r1, [r7, #8]
 8002a44:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a46:	2300      	movs	r3, #0
 8002a48:	617b      	str	r3, [r7, #20]
 8002a4a:	e009      	b.n	8002a60 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	1c5a      	adds	r2, r3, #1
 8002a50:	60ba      	str	r2, [r7, #8]
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff fd75 	bl	8002544 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	617b      	str	r3, [r7, #20]
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	dbf1      	blt.n	8002a4c <_write+0x12>
	}
	return len;
 8002a68:	687b      	ldr	r3, [r7, #4]
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3718      	adds	r7, #24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <_close>:

int _close(int file)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
	return -1;
 8002a7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	b083      	sub	sp, #12
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
 8002a92:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a9a:	605a      	str	r2, [r3, #4]
	return 0;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr

08002aaa <_isatty>:

int _isatty(int file)
{
 8002aaa:	b480      	push	{r7}
 8002aac:	b083      	sub	sp, #12
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
	return 1;
 8002ab2:	2301      	movs	r3, #1
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
	return 0;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
	...

08002adc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b086      	sub	sp, #24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ae4:	4a14      	ldr	r2, [pc, #80]	; (8002b38 <_sbrk+0x5c>)
 8002ae6:	4b15      	ldr	r3, [pc, #84]	; (8002b3c <_sbrk+0x60>)
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002af0:	4b13      	ldr	r3, [pc, #76]	; (8002b40 <_sbrk+0x64>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d102      	bne.n	8002afe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002af8:	4b11      	ldr	r3, [pc, #68]	; (8002b40 <_sbrk+0x64>)
 8002afa:	4a12      	ldr	r2, [pc, #72]	; (8002b44 <_sbrk+0x68>)
 8002afc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002afe:	4b10      	ldr	r3, [pc, #64]	; (8002b40 <_sbrk+0x64>)
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4413      	add	r3, r2
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d207      	bcs.n	8002b1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b0c:	f006 fee8 	bl	80098e0 <__errno>
 8002b10:	4603      	mov	r3, r0
 8002b12:	220c      	movs	r2, #12
 8002b14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b16:	f04f 33ff 	mov.w	r3, #4294967295
 8002b1a:	e009      	b.n	8002b30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b1c:	4b08      	ldr	r3, [pc, #32]	; (8002b40 <_sbrk+0x64>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b22:	4b07      	ldr	r3, [pc, #28]	; (8002b40 <_sbrk+0x64>)
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4413      	add	r3, r2
 8002b2a:	4a05      	ldr	r2, [pc, #20]	; (8002b40 <_sbrk+0x64>)
 8002b2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3718      	adds	r7, #24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	24080000 	.word	0x24080000
 8002b3c:	00000400 	.word	0x00000400
 8002b40:	240004d8 	.word	0x240004d8
 8002b44:	240004f0 	.word	0x240004f0

08002b48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002b48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b80 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b4c:	f7fd fda2 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b50:	480c      	ldr	r0, [pc, #48]	; (8002b84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b52:	490d      	ldr	r1, [pc, #52]	; (8002b88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b54:	4a0d      	ldr	r2, [pc, #52]	; (8002b8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b58:	e002      	b.n	8002b60 <LoopCopyDataInit>

08002b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b5e:	3304      	adds	r3, #4

08002b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b64:	d3f9      	bcc.n	8002b5a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b66:	4a0a      	ldr	r2, [pc, #40]	; (8002b90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b68:	4c0a      	ldr	r4, [pc, #40]	; (8002b94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b6c:	e001      	b.n	8002b72 <LoopFillZerobss>

08002b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b70:	3204      	adds	r2, #4

08002b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b74:	d3fb      	bcc.n	8002b6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b76:	f006 feb9 	bl	80098ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b7a:	f7fe ff43 	bl	8001a04 <main>
  bx  lr
 8002b7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b80:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002b84:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002b88:	2400009c 	.word	0x2400009c
  ldr r2, =_sidata
 8002b8c:	0800b540 	.word	0x0800b540
  ldr r2, =_sbss
 8002b90:	240000a0 	.word	0x240000a0
  ldr r4, =_ebss
 8002b94:	240004f0 	.word	0x240004f0

08002b98 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b98:	e7fe      	b.n	8002b98 <ADC3_IRQHandler>
	...

08002b9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ba2:	2003      	movs	r0, #3
 8002ba4:	f000 f98c 	bl	8002ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002ba8:	f001 feac 	bl	8004904 <HAL_RCC_GetSysClockFreq>
 8002bac:	4602      	mov	r2, r0
 8002bae:	4b15      	ldr	r3, [pc, #84]	; (8002c04 <HAL_Init+0x68>)
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	0a1b      	lsrs	r3, r3, #8
 8002bb4:	f003 030f 	and.w	r3, r3, #15
 8002bb8:	4913      	ldr	r1, [pc, #76]	; (8002c08 <HAL_Init+0x6c>)
 8002bba:	5ccb      	ldrb	r3, [r1, r3]
 8002bbc:	f003 031f 	and.w	r3, r3, #31
 8002bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8002bc4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002bc6:	4b0f      	ldr	r3, [pc, #60]	; (8002c04 <HAL_Init+0x68>)
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	4a0e      	ldr	r2, [pc, #56]	; (8002c08 <HAL_Init+0x6c>)
 8002bd0:	5cd3      	ldrb	r3, [r2, r3]
 8002bd2:	f003 031f 	and.w	r3, r3, #31
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8002bdc:	4a0b      	ldr	r2, [pc, #44]	; (8002c0c <HAL_Init+0x70>)
 8002bde:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002be0:	4a0b      	ldr	r2, [pc, #44]	; (8002c10 <HAL_Init+0x74>)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002be6:	200f      	movs	r0, #15
 8002be8:	f000 f814 	bl	8002c14 <HAL_InitTick>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e002      	b.n	8002bfc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002bf6:	f7ff fcb7 	bl	8002568 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	58024400 	.word	0x58024400
 8002c08:	0800b450 	.word	0x0800b450
 8002c0c:	24000004 	.word	0x24000004
 8002c10:	24000000 	.word	0x24000000

08002c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002c1c:	4b15      	ldr	r3, [pc, #84]	; (8002c74 <HAL_InitTick+0x60>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e021      	b.n	8002c6c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002c28:	4b13      	ldr	r3, [pc, #76]	; (8002c78 <HAL_InitTick+0x64>)
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	4b11      	ldr	r3, [pc, #68]	; (8002c74 <HAL_InitTick+0x60>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	4619      	mov	r1, r3
 8002c32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c36:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 f971 	bl	8002f26 <HAL_SYSTICK_Config>
 8002c44:	4603      	mov	r3, r0
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e00e      	b.n	8002c6c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b0f      	cmp	r3, #15
 8002c52:	d80a      	bhi.n	8002c6a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c54:	2200      	movs	r2, #0
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	f04f 30ff 	mov.w	r0, #4294967295
 8002c5c:	f000 f93b 	bl	8002ed6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c60:	4a06      	ldr	r2, [pc, #24]	; (8002c7c <HAL_InitTick+0x68>)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
 8002c68:	e000      	b.n	8002c6c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3708      	adds	r7, #8
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	24000034 	.word	0x24000034
 8002c78:	24000000 	.word	0x24000000
 8002c7c:	24000030 	.word	0x24000030

08002c80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c80:	b480      	push	{r7}
 8002c82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c84:	4b06      	ldr	r3, [pc, #24]	; (8002ca0 <HAL_IncTick+0x20>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	461a      	mov	r2, r3
 8002c8a:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <HAL_IncTick+0x24>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4413      	add	r3, r2
 8002c90:	4a04      	ldr	r2, [pc, #16]	; (8002ca4 <HAL_IncTick+0x24>)
 8002c92:	6013      	str	r3, [r2, #0]
}
 8002c94:	bf00      	nop
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	24000034 	.word	0x24000034
 8002ca4:	240004dc 	.word	0x240004dc

08002ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  return uwTick;
 8002cac:	4b03      	ldr	r3, [pc, #12]	; (8002cbc <HAL_GetTick+0x14>)
 8002cae:	681b      	ldr	r3, [r3, #0]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	240004dc 	.word	0x240004dc

08002cc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cc8:	f7ff ffee 	bl	8002ca8 <HAL_GetTick>
 8002ccc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd8:	d005      	beq.n	8002ce6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cda:	4b0a      	ldr	r3, [pc, #40]	; (8002d04 <HAL_Delay+0x44>)
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ce6:	bf00      	nop
 8002ce8:	f7ff ffde 	bl	8002ca8 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d8f7      	bhi.n	8002ce8 <HAL_Delay+0x28>
  {
  }
}
 8002cf8:	bf00      	nop
 8002cfa:	bf00      	nop
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	24000034 	.word	0x24000034

08002d08 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002d0c:	4b03      	ldr	r3, [pc, #12]	; (8002d1c <HAL_GetREVID+0x14>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	0c1b      	lsrs	r3, r3, #16
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	5c001000 	.word	0x5c001000

08002d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f003 0307 	and.w	r3, r3, #7
 8002d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d30:	4b0b      	ldr	r3, [pc, #44]	; (8002d60 <__NVIC_SetPriorityGrouping+0x40>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d48:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <__NVIC_SetPriorityGrouping+0x44>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d4e:	4a04      	ldr	r2, [pc, #16]	; (8002d60 <__NVIC_SetPriorityGrouping+0x40>)
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	60d3      	str	r3, [r2, #12]
}
 8002d54:	bf00      	nop
 8002d56:	3714      	adds	r7, #20
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	e000ed00 	.word	0xe000ed00
 8002d64:	05fa0000 	.word	0x05fa0000

08002d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d6c:	4b04      	ldr	r3, [pc, #16]	; (8002d80 <__NVIC_GetPriorityGrouping+0x18>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	0a1b      	lsrs	r3, r3, #8
 8002d72:	f003 0307 	and.w	r3, r3, #7
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	e000ed00 	.word	0xe000ed00

08002d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b083      	sub	sp, #12
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	db0b      	blt.n	8002dae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d96:	88fb      	ldrh	r3, [r7, #6]
 8002d98:	f003 021f 	and.w	r2, r3, #31
 8002d9c:	4907      	ldr	r1, [pc, #28]	; (8002dbc <__NVIC_EnableIRQ+0x38>)
 8002d9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002da2:	095b      	lsrs	r3, r3, #5
 8002da4:	2001      	movs	r0, #1
 8002da6:	fa00 f202 	lsl.w	r2, r0, r2
 8002daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	e000e100 	.word	0xe000e100

08002dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	6039      	str	r1, [r7, #0]
 8002dca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002dcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	db0a      	blt.n	8002dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	490c      	ldr	r1, [pc, #48]	; (8002e0c <__NVIC_SetPriority+0x4c>)
 8002dda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dde:	0112      	lsls	r2, r2, #4
 8002de0:	b2d2      	uxtb	r2, r2
 8002de2:	440b      	add	r3, r1
 8002de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002de8:	e00a      	b.n	8002e00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	4908      	ldr	r1, [pc, #32]	; (8002e10 <__NVIC_SetPriority+0x50>)
 8002df0:	88fb      	ldrh	r3, [r7, #6]
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	3b04      	subs	r3, #4
 8002df8:	0112      	lsls	r2, r2, #4
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	761a      	strb	r2, [r3, #24]
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr
 8002e0c:	e000e100 	.word	0xe000e100
 8002e10:	e000ed00 	.word	0xe000ed00

08002e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b089      	sub	sp, #36	; 0x24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	60b9      	str	r1, [r7, #8]
 8002e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	f1c3 0307 	rsb	r3, r3, #7
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	bf28      	it	cs
 8002e32:	2304      	movcs	r3, #4
 8002e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	3304      	adds	r3, #4
 8002e3a:	2b06      	cmp	r3, #6
 8002e3c:	d902      	bls.n	8002e44 <NVIC_EncodePriority+0x30>
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	3b03      	subs	r3, #3
 8002e42:	e000      	b.n	8002e46 <NVIC_EncodePriority+0x32>
 8002e44:	2300      	movs	r3, #0
 8002e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e48:	f04f 32ff 	mov.w	r2, #4294967295
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	43da      	mvns	r2, r3
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	401a      	ands	r2, r3
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	fa01 f303 	lsl.w	r3, r1, r3
 8002e66:	43d9      	mvns	r1, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e6c:	4313      	orrs	r3, r2
         );
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3724      	adds	r7, #36	; 0x24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
	...

08002e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3b01      	subs	r3, #1
 8002e88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e8c:	d301      	bcc.n	8002e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e00f      	b.n	8002eb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e92:	4a0a      	ldr	r2, [pc, #40]	; (8002ebc <SysTick_Config+0x40>)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e9a:	210f      	movs	r1, #15
 8002e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002ea0:	f7ff ff8e 	bl	8002dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ea4:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <SysTick_Config+0x40>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eaa:	4b04      	ldr	r3, [pc, #16]	; (8002ebc <SysTick_Config+0x40>)
 8002eac:	2207      	movs	r2, #7
 8002eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	e000e010 	.word	0xe000e010

08002ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f7ff ff29 	bl	8002d20 <__NVIC_SetPriorityGrouping>
}
 8002ece:	bf00      	nop
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b086      	sub	sp, #24
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	4603      	mov	r3, r0
 8002ede:	60b9      	str	r1, [r7, #8]
 8002ee0:	607a      	str	r2, [r7, #4]
 8002ee2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ee4:	f7ff ff40 	bl	8002d68 <__NVIC_GetPriorityGrouping>
 8002ee8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	68b9      	ldr	r1, [r7, #8]
 8002eee:	6978      	ldr	r0, [r7, #20]
 8002ef0:	f7ff ff90 	bl	8002e14 <NVIC_EncodePriority>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002efa:	4611      	mov	r1, r2
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff ff5f 	bl	8002dc0 <__NVIC_SetPriority>
}
 8002f02:	bf00      	nop
 8002f04:	3718      	adds	r7, #24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b082      	sub	sp, #8
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	4603      	mov	r3, r0
 8002f12:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff ff33 	bl	8002d84 <__NVIC_EnableIRQ>
}
 8002f1e:	bf00      	nop
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b082      	sub	sp, #8
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f7ff ffa4 	bl	8002e7c <SysTick_Config>
 8002f34:	4603      	mov	r3, r0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b098      	sub	sp, #96	; 0x60
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8002f48:	4a84      	ldr	r2, [pc, #528]	; (800315c <HAL_FDCAN_Init+0x21c>)
 8002f4a:	f107 030c 	add.w	r3, r7, #12
 8002f4e:	4611      	mov	r1, r2
 8002f50:	224c      	movs	r2, #76	; 0x4c
 8002f52:	4618      	mov	r0, r3
 8002f54:	f006 fcee 	bl	8009934 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e1c6      	b.n	80032f0 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a7e      	ldr	r2, [pc, #504]	; (8003160 <HAL_FDCAN_Init+0x220>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d106      	bne.n	8002f7a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002f74:	461a      	mov	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d106      	bne.n	8002f94 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7ff fb04 	bl	800259c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	699a      	ldr	r2, [r3, #24]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0210 	bic.w	r2, r2, #16
 8002fa2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fa4:	f7ff fe80 	bl	8002ca8 <HAL_GetTick>
 8002fa8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002faa:	e014      	b.n	8002fd6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002fac:	f7ff fe7c 	bl	8002ca8 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b0a      	cmp	r3, #10
 8002fb8:	d90d      	bls.n	8002fd6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002fc0:	f043 0201 	orr.w	r2, r3, #1
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2203      	movs	r2, #3
 8002fce:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e18c      	b.n	80032f0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	f003 0308 	and.w	r3, r3, #8
 8002fe0:	2b08      	cmp	r3, #8
 8002fe2:	d0e3      	beq.n	8002fac <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699a      	ldr	r2, [r3, #24]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f042 0201 	orr.w	r2, r2, #1
 8002ff2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ff4:	f7ff fe58 	bl	8002ca8 <HAL_GetTick>
 8002ff8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002ffa:	e014      	b.n	8003026 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002ffc:	f7ff fe54 	bl	8002ca8 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b0a      	cmp	r3, #10
 8003008:	d90d      	bls.n	8003026 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003010:	f043 0201 	orr.w	r2, r3, #1
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2203      	movs	r2, #3
 800301e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e164      	b.n	80032f0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0e3      	beq.n	8002ffc <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	699a      	ldr	r2, [r3, #24]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0202 	orr.w	r2, r2, #2
 8003042:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	7c1b      	ldrb	r3, [r3, #16]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d108      	bne.n	800305e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	699a      	ldr	r2, [r3, #24]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800305a:	619a      	str	r2, [r3, #24]
 800305c:	e007      	b.n	800306e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	699a      	ldr	r2, [r3, #24]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800306c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	7c5b      	ldrb	r3, [r3, #17]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d108      	bne.n	8003088 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	699a      	ldr	r2, [r3, #24]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003084:	619a      	str	r2, [r3, #24]
 8003086:	e007      	b.n	8003098 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	699a      	ldr	r2, [r3, #24]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003096:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	7c9b      	ldrb	r3, [r3, #18]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d108      	bne.n	80030b2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	699a      	ldr	r2, [r3, #24]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030ae:	619a      	str	r2, [r3, #24]
 80030b0:	e007      	b.n	80030c2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	699a      	ldr	r2, [r3, #24]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030c0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	699a      	ldr	r2, [r3, #24]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80030e6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	691a      	ldr	r2, [r3, #16]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0210 	bic.w	r2, r2, #16
 80030f6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d108      	bne.n	8003112 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	699a      	ldr	r2, [r3, #24]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f042 0204 	orr.w	r2, r2, #4
 800310e:	619a      	str	r2, [r3, #24]
 8003110:	e030      	b.n	8003174 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d02c      	beq.n	8003174 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	2b02      	cmp	r3, #2
 8003120:	d020      	beq.n	8003164 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	699a      	ldr	r2, [r3, #24]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003130:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	691a      	ldr	r2, [r3, #16]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f042 0210 	orr.w	r2, r2, #16
 8003140:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	2b03      	cmp	r3, #3
 8003148:	d114      	bne.n	8003174 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	699a      	ldr	r2, [r3, #24]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f042 0220 	orr.w	r2, r2, #32
 8003158:	619a      	str	r2, [r3, #24]
 800315a:	e00b      	b.n	8003174 <HAL_FDCAN_Init+0x234>
 800315c:	0800b404 	.word	0x0800b404
 8003160:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	699a      	ldr	r2, [r3, #24]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f042 0220 	orr.w	r2, r2, #32
 8003172:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	3b01      	subs	r3, #1
 800317a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	3b01      	subs	r3, #1
 8003182:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003184:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800318c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	3b01      	subs	r3, #1
 8003196:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800319c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800319e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031a8:	d115      	bne.n	80031d6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ae:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b4:	3b01      	subs	r3, #1
 80031b6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80031b8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031be:	3b01      	subs	r3, #1
 80031c0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80031c2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ca:	3b01      	subs	r3, #1
 80031cc:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80031d2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80031d4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00a      	beq.n	80031f4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031fc:	4413      	add	r3, r2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d011      	beq.n	8003226 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800320a:	f023 0107 	bic.w	r1, r3, #7
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	3360      	adds	r3, #96	; 0x60
 8003216:	443b      	add	r3, r7
 8003218:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	2b00      	cmp	r3, #0
 800322c:	d011      	beq.n	8003252 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003236:	f023 0107 	bic.w	r1, r3, #7
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	3360      	adds	r3, #96	; 0x60
 8003242:	443b      	add	r3, r7
 8003244:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003256:	2b00      	cmp	r3, #0
 8003258:	d012      	beq.n	8003280 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003262:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	3360      	adds	r3, #96	; 0x60
 800326e:	443b      	add	r3, r7
 8003270:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003274:	011a      	lsls	r2, r3, #4
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003284:	2b00      	cmp	r3, #0
 8003286:	d012      	beq.n	80032ae <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003290:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	3360      	adds	r3, #96	; 0x60
 800329c:	443b      	add	r3, r7
 800329e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80032a2:	021a      	lsls	r2, r3, #8
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a11      	ldr	r2, [pc, #68]	; (80032f8 <HAL_FDCAN_Init+0x3b8>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d107      	bne.n	80032c8 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	689a      	ldr	r2, [r3, #8]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f022 0203 	bic.w	r2, r2, #3
 80032c6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 f953 	bl	800358c <FDCAN_CalcultateRamBlockAddresses>
 80032e6:	4603      	mov	r3, r0
 80032e8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80032ec:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3760      	adds	r7, #96	; 0x60
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	4000a000 	.word	0x4000a000

080032fc <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b087      	sub	sp, #28
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800330c:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800330e:	7bfb      	ldrb	r3, [r7, #15]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d002      	beq.n	800331a <HAL_FDCAN_ConfigFilter+0x1e>
 8003314:	7bfb      	ldrb	r3, [r7, #15]
 8003316:	2b02      	cmp	r3, #2
 8003318:	d157      	bne.n	80033ca <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d12b      	bne.n	800337a <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	2b07      	cmp	r3, #7
 8003328:	d10d      	bne.n	8003346 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	69db      	ldr	r3, [r3, #28]
 8003334:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8003336:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800333c:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800333e:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8003342:	617b      	str	r3, [r7, #20]
 8003344:	e00e      	b.n	8003364 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003352:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 800335a:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8003360:	4313      	orrs	r3, r2
 8003362:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4413      	add	r3, r2
 8003370:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	697a      	ldr	r2, [r7, #20]
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	e025      	b.n	80033c6 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	075a      	lsls	r2, r3, #29
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	4313      	orrs	r3, r2
 8003386:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	2b07      	cmp	r3, #7
 800338e:	d103      	bne.n	8003398 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	613b      	str	r3, [r7, #16]
 8003396:	e006      	b.n	80033a6 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	079a      	lsls	r2, r3, #30
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	00db      	lsls	r3, r3, #3
 80033b0:	4413      	add	r3, r2
 80033b2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	3304      	adds	r3, #4
 80033be:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80033c6:	2300      	movs	r3, #0
 80033c8:	e008      	b.n	80033dc <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033d0:	f043 0202 	orr.w	r2, r3, #2
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
  }
}
 80033dc:	4618      	mov	r0, r3
 80033de:	371c      	adds	r7, #28
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
 80033f4:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d110      	bne.n	8003424 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800340a:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8003410:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8003418:	69ba      	ldr	r2, [r7, #24]
 800341a:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800341c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8003420:	2300      	movs	r3, #0
 8003422:	e008      	b.n	8003436 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800342a:	f043 0204 	orr.w	r2, r3, #4
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
  }
}
 8003436:	4618      	mov	r0, r3
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003442:	b480      	push	{r7}
 8003444:	b083      	sub	sp, #12
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b01      	cmp	r3, #1
 8003454:	d111      	bne.n	800347a <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2202      	movs	r2, #2
 800345a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	699a      	ldr	r2, [r3, #24]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 0201 	bic.w	r2, r2, #1
 800346c:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8003476:	2300      	movs	r3, #0
 8003478:	e008      	b.n	800348c <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003480:	f043 0204 	orr.w	r2, r3, #4
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
  }
}
 800348c:	4618      	mov	r0, r3
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8003498:	b480      	push	{r7}
 800349a:	b087      	sub	sp, #28
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80034aa:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80034ac:	7dfb      	ldrb	r3, [r7, #23]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d002      	beq.n	80034b8 <HAL_FDCAN_ActivateNotification+0x20>
 80034b2:	7dfb      	ldrb	r3, [r7, #23]
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d155      	bne.n	8003564 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	4013      	ands	r3, r2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d108      	bne.n	80034d8 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f042 0201 	orr.w	r2, r2, #1
 80034d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80034d6:	e014      	b.n	8003502 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	4013      	ands	r3, r2
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d108      	bne.n	80034fa <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f042 0202 	orr.w	r2, r2, #2
 80034f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80034f8:	e003      	b.n	8003502 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2203      	movs	r2, #3
 8003500:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003508:	2b00      	cmp	r3, #0
 800350a:	d009      	beq.n	8003520 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	430a      	orrs	r2, r1
 800351c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003526:	2b00      	cmp	r3, #0
 8003528:	d009      	beq.n	800353e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	430a      	orrs	r2, r1
 800353a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003544:	68ba      	ldr	r2, [r7, #8]
 8003546:	4b0f      	ldr	r3, [pc, #60]	; (8003584 <HAL_FDCAN_ActivateNotification+0xec>)
 8003548:	4013      	ands	r3, r2
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	6812      	ldr	r2, [r2, #0]
 800354e:	430b      	orrs	r3, r1
 8003550:	6553      	str	r3, [r2, #84]	; 0x54
 8003552:	4b0d      	ldr	r3, [pc, #52]	; (8003588 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003554:	695a      	ldr	r2, [r3, #20]
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	0f9b      	lsrs	r3, r3, #30
 800355a:	490b      	ldr	r1, [pc, #44]	; (8003588 <HAL_FDCAN_ActivateNotification+0xf0>)
 800355c:	4313      	orrs	r3, r2
 800355e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8003560:	2300      	movs	r3, #0
 8003562:	e008      	b.n	8003576 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800356a:	f043 0202 	orr.w	r2, r3, #2
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
  }
}
 8003576:	4618      	mov	r0, r3
 8003578:	371c      	adds	r7, #28
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	3fcfffff 	.word	0x3fcfffff
 8003588:	4000a800 	.word	0x4000a800

0800358c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003598:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80035a2:	4ba7      	ldr	r3, [pc, #668]	; (8003840 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80035a4:	4013      	ands	r3, r2
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	0091      	lsls	r1, r2, #2
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	6812      	ldr	r2, [r2, #0]
 80035ae:	430b      	orrs	r3, r1
 80035b0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035bc:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c4:	041a      	lsls	r2, r3, #16
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d4:	68ba      	ldr	r2, [r7, #8]
 80035d6:	4413      	add	r3, r2
 80035d8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80035e2:	4b97      	ldr	r3, [pc, #604]	; (8003840 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80035e4:	4013      	ands	r3, r2
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	0091      	lsls	r1, r2, #2
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6812      	ldr	r2, [r2, #0]
 80035ee:	430b      	orrs	r3, r1
 80035f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035fc:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003604:	041a      	lsls	r2, r3, #16
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	430a      	orrs	r2, r1
 800360c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	4413      	add	r3, r2
 800361a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003624:	4b86      	ldr	r3, [pc, #536]	; (8003840 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003626:	4013      	ands	r3, r2
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	0091      	lsls	r1, r2, #2
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	6812      	ldr	r2, [r2, #0]
 8003630:	430b      	orrs	r3, r1
 8003632:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800363e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	041a      	lsls	r2, r3, #16
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	430a      	orrs	r2, r1
 800364e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800365a:	fb02 f303 	mul.w	r3, r2, r3
 800365e:	68ba      	ldr	r2, [r7, #8]
 8003660:	4413      	add	r3, r2
 8003662:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800366c:	4b74      	ldr	r3, [pc, #464]	; (8003840 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800366e:	4013      	ands	r3, r2
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	0091      	lsls	r1, r2, #2
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	6812      	ldr	r2, [r2, #0]
 8003678:	430b      	orrs	r3, r1
 800367a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003686:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800368e:	041a      	lsls	r2, r3, #16
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	430a      	orrs	r2, r1
 8003696:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80036a2:	fb02 f303 	mul.w	r3, r2, r3
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	4413      	add	r3, r2
 80036aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80036b4:	4b62      	ldr	r3, [pc, #392]	; (8003840 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80036b6:	4013      	ands	r3, r2
 80036b8:	68ba      	ldr	r2, [r7, #8]
 80036ba:	0091      	lsls	r1, r2, #2
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	6812      	ldr	r2, [r2, #0]
 80036c0:	430b      	orrs	r3, r1
 80036c2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80036ce:	fb02 f303 	mul.w	r3, r2, r3
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	4413      	add	r3, r2
 80036d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80036e0:	4b57      	ldr	r3, [pc, #348]	; (8003840 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80036e2:	4013      	ands	r3, r2
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	0091      	lsls	r1, r2, #2
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	6812      	ldr	r2, [r2, #0]
 80036ec:	430b      	orrs	r3, r1
 80036ee:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80036fa:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003702:	041a      	lsls	r2, r3, #16
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	430a      	orrs	r2, r1
 800370a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	4413      	add	r3, r2
 8003718:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003722:	4b47      	ldr	r3, [pc, #284]	; (8003840 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003724:	4013      	ands	r3, r2
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	0091      	lsls	r1, r2, #2
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	6812      	ldr	r2, [r2, #0]
 800372e:	430b      	orrs	r3, r1
 8003730:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800373c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003744:	041a      	lsls	r2, r3, #16
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	430a      	orrs	r2, r1
 800374c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003758:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003760:	061a      	lsls	r2, r3, #24
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003770:	4b34      	ldr	r3, [pc, #208]	; (8003844 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8003772:	4413      	add	r3, r2
 8003774:	009a      	lsls	r2, r3, #2
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	441a      	add	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	441a      	add	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80037a6:	fb01 f303 	mul.w	r3, r1, r3
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	441a      	add	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ba:	6879      	ldr	r1, [r7, #4]
 80037bc:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80037be:	fb01 f303 	mul.w	r3, r1, r3
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	441a      	add	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80037d6:	fb01 f303 	mul.w	r3, r1, r3
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	441a      	add	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	441a      	add	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003802:	6879      	ldr	r1, [r7, #4]
 8003804:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003806:	fb01 f303 	mul.w	r3, r1, r3
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	441a      	add	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003822:	fb01 f303 	mul.w	r3, r1, r3
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	441a      	add	r2, r3
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003836:	4a04      	ldr	r2, [pc, #16]	; (8003848 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d915      	bls.n	8003868 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800383c:	e006      	b.n	800384c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800383e:	bf00      	nop
 8003840:	ffff0003 	.word	0xffff0003
 8003844:	10002b00 	.word	0x10002b00
 8003848:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003852:	f043 0220 	orr.w	r2, r3, #32
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2203      	movs	r2, #3
 8003860:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e010      	b.n	800388a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800386c:	60fb      	str	r3, [r7, #12]
 800386e:	e005      	b.n	800387c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	3304      	adds	r3, #4
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	429a      	cmp	r2, r3
 8003886:	d3f3      	bcc.n	8003870 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3714      	adds	r7, #20
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop

08003898 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003898:	b480      	push	{r7}
 800389a:	b089      	sub	sp, #36	; 0x24
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80038a2:	2300      	movs	r3, #0
 80038a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80038a6:	4b89      	ldr	r3, [pc, #548]	; (8003acc <HAL_GPIO_Init+0x234>)
 80038a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80038aa:	e194      	b.n	8003bd6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	2101      	movs	r1, #1
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	fa01 f303 	lsl.w	r3, r1, r3
 80038b8:	4013      	ands	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 8186 	beq.w	8003bd0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f003 0303 	and.w	r3, r3, #3
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d005      	beq.n	80038dc <HAL_GPIO_Init+0x44>
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f003 0303 	and.w	r3, r3, #3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d130      	bne.n	800393e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	2203      	movs	r2, #3
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	43db      	mvns	r3, r3
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	4013      	ands	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	68da      	ldr	r2, [r3, #12]
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	4313      	orrs	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	69ba      	ldr	r2, [r7, #24]
 800390a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003912:	2201      	movs	r2, #1
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	fa02 f303 	lsl.w	r3, r2, r3
 800391a:	43db      	mvns	r3, r3
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	4013      	ands	r3, r2
 8003920:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	091b      	lsrs	r3, r3, #4
 8003928:	f003 0201 	and.w	r2, r3, #1
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	fa02 f303 	lsl.w	r3, r2, r3
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	4313      	orrs	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f003 0303 	and.w	r3, r3, #3
 8003946:	2b03      	cmp	r3, #3
 8003948:	d017      	beq.n	800397a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	2203      	movs	r2, #3
 8003956:	fa02 f303 	lsl.w	r3, r2, r3
 800395a:	43db      	mvns	r3, r3
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	4013      	ands	r3, r2
 8003960:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	689a      	ldr	r2, [r3, #8]
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	fa02 f303 	lsl.w	r3, r2, r3
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	4313      	orrs	r3, r2
 8003972:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f003 0303 	and.w	r3, r3, #3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d123      	bne.n	80039ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	08da      	lsrs	r2, r3, #3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	3208      	adds	r2, #8
 800398e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003992:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	f003 0307 	and.w	r3, r3, #7
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	220f      	movs	r2, #15
 800399e:	fa02 f303 	lsl.w	r3, r2, r3
 80039a2:	43db      	mvns	r3, r3
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	4013      	ands	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	691a      	ldr	r2, [r3, #16]
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	4313      	orrs	r3, r2
 80039be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	08da      	lsrs	r2, r3, #3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	3208      	adds	r2, #8
 80039c8:	69b9      	ldr	r1, [r7, #24]
 80039ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	005b      	lsls	r3, r3, #1
 80039d8:	2203      	movs	r2, #3
 80039da:	fa02 f303 	lsl.w	r3, r2, r3
 80039de:	43db      	mvns	r3, r3
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	4013      	ands	r3, r2
 80039e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f003 0203 	and.w	r2, r3, #3
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	fa02 f303 	lsl.w	r3, r2, r3
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	f000 80e0 	beq.w	8003bd0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a10:	4b2f      	ldr	r3, [pc, #188]	; (8003ad0 <HAL_GPIO_Init+0x238>)
 8003a12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a16:	4a2e      	ldr	r2, [pc, #184]	; (8003ad0 <HAL_GPIO_Init+0x238>)
 8003a18:	f043 0302 	orr.w	r3, r3, #2
 8003a1c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003a20:	4b2b      	ldr	r3, [pc, #172]	; (8003ad0 <HAL_GPIO_Init+0x238>)
 8003a22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003a26:	f003 0302 	and.w	r3, r3, #2
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a2e:	4a29      	ldr	r2, [pc, #164]	; (8003ad4 <HAL_GPIO_Init+0x23c>)
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	089b      	lsrs	r3, r3, #2
 8003a34:	3302      	adds	r3, #2
 8003a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	f003 0303 	and.w	r3, r3, #3
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	220f      	movs	r2, #15
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a20      	ldr	r2, [pc, #128]	; (8003ad8 <HAL_GPIO_Init+0x240>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d052      	beq.n	8003b00 <HAL_GPIO_Init+0x268>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a1f      	ldr	r2, [pc, #124]	; (8003adc <HAL_GPIO_Init+0x244>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d031      	beq.n	8003ac6 <HAL_GPIO_Init+0x22e>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a1e      	ldr	r2, [pc, #120]	; (8003ae0 <HAL_GPIO_Init+0x248>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d02b      	beq.n	8003ac2 <HAL_GPIO_Init+0x22a>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a1d      	ldr	r2, [pc, #116]	; (8003ae4 <HAL_GPIO_Init+0x24c>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d025      	beq.n	8003abe <HAL_GPIO_Init+0x226>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a1c      	ldr	r2, [pc, #112]	; (8003ae8 <HAL_GPIO_Init+0x250>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d01f      	beq.n	8003aba <HAL_GPIO_Init+0x222>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a1b      	ldr	r2, [pc, #108]	; (8003aec <HAL_GPIO_Init+0x254>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d019      	beq.n	8003ab6 <HAL_GPIO_Init+0x21e>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a1a      	ldr	r2, [pc, #104]	; (8003af0 <HAL_GPIO_Init+0x258>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d013      	beq.n	8003ab2 <HAL_GPIO_Init+0x21a>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a19      	ldr	r2, [pc, #100]	; (8003af4 <HAL_GPIO_Init+0x25c>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d00d      	beq.n	8003aae <HAL_GPIO_Init+0x216>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a18      	ldr	r2, [pc, #96]	; (8003af8 <HAL_GPIO_Init+0x260>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d007      	beq.n	8003aaa <HAL_GPIO_Init+0x212>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	4a17      	ldr	r2, [pc, #92]	; (8003afc <HAL_GPIO_Init+0x264>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d101      	bne.n	8003aa6 <HAL_GPIO_Init+0x20e>
 8003aa2:	2309      	movs	r3, #9
 8003aa4:	e02d      	b.n	8003b02 <HAL_GPIO_Init+0x26a>
 8003aa6:	230a      	movs	r3, #10
 8003aa8:	e02b      	b.n	8003b02 <HAL_GPIO_Init+0x26a>
 8003aaa:	2308      	movs	r3, #8
 8003aac:	e029      	b.n	8003b02 <HAL_GPIO_Init+0x26a>
 8003aae:	2307      	movs	r3, #7
 8003ab0:	e027      	b.n	8003b02 <HAL_GPIO_Init+0x26a>
 8003ab2:	2306      	movs	r3, #6
 8003ab4:	e025      	b.n	8003b02 <HAL_GPIO_Init+0x26a>
 8003ab6:	2305      	movs	r3, #5
 8003ab8:	e023      	b.n	8003b02 <HAL_GPIO_Init+0x26a>
 8003aba:	2304      	movs	r3, #4
 8003abc:	e021      	b.n	8003b02 <HAL_GPIO_Init+0x26a>
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e01f      	b.n	8003b02 <HAL_GPIO_Init+0x26a>
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	e01d      	b.n	8003b02 <HAL_GPIO_Init+0x26a>
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e01b      	b.n	8003b02 <HAL_GPIO_Init+0x26a>
 8003aca:	bf00      	nop
 8003acc:	58000080 	.word	0x58000080
 8003ad0:	58024400 	.word	0x58024400
 8003ad4:	58000400 	.word	0x58000400
 8003ad8:	58020000 	.word	0x58020000
 8003adc:	58020400 	.word	0x58020400
 8003ae0:	58020800 	.word	0x58020800
 8003ae4:	58020c00 	.word	0x58020c00
 8003ae8:	58021000 	.word	0x58021000
 8003aec:	58021400 	.word	0x58021400
 8003af0:	58021800 	.word	0x58021800
 8003af4:	58021c00 	.word	0x58021c00
 8003af8:	58022000 	.word	0x58022000
 8003afc:	58022400 	.word	0x58022400
 8003b00:	2300      	movs	r3, #0
 8003b02:	69fa      	ldr	r2, [r7, #28]
 8003b04:	f002 0203 	and.w	r2, r2, #3
 8003b08:	0092      	lsls	r2, r2, #2
 8003b0a:	4093      	lsls	r3, r2
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b12:	4938      	ldr	r1, [pc, #224]	; (8003bf4 <HAL_GPIO_Init+0x35c>)
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	089b      	lsrs	r3, r3, #2
 8003b18:	3302      	adds	r3, #2
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	43db      	mvns	r3, r3
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	4013      	ands	r3, r2
 8003b30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d003      	beq.n	8003b46 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003b46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d003      	beq.n	8003b74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003b74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	43db      	mvns	r3, r3
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	4013      	ands	r3, r2
 8003b8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d003      	beq.n	8003ba0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003b98:	69ba      	ldr	r2, [r7, #24]
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	43db      	mvns	r3, r3
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d003      	beq.n	8003bca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	fa22 f303 	lsr.w	r3, r2, r3
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f47f ae63 	bne.w	80038ac <HAL_GPIO_Init+0x14>
  }
}
 8003be6:	bf00      	nop
 8003be8:	bf00      	nop
 8003bea:	3724      	adds	r7, #36	; 0x24
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr
 8003bf4:	58000400 	.word	0x58000400

08003bf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	460b      	mov	r3, r1
 8003c02:	807b      	strh	r3, [r7, #2]
 8003c04:	4613      	mov	r3, r2
 8003c06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003c08:	787b      	ldrb	r3, [r7, #1]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c0e:	887a      	ldrh	r2, [r7, #2]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003c14:	e003      	b.n	8003c1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003c16:	887b      	ldrh	r3, [r7, #2]
 8003c18:	041a      	lsls	r2, r3, #16
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	619a      	str	r2, [r3, #24]
}
 8003c1e:	bf00      	nop
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
	...

08003c2c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8003c34:	4a08      	ldr	r2, [pc, #32]	; (8003c58 <HAL_HSEM_FastTake+0x2c>)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	3320      	adds	r3, #32
 8003c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c3e:	4a07      	ldr	r2, [pc, #28]	; (8003c5c <HAL_HSEM_FastTake+0x30>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d101      	bne.n	8003c48 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8003c44:	2300      	movs	r3, #0
 8003c46:	e000      	b.n	8003c4a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	58026400 	.word	0x58026400
 8003c5c:	80000300 	.word	0x80000300

08003c60 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8003c6a:	4906      	ldr	r1, [pc, #24]	; (8003c84 <HAL_HSEM_Release+0x24>)
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	58026400 	.word	0x58026400

08003c88 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8003c90:	4b29      	ldr	r3, [pc, #164]	; (8003d38 <HAL_PWREx_ConfigSupply+0xb0>)
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	f003 0307 	and.w	r3, r3, #7
 8003c98:	2b06      	cmp	r3, #6
 8003c9a:	d00a      	beq.n	8003cb2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003c9c:	4b26      	ldr	r3, [pc, #152]	; (8003d38 <HAL_PWREx_ConfigSupply+0xb0>)
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d001      	beq.n	8003cae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e040      	b.n	8003d30 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	e03e      	b.n	8003d30 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003cb2:	4b21      	ldr	r3, [pc, #132]	; (8003d38 <HAL_PWREx_ConfigSupply+0xb0>)
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003cba:	491f      	ldr	r1, [pc, #124]	; (8003d38 <HAL_PWREx_ConfigSupply+0xb0>)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003cc2:	f7fe fff1 	bl	8002ca8 <HAL_GetTick>
 8003cc6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003cc8:	e009      	b.n	8003cde <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003cca:	f7fe ffed 	bl	8002ca8 <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cd8:	d901      	bls.n	8003cde <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e028      	b.n	8003d30 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003cde:	4b16      	ldr	r3, [pc, #88]	; (8003d38 <HAL_PWREx_ConfigSupply+0xb0>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ce6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cea:	d1ee      	bne.n	8003cca <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2b1e      	cmp	r3, #30
 8003cf0:	d008      	beq.n	8003d04 <HAL_PWREx_ConfigSupply+0x7c>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2b2e      	cmp	r3, #46	; 0x2e
 8003cf6:	d005      	beq.n	8003d04 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b1d      	cmp	r3, #29
 8003cfc:	d002      	beq.n	8003d04 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b2d      	cmp	r3, #45	; 0x2d
 8003d02:	d114      	bne.n	8003d2e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8003d04:	f7fe ffd0 	bl	8002ca8 <HAL_GetTick>
 8003d08:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003d0a:	e009      	b.n	8003d20 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003d0c:	f7fe ffcc 	bl	8002ca8 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d1a:	d901      	bls.n	8003d20 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e007      	b.n	8003d30 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003d20:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <HAL_PWREx_ConfigSupply+0xb0>)
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d2c:	d1ee      	bne.n	8003d0c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	58024800 	.word	0x58024800

08003d3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b08c      	sub	sp, #48	; 0x30
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d102      	bne.n	8003d50 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	f000 bc1d 	b.w	800458a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 0301 	and.w	r3, r3, #1
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 8087 	beq.w	8003e6c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d5e:	4b99      	ldr	r3, [pc, #612]	; (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d66:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d68:	4b96      	ldr	r3, [pc, #600]	; (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d70:	2b10      	cmp	r3, #16
 8003d72:	d007      	beq.n	8003d84 <HAL_RCC_OscConfig+0x48>
 8003d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d76:	2b18      	cmp	r3, #24
 8003d78:	d110      	bne.n	8003d9c <HAL_RCC_OscConfig+0x60>
 8003d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7c:	f003 0303 	and.w	r3, r3, #3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d10b      	bne.n	8003d9c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d84:	4b8f      	ldr	r3, [pc, #572]	; (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d06c      	beq.n	8003e6a <HAL_RCC_OscConfig+0x12e>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d168      	bne.n	8003e6a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e3f6      	b.n	800458a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003da4:	d106      	bne.n	8003db4 <HAL_RCC_OscConfig+0x78>
 8003da6:	4b87      	ldr	r3, [pc, #540]	; (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a86      	ldr	r2, [pc, #536]	; (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003db0:	6013      	str	r3, [r2, #0]
 8003db2:	e02e      	b.n	8003e12 <HAL_RCC_OscConfig+0xd6>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d10c      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x9a>
 8003dbc:	4b81      	ldr	r3, [pc, #516]	; (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a80      	ldr	r2, [pc, #512]	; (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dc6:	6013      	str	r3, [r2, #0]
 8003dc8:	4b7e      	ldr	r3, [pc, #504]	; (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a7d      	ldr	r2, [pc, #500]	; (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003dce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dd2:	6013      	str	r3, [r2, #0]
 8003dd4:	e01d      	b.n	8003e12 <HAL_RCC_OscConfig+0xd6>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dde:	d10c      	bne.n	8003dfa <HAL_RCC_OscConfig+0xbe>
 8003de0:	4b78      	ldr	r3, [pc, #480]	; (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a77      	ldr	r2, [pc, #476]	; (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003de6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dea:	6013      	str	r3, [r2, #0]
 8003dec:	4b75      	ldr	r3, [pc, #468]	; (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a74      	ldr	r2, [pc, #464]	; (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003df2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003df6:	6013      	str	r3, [r2, #0]
 8003df8:	e00b      	b.n	8003e12 <HAL_RCC_OscConfig+0xd6>
 8003dfa:	4b72      	ldr	r3, [pc, #456]	; (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a71      	ldr	r2, [pc, #452]	; (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003e00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e04:	6013      	str	r3, [r2, #0]
 8003e06:	4b6f      	ldr	r3, [pc, #444]	; (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a6e      	ldr	r2, [pc, #440]	; (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003e0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e10:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d013      	beq.n	8003e42 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1a:	f7fe ff45 	bl	8002ca8 <HAL_GetTick>
 8003e1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e20:	e008      	b.n	8003e34 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e22:	f7fe ff41 	bl	8002ca8 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b64      	cmp	r3, #100	; 0x64
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e3aa      	b.n	800458a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e34:	4b63      	ldr	r3, [pc, #396]	; (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0f0      	beq.n	8003e22 <HAL_RCC_OscConfig+0xe6>
 8003e40:	e014      	b.n	8003e6c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e42:	f7fe ff31 	bl	8002ca8 <HAL_GetTick>
 8003e46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e48:	e008      	b.n	8003e5c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e4a:	f7fe ff2d 	bl	8002ca8 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	2b64      	cmp	r3, #100	; 0x64
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e396      	b.n	800458a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e5c:	4b59      	ldr	r3, [pc, #356]	; (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1f0      	bne.n	8003e4a <HAL_RCC_OscConfig+0x10e>
 8003e68:	e000      	b.n	8003e6c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e6a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f000 80cb 	beq.w	8004010 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e7a:	4b52      	ldr	r3, [pc, #328]	; (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e82:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003e84:	4b4f      	ldr	r3, [pc, #316]	; (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e88:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003e8a:	6a3b      	ldr	r3, [r7, #32]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d007      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x164>
 8003e90:	6a3b      	ldr	r3, [r7, #32]
 8003e92:	2b18      	cmp	r3, #24
 8003e94:	d156      	bne.n	8003f44 <HAL_RCC_OscConfig+0x208>
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	f003 0303 	and.w	r3, r3, #3
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d151      	bne.n	8003f44 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ea0:	4b48      	ldr	r3, [pc, #288]	; (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d005      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x17c>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	68db      	ldr	r3, [r3, #12]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d101      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e368      	b.n	800458a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003eb8:	4b42      	ldr	r3, [pc, #264]	; (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f023 0219 	bic.w	r2, r3, #25
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	493f      	ldr	r1, [pc, #252]	; (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003eca:	f7fe feed 	bl	8002ca8 <HAL_GetTick>
 8003ece:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ed0:	e008      	b.n	8003ee4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ed2:	f7fe fee9 	bl	8002ca8 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e352      	b.n	800458a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003ee4:	4b37      	ldr	r3, [pc, #220]	; (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0304 	and.w	r3, r3, #4
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d0f0      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ef0:	f7fe ff0a 	bl	8002d08 <HAL_GetREVID>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	f241 0203 	movw	r2, #4099	; 0x1003
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d817      	bhi.n	8003f2e <HAL_RCC_OscConfig+0x1f2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	2b40      	cmp	r3, #64	; 0x40
 8003f04:	d108      	bne.n	8003f18 <HAL_RCC_OscConfig+0x1dc>
 8003f06:	4b2f      	ldr	r3, [pc, #188]	; (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003f0e:	4a2d      	ldr	r2, [pc, #180]	; (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f14:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f16:	e07b      	b.n	8004010 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f18:	4b2a      	ldr	r3, [pc, #168]	; (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	031b      	lsls	r3, r3, #12
 8003f26:	4927      	ldr	r1, [pc, #156]	; (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f2c:	e070      	b.n	8004010 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f2e:	4b25      	ldr	r3, [pc, #148]	; (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	061b      	lsls	r3, r3, #24
 8003f3c:	4921      	ldr	r1, [pc, #132]	; (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f42:	e065      	b.n	8004010 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d048      	beq.n	8003fde <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003f4c:	4b1d      	ldr	r3, [pc, #116]	; (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f023 0219 	bic.w	r2, r3, #25
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	491a      	ldr	r1, [pc, #104]	; (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5e:	f7fe fea3 	bl	8002ca8 <HAL_GetTick>
 8003f62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f64:	e008      	b.n	8003f78 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f66:	f7fe fe9f 	bl	8002ca8 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d901      	bls.n	8003f78 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e308      	b.n	800458a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f78:	4b12      	ldr	r3, [pc, #72]	; (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0304 	and.w	r3, r3, #4
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d0f0      	beq.n	8003f66 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f84:	f7fe fec0 	bl	8002d08 <HAL_GetREVID>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	f241 0203 	movw	r2, #4099	; 0x1003
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d81a      	bhi.n	8003fc8 <HAL_RCC_OscConfig+0x28c>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	2b40      	cmp	r3, #64	; 0x40
 8003f98:	d108      	bne.n	8003fac <HAL_RCC_OscConfig+0x270>
 8003f9a:	4b0a      	ldr	r3, [pc, #40]	; (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003fa2:	4a08      	ldr	r2, [pc, #32]	; (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fa8:	6053      	str	r3, [r2, #4]
 8003faa:	e031      	b.n	8004010 <HAL_RCC_OscConfig+0x2d4>
 8003fac:	4b05      	ldr	r3, [pc, #20]	; (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	031b      	lsls	r3, r3, #12
 8003fba:	4902      	ldr	r1, [pc, #8]	; (8003fc4 <HAL_RCC_OscConfig+0x288>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	604b      	str	r3, [r1, #4]
 8003fc0:	e026      	b.n	8004010 <HAL_RCC_OscConfig+0x2d4>
 8003fc2:	bf00      	nop
 8003fc4:	58024400 	.word	0x58024400
 8003fc8:	4b9a      	ldr	r3, [pc, #616]	; (8004234 <HAL_RCC_OscConfig+0x4f8>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	061b      	lsls	r3, r3, #24
 8003fd6:	4997      	ldr	r1, [pc, #604]	; (8004234 <HAL_RCC_OscConfig+0x4f8>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	604b      	str	r3, [r1, #4]
 8003fdc:	e018      	b.n	8004010 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fde:	4b95      	ldr	r3, [pc, #596]	; (8004234 <HAL_RCC_OscConfig+0x4f8>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a94      	ldr	r2, [pc, #592]	; (8004234 <HAL_RCC_OscConfig+0x4f8>)
 8003fe4:	f023 0301 	bic.w	r3, r3, #1
 8003fe8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fea:	f7fe fe5d 	bl	8002ca8 <HAL_GetTick>
 8003fee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ff0:	e008      	b.n	8004004 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ff2:	f7fe fe59 	bl	8002ca8 <HAL_GetTick>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d901      	bls.n	8004004 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e2c2      	b.n	800458a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004004:	4b8b      	ldr	r3, [pc, #556]	; (8004234 <HAL_RCC_OscConfig+0x4f8>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0304 	and.w	r3, r3, #4
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1f0      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0310 	and.w	r3, r3, #16
 8004018:	2b00      	cmp	r3, #0
 800401a:	f000 80a9 	beq.w	8004170 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800401e:	4b85      	ldr	r3, [pc, #532]	; (8004234 <HAL_RCC_OscConfig+0x4f8>)
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004026:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004028:	4b82      	ldr	r3, [pc, #520]	; (8004234 <HAL_RCC_OscConfig+0x4f8>)
 800402a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	2b08      	cmp	r3, #8
 8004032:	d007      	beq.n	8004044 <HAL_RCC_OscConfig+0x308>
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	2b18      	cmp	r3, #24
 8004038:	d13a      	bne.n	80040b0 <HAL_RCC_OscConfig+0x374>
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f003 0303 	and.w	r3, r3, #3
 8004040:	2b01      	cmp	r3, #1
 8004042:	d135      	bne.n	80040b0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004044:	4b7b      	ldr	r3, [pc, #492]	; (8004234 <HAL_RCC_OscConfig+0x4f8>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404c:	2b00      	cmp	r3, #0
 800404e:	d005      	beq.n	800405c <HAL_RCC_OscConfig+0x320>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	69db      	ldr	r3, [r3, #28]
 8004054:	2b80      	cmp	r3, #128	; 0x80
 8004056:	d001      	beq.n	800405c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e296      	b.n	800458a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800405c:	f7fe fe54 	bl	8002d08 <HAL_GetREVID>
 8004060:	4603      	mov	r3, r0
 8004062:	f241 0203 	movw	r2, #4099	; 0x1003
 8004066:	4293      	cmp	r3, r2
 8004068:	d817      	bhi.n	800409a <HAL_RCC_OscConfig+0x35e>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	2b20      	cmp	r3, #32
 8004070:	d108      	bne.n	8004084 <HAL_RCC_OscConfig+0x348>
 8004072:	4b70      	ldr	r3, [pc, #448]	; (8004234 <HAL_RCC_OscConfig+0x4f8>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800407a:	4a6e      	ldr	r2, [pc, #440]	; (8004234 <HAL_RCC_OscConfig+0x4f8>)
 800407c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004080:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004082:	e075      	b.n	8004170 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004084:	4b6b      	ldr	r3, [pc, #428]	; (8004234 <HAL_RCC_OscConfig+0x4f8>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	069b      	lsls	r3, r3, #26
 8004092:	4968      	ldr	r1, [pc, #416]	; (8004234 <HAL_RCC_OscConfig+0x4f8>)
 8004094:	4313      	orrs	r3, r2
 8004096:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004098:	e06a      	b.n	8004170 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800409a:	4b66      	ldr	r3, [pc, #408]	; (8004234 <HAL_RCC_OscConfig+0x4f8>)
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	061b      	lsls	r3, r3, #24
 80040a8:	4962      	ldr	r1, [pc, #392]	; (8004234 <HAL_RCC_OscConfig+0x4f8>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80040ae:	e05f      	b.n	8004170 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	69db      	ldr	r3, [r3, #28]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d042      	beq.n	800413e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80040b8:	4b5e      	ldr	r3, [pc, #376]	; (8004234 <HAL_RCC_OscConfig+0x4f8>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a5d      	ldr	r2, [pc, #372]	; (8004234 <HAL_RCC_OscConfig+0x4f8>)
 80040be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c4:	f7fe fdf0 	bl	8002ca8 <HAL_GetTick>
 80040c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80040cc:	f7fe fdec 	bl	8002ca8 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e255      	b.n	800458a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80040de:	4b55      	ldr	r3, [pc, #340]	; (8004234 <HAL_RCC_OscConfig+0x4f8>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d0f0      	beq.n	80040cc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80040ea:	f7fe fe0d 	bl	8002d08 <HAL_GetREVID>
 80040ee:	4603      	mov	r3, r0
 80040f0:	f241 0203 	movw	r2, #4099	; 0x1003
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d817      	bhi.n	8004128 <HAL_RCC_OscConfig+0x3ec>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	2b20      	cmp	r3, #32
 80040fe:	d108      	bne.n	8004112 <HAL_RCC_OscConfig+0x3d6>
 8004100:	4b4c      	ldr	r3, [pc, #304]	; (8004234 <HAL_RCC_OscConfig+0x4f8>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004108:	4a4a      	ldr	r2, [pc, #296]	; (8004234 <HAL_RCC_OscConfig+0x4f8>)
 800410a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800410e:	6053      	str	r3, [r2, #4]
 8004110:	e02e      	b.n	8004170 <HAL_RCC_OscConfig+0x434>
 8004112:	4b48      	ldr	r3, [pc, #288]	; (8004234 <HAL_RCC_OscConfig+0x4f8>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a1b      	ldr	r3, [r3, #32]
 800411e:	069b      	lsls	r3, r3, #26
 8004120:	4944      	ldr	r1, [pc, #272]	; (8004234 <HAL_RCC_OscConfig+0x4f8>)
 8004122:	4313      	orrs	r3, r2
 8004124:	604b      	str	r3, [r1, #4]
 8004126:	e023      	b.n	8004170 <HAL_RCC_OscConfig+0x434>
 8004128:	4b42      	ldr	r3, [pc, #264]	; (8004234 <HAL_RCC_OscConfig+0x4f8>)
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a1b      	ldr	r3, [r3, #32]
 8004134:	061b      	lsls	r3, r3, #24
 8004136:	493f      	ldr	r1, [pc, #252]	; (8004234 <HAL_RCC_OscConfig+0x4f8>)
 8004138:	4313      	orrs	r3, r2
 800413a:	60cb      	str	r3, [r1, #12]
 800413c:	e018      	b.n	8004170 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800413e:	4b3d      	ldr	r3, [pc, #244]	; (8004234 <HAL_RCC_OscConfig+0x4f8>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a3c      	ldr	r2, [pc, #240]	; (8004234 <HAL_RCC_OscConfig+0x4f8>)
 8004144:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004148:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414a:	f7fe fdad 	bl	8002ca8 <HAL_GetTick>
 800414e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004150:	e008      	b.n	8004164 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004152:	f7fe fda9 	bl	8002ca8 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d901      	bls.n	8004164 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e212      	b.n	800458a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004164:	4b33      	ldr	r3, [pc, #204]	; (8004234 <HAL_RCC_OscConfig+0x4f8>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1f0      	bne.n	8004152 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0308 	and.w	r3, r3, #8
 8004178:	2b00      	cmp	r3, #0
 800417a:	d036      	beq.n	80041ea <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d019      	beq.n	80041b8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004184:	4b2b      	ldr	r3, [pc, #172]	; (8004234 <HAL_RCC_OscConfig+0x4f8>)
 8004186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004188:	4a2a      	ldr	r2, [pc, #168]	; (8004234 <HAL_RCC_OscConfig+0x4f8>)
 800418a:	f043 0301 	orr.w	r3, r3, #1
 800418e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004190:	f7fe fd8a 	bl	8002ca8 <HAL_GetTick>
 8004194:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004196:	e008      	b.n	80041aa <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004198:	f7fe fd86 	bl	8002ca8 <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e1ef      	b.n	800458a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80041aa:	4b22      	ldr	r3, [pc, #136]	; (8004234 <HAL_RCC_OscConfig+0x4f8>)
 80041ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d0f0      	beq.n	8004198 <HAL_RCC_OscConfig+0x45c>
 80041b6:	e018      	b.n	80041ea <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041b8:	4b1e      	ldr	r3, [pc, #120]	; (8004234 <HAL_RCC_OscConfig+0x4f8>)
 80041ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041bc:	4a1d      	ldr	r2, [pc, #116]	; (8004234 <HAL_RCC_OscConfig+0x4f8>)
 80041be:	f023 0301 	bic.w	r3, r3, #1
 80041c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c4:	f7fe fd70 	bl	8002ca8 <HAL_GetTick>
 80041c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80041ca:	e008      	b.n	80041de <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041cc:	f7fe fd6c 	bl	8002ca8 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e1d5      	b.n	800458a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80041de:	4b15      	ldr	r3, [pc, #84]	; (8004234 <HAL_RCC_OscConfig+0x4f8>)
 80041e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1f0      	bne.n	80041cc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0320 	and.w	r3, r3, #32
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d039      	beq.n	800426a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d01c      	beq.n	8004238 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80041fe:	4b0d      	ldr	r3, [pc, #52]	; (8004234 <HAL_RCC_OscConfig+0x4f8>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a0c      	ldr	r2, [pc, #48]	; (8004234 <HAL_RCC_OscConfig+0x4f8>)
 8004204:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004208:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800420a:	f7fe fd4d 	bl	8002ca8 <HAL_GetTick>
 800420e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004210:	e008      	b.n	8004224 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8004212:	f7fe fd49 	bl	8002ca8 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d901      	bls.n	8004224 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e1b2      	b.n	800458a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004224:	4b03      	ldr	r3, [pc, #12]	; (8004234 <HAL_RCC_OscConfig+0x4f8>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d0f0      	beq.n	8004212 <HAL_RCC_OscConfig+0x4d6>
 8004230:	e01b      	b.n	800426a <HAL_RCC_OscConfig+0x52e>
 8004232:	bf00      	nop
 8004234:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004238:	4b9b      	ldr	r3, [pc, #620]	; (80044a8 <HAL_RCC_OscConfig+0x76c>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a9a      	ldr	r2, [pc, #616]	; (80044a8 <HAL_RCC_OscConfig+0x76c>)
 800423e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004242:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004244:	f7fe fd30 	bl	8002ca8 <HAL_GetTick>
 8004248:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800424a:	e008      	b.n	800425e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800424c:	f7fe fd2c 	bl	8002ca8 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e195      	b.n	800458a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800425e:	4b92      	ldr	r3, [pc, #584]	; (80044a8 <HAL_RCC_OscConfig+0x76c>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1f0      	bne.n	800424c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0304 	and.w	r3, r3, #4
 8004272:	2b00      	cmp	r3, #0
 8004274:	f000 8081 	beq.w	800437a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004278:	4b8c      	ldr	r3, [pc, #560]	; (80044ac <HAL_RCC_OscConfig+0x770>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a8b      	ldr	r2, [pc, #556]	; (80044ac <HAL_RCC_OscConfig+0x770>)
 800427e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004282:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004284:	f7fe fd10 	bl	8002ca8 <HAL_GetTick>
 8004288:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800428a:	e008      	b.n	800429e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800428c:	f7fe fd0c 	bl	8002ca8 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b64      	cmp	r3, #100	; 0x64
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e175      	b.n	800458a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800429e:	4b83      	ldr	r3, [pc, #524]	; (80044ac <HAL_RCC_OscConfig+0x770>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d0f0      	beq.n	800428c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d106      	bne.n	80042c0 <HAL_RCC_OscConfig+0x584>
 80042b2:	4b7d      	ldr	r3, [pc, #500]	; (80044a8 <HAL_RCC_OscConfig+0x76c>)
 80042b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b6:	4a7c      	ldr	r2, [pc, #496]	; (80044a8 <HAL_RCC_OscConfig+0x76c>)
 80042b8:	f043 0301 	orr.w	r3, r3, #1
 80042bc:	6713      	str	r3, [r2, #112]	; 0x70
 80042be:	e02d      	b.n	800431c <HAL_RCC_OscConfig+0x5e0>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10c      	bne.n	80042e2 <HAL_RCC_OscConfig+0x5a6>
 80042c8:	4b77      	ldr	r3, [pc, #476]	; (80044a8 <HAL_RCC_OscConfig+0x76c>)
 80042ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042cc:	4a76      	ldr	r2, [pc, #472]	; (80044a8 <HAL_RCC_OscConfig+0x76c>)
 80042ce:	f023 0301 	bic.w	r3, r3, #1
 80042d2:	6713      	str	r3, [r2, #112]	; 0x70
 80042d4:	4b74      	ldr	r3, [pc, #464]	; (80044a8 <HAL_RCC_OscConfig+0x76c>)
 80042d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d8:	4a73      	ldr	r2, [pc, #460]	; (80044a8 <HAL_RCC_OscConfig+0x76c>)
 80042da:	f023 0304 	bic.w	r3, r3, #4
 80042de:	6713      	str	r3, [r2, #112]	; 0x70
 80042e0:	e01c      	b.n	800431c <HAL_RCC_OscConfig+0x5e0>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	2b05      	cmp	r3, #5
 80042e8:	d10c      	bne.n	8004304 <HAL_RCC_OscConfig+0x5c8>
 80042ea:	4b6f      	ldr	r3, [pc, #444]	; (80044a8 <HAL_RCC_OscConfig+0x76c>)
 80042ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ee:	4a6e      	ldr	r2, [pc, #440]	; (80044a8 <HAL_RCC_OscConfig+0x76c>)
 80042f0:	f043 0304 	orr.w	r3, r3, #4
 80042f4:	6713      	str	r3, [r2, #112]	; 0x70
 80042f6:	4b6c      	ldr	r3, [pc, #432]	; (80044a8 <HAL_RCC_OscConfig+0x76c>)
 80042f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fa:	4a6b      	ldr	r2, [pc, #428]	; (80044a8 <HAL_RCC_OscConfig+0x76c>)
 80042fc:	f043 0301 	orr.w	r3, r3, #1
 8004300:	6713      	str	r3, [r2, #112]	; 0x70
 8004302:	e00b      	b.n	800431c <HAL_RCC_OscConfig+0x5e0>
 8004304:	4b68      	ldr	r3, [pc, #416]	; (80044a8 <HAL_RCC_OscConfig+0x76c>)
 8004306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004308:	4a67      	ldr	r2, [pc, #412]	; (80044a8 <HAL_RCC_OscConfig+0x76c>)
 800430a:	f023 0301 	bic.w	r3, r3, #1
 800430e:	6713      	str	r3, [r2, #112]	; 0x70
 8004310:	4b65      	ldr	r3, [pc, #404]	; (80044a8 <HAL_RCC_OscConfig+0x76c>)
 8004312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004314:	4a64      	ldr	r2, [pc, #400]	; (80044a8 <HAL_RCC_OscConfig+0x76c>)
 8004316:	f023 0304 	bic.w	r3, r3, #4
 800431a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d015      	beq.n	8004350 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004324:	f7fe fcc0 	bl	8002ca8 <HAL_GetTick>
 8004328:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800432a:	e00a      	b.n	8004342 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800432c:	f7fe fcbc 	bl	8002ca8 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	f241 3288 	movw	r2, #5000	; 0x1388
 800433a:	4293      	cmp	r3, r2
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e123      	b.n	800458a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004342:	4b59      	ldr	r3, [pc, #356]	; (80044a8 <HAL_RCC_OscConfig+0x76c>)
 8004344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d0ee      	beq.n	800432c <HAL_RCC_OscConfig+0x5f0>
 800434e:	e014      	b.n	800437a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004350:	f7fe fcaa 	bl	8002ca8 <HAL_GetTick>
 8004354:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004356:	e00a      	b.n	800436e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004358:	f7fe fca6 	bl	8002ca8 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	f241 3288 	movw	r2, #5000	; 0x1388
 8004366:	4293      	cmp	r3, r2
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e10d      	b.n	800458a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800436e:	4b4e      	ldr	r3, [pc, #312]	; (80044a8 <HAL_RCC_OscConfig+0x76c>)
 8004370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1ee      	bne.n	8004358 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437e:	2b00      	cmp	r3, #0
 8004380:	f000 8102 	beq.w	8004588 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004384:	4b48      	ldr	r3, [pc, #288]	; (80044a8 <HAL_RCC_OscConfig+0x76c>)
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800438c:	2b18      	cmp	r3, #24
 800438e:	f000 80bd 	beq.w	800450c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	2b02      	cmp	r3, #2
 8004398:	f040 809e 	bne.w	80044d8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800439c:	4b42      	ldr	r3, [pc, #264]	; (80044a8 <HAL_RCC_OscConfig+0x76c>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a41      	ldr	r2, [pc, #260]	; (80044a8 <HAL_RCC_OscConfig+0x76c>)
 80043a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a8:	f7fe fc7e 	bl	8002ca8 <HAL_GetTick>
 80043ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043ae:	e008      	b.n	80043c2 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043b0:	f7fe fc7a 	bl	8002ca8 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e0e3      	b.n	800458a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043c2:	4b39      	ldr	r3, [pc, #228]	; (80044a8 <HAL_RCC_OscConfig+0x76c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1f0      	bne.n	80043b0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043ce:	4b36      	ldr	r3, [pc, #216]	; (80044a8 <HAL_RCC_OscConfig+0x76c>)
 80043d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043d2:	4b37      	ldr	r3, [pc, #220]	; (80044b0 <HAL_RCC_OscConfig+0x774>)
 80043d4:	4013      	ands	r3, r2
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80043de:	0112      	lsls	r2, r2, #4
 80043e0:	430a      	orrs	r2, r1
 80043e2:	4931      	ldr	r1, [pc, #196]	; (80044a8 <HAL_RCC_OscConfig+0x76c>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	628b      	str	r3, [r1, #40]	; 0x28
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ec:	3b01      	subs	r3, #1
 80043ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f6:	3b01      	subs	r3, #1
 80043f8:	025b      	lsls	r3, r3, #9
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	431a      	orrs	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004402:	3b01      	subs	r3, #1
 8004404:	041b      	lsls	r3, r3, #16
 8004406:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800440a:	431a      	orrs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004410:	3b01      	subs	r3, #1
 8004412:	061b      	lsls	r3, r3, #24
 8004414:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004418:	4923      	ldr	r1, [pc, #140]	; (80044a8 <HAL_RCC_OscConfig+0x76c>)
 800441a:	4313      	orrs	r3, r2
 800441c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800441e:	4b22      	ldr	r3, [pc, #136]	; (80044a8 <HAL_RCC_OscConfig+0x76c>)
 8004420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004422:	4a21      	ldr	r2, [pc, #132]	; (80044a8 <HAL_RCC_OscConfig+0x76c>)
 8004424:	f023 0301 	bic.w	r3, r3, #1
 8004428:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800442a:	4b1f      	ldr	r3, [pc, #124]	; (80044a8 <HAL_RCC_OscConfig+0x76c>)
 800442c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800442e:	4b21      	ldr	r3, [pc, #132]	; (80044b4 <HAL_RCC_OscConfig+0x778>)
 8004430:	4013      	ands	r3, r2
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004436:	00d2      	lsls	r2, r2, #3
 8004438:	491b      	ldr	r1, [pc, #108]	; (80044a8 <HAL_RCC_OscConfig+0x76c>)
 800443a:	4313      	orrs	r3, r2
 800443c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800443e:	4b1a      	ldr	r3, [pc, #104]	; (80044a8 <HAL_RCC_OscConfig+0x76c>)
 8004440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004442:	f023 020c 	bic.w	r2, r3, #12
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444a:	4917      	ldr	r1, [pc, #92]	; (80044a8 <HAL_RCC_OscConfig+0x76c>)
 800444c:	4313      	orrs	r3, r2
 800444e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004450:	4b15      	ldr	r3, [pc, #84]	; (80044a8 <HAL_RCC_OscConfig+0x76c>)
 8004452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004454:	f023 0202 	bic.w	r2, r3, #2
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445c:	4912      	ldr	r1, [pc, #72]	; (80044a8 <HAL_RCC_OscConfig+0x76c>)
 800445e:	4313      	orrs	r3, r2
 8004460:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004462:	4b11      	ldr	r3, [pc, #68]	; (80044a8 <HAL_RCC_OscConfig+0x76c>)
 8004464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004466:	4a10      	ldr	r2, [pc, #64]	; (80044a8 <HAL_RCC_OscConfig+0x76c>)
 8004468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800446c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800446e:	4b0e      	ldr	r3, [pc, #56]	; (80044a8 <HAL_RCC_OscConfig+0x76c>)
 8004470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004472:	4a0d      	ldr	r2, [pc, #52]	; (80044a8 <HAL_RCC_OscConfig+0x76c>)
 8004474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004478:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800447a:	4b0b      	ldr	r3, [pc, #44]	; (80044a8 <HAL_RCC_OscConfig+0x76c>)
 800447c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447e:	4a0a      	ldr	r2, [pc, #40]	; (80044a8 <HAL_RCC_OscConfig+0x76c>)
 8004480:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004484:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004486:	4b08      	ldr	r3, [pc, #32]	; (80044a8 <HAL_RCC_OscConfig+0x76c>)
 8004488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448a:	4a07      	ldr	r2, [pc, #28]	; (80044a8 <HAL_RCC_OscConfig+0x76c>)
 800448c:	f043 0301 	orr.w	r3, r3, #1
 8004490:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004492:	4b05      	ldr	r3, [pc, #20]	; (80044a8 <HAL_RCC_OscConfig+0x76c>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a04      	ldr	r2, [pc, #16]	; (80044a8 <HAL_RCC_OscConfig+0x76c>)
 8004498:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800449c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449e:	f7fe fc03 	bl	8002ca8 <HAL_GetTick>
 80044a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80044a4:	e011      	b.n	80044ca <HAL_RCC_OscConfig+0x78e>
 80044a6:	bf00      	nop
 80044a8:	58024400 	.word	0x58024400
 80044ac:	58024800 	.word	0x58024800
 80044b0:	fffffc0c 	.word	0xfffffc0c
 80044b4:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044b8:	f7fe fbf6 	bl	8002ca8 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	2b02      	cmp	r3, #2
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e05f      	b.n	800458a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80044ca:	4b32      	ldr	r3, [pc, #200]	; (8004594 <HAL_RCC_OscConfig+0x858>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d0f0      	beq.n	80044b8 <HAL_RCC_OscConfig+0x77c>
 80044d6:	e057      	b.n	8004588 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044d8:	4b2e      	ldr	r3, [pc, #184]	; (8004594 <HAL_RCC_OscConfig+0x858>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a2d      	ldr	r2, [pc, #180]	; (8004594 <HAL_RCC_OscConfig+0x858>)
 80044de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e4:	f7fe fbe0 	bl	8002ca8 <HAL_GetTick>
 80044e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044ea:	e008      	b.n	80044fe <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044ec:	f7fe fbdc 	bl	8002ca8 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e045      	b.n	800458a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80044fe:	4b25      	ldr	r3, [pc, #148]	; (8004594 <HAL_RCC_OscConfig+0x858>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1f0      	bne.n	80044ec <HAL_RCC_OscConfig+0x7b0>
 800450a:	e03d      	b.n	8004588 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800450c:	4b21      	ldr	r3, [pc, #132]	; (8004594 <HAL_RCC_OscConfig+0x858>)
 800450e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004510:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004512:	4b20      	ldr	r3, [pc, #128]	; (8004594 <HAL_RCC_OscConfig+0x858>)
 8004514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004516:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451c:	2b01      	cmp	r3, #1
 800451e:	d031      	beq.n	8004584 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	f003 0203 	and.w	r2, r3, #3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800452a:	429a      	cmp	r2, r3
 800452c:	d12a      	bne.n	8004584 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	091b      	lsrs	r3, r3, #4
 8004532:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800453a:	429a      	cmp	r2, r3
 800453c:	d122      	bne.n	8004584 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004548:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800454a:	429a      	cmp	r2, r3
 800454c:	d11a      	bne.n	8004584 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	0a5b      	lsrs	r3, r3, #9
 8004552:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800455a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800455c:	429a      	cmp	r2, r3
 800455e:	d111      	bne.n	8004584 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	0c1b      	lsrs	r3, r3, #16
 8004564:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800456c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800456e:	429a      	cmp	r2, r3
 8004570:	d108      	bne.n	8004584 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	0e1b      	lsrs	r3, r3, #24
 8004576:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800457e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004580:	429a      	cmp	r2, r3
 8004582:	d001      	beq.n	8004588 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e000      	b.n	800458a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3730      	adds	r7, #48	; 0x30
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	58024400 	.word	0x58024400

08004598 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d101      	bne.n	80045ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e19c      	b.n	80048e6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045ac:	4b8a      	ldr	r3, [pc, #552]	; (80047d8 <HAL_RCC_ClockConfig+0x240>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 030f 	and.w	r3, r3, #15
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d910      	bls.n	80045dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ba:	4b87      	ldr	r3, [pc, #540]	; (80047d8 <HAL_RCC_ClockConfig+0x240>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f023 020f 	bic.w	r2, r3, #15
 80045c2:	4985      	ldr	r1, [pc, #532]	; (80047d8 <HAL_RCC_ClockConfig+0x240>)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045ca:	4b83      	ldr	r3, [pc, #524]	; (80047d8 <HAL_RCC_ClockConfig+0x240>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 030f 	and.w	r3, r3, #15
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d001      	beq.n	80045dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e184      	b.n	80048e6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0304 	and.w	r3, r3, #4
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d010      	beq.n	800460a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	691a      	ldr	r2, [r3, #16]
 80045ec:	4b7b      	ldr	r3, [pc, #492]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d908      	bls.n	800460a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80045f8:	4b78      	ldr	r3, [pc, #480]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	4975      	ldr	r1, [pc, #468]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 8004606:	4313      	orrs	r3, r2
 8004608:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0308 	and.w	r3, r3, #8
 8004612:	2b00      	cmp	r3, #0
 8004614:	d010      	beq.n	8004638 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	695a      	ldr	r2, [r3, #20]
 800461a:	4b70      	ldr	r3, [pc, #448]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004622:	429a      	cmp	r2, r3
 8004624:	d908      	bls.n	8004638 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004626:	4b6d      	ldr	r3, [pc, #436]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	496a      	ldr	r1, [pc, #424]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 8004634:	4313      	orrs	r3, r2
 8004636:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0310 	and.w	r3, r3, #16
 8004640:	2b00      	cmp	r3, #0
 8004642:	d010      	beq.n	8004666 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	699a      	ldr	r2, [r3, #24]
 8004648:	4b64      	ldr	r3, [pc, #400]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 800464a:	69db      	ldr	r3, [r3, #28]
 800464c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004650:	429a      	cmp	r2, r3
 8004652:	d908      	bls.n	8004666 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004654:	4b61      	ldr	r3, [pc, #388]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 8004656:	69db      	ldr	r3, [r3, #28]
 8004658:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	495e      	ldr	r1, [pc, #376]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 8004662:	4313      	orrs	r3, r2
 8004664:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0320 	and.w	r3, r3, #32
 800466e:	2b00      	cmp	r3, #0
 8004670:	d010      	beq.n	8004694 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	69da      	ldr	r2, [r3, #28]
 8004676:	4b59      	ldr	r3, [pc, #356]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800467e:	429a      	cmp	r2, r3
 8004680:	d908      	bls.n	8004694 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004682:	4b56      	ldr	r3, [pc, #344]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	69db      	ldr	r3, [r3, #28]
 800468e:	4953      	ldr	r1, [pc, #332]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 8004690:	4313      	orrs	r3, r2
 8004692:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d010      	beq.n	80046c2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	68da      	ldr	r2, [r3, #12]
 80046a4:	4b4d      	ldr	r3, [pc, #308]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	f003 030f 	and.w	r3, r3, #15
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d908      	bls.n	80046c2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046b0:	4b4a      	ldr	r3, [pc, #296]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	f023 020f 	bic.w	r2, r3, #15
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	4947      	ldr	r1, [pc, #284]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d055      	beq.n	800477a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80046ce:	4b43      	ldr	r3, [pc, #268]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	4940      	ldr	r1, [pc, #256]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	d107      	bne.n	80046f8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80046e8:	4b3c      	ldr	r3, [pc, #240]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d121      	bne.n	8004738 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e0f6      	b.n	80048e6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	2b03      	cmp	r3, #3
 80046fe:	d107      	bne.n	8004710 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004700:	4b36      	ldr	r3, [pc, #216]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d115      	bne.n	8004738 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e0ea      	b.n	80048e6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d107      	bne.n	8004728 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004718:	4b30      	ldr	r3, [pc, #192]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004720:	2b00      	cmp	r3, #0
 8004722:	d109      	bne.n	8004738 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e0de      	b.n	80048e6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004728:	4b2c      	ldr	r3, [pc, #176]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0304 	and.w	r3, r3, #4
 8004730:	2b00      	cmp	r3, #0
 8004732:	d101      	bne.n	8004738 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e0d6      	b.n	80048e6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004738:	4b28      	ldr	r3, [pc, #160]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	f023 0207 	bic.w	r2, r3, #7
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	4925      	ldr	r1, [pc, #148]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 8004746:	4313      	orrs	r3, r2
 8004748:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800474a:	f7fe faad 	bl	8002ca8 <HAL_GetTick>
 800474e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004750:	e00a      	b.n	8004768 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004752:	f7fe faa9 	bl	8002ca8 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004760:	4293      	cmp	r3, r2
 8004762:	d901      	bls.n	8004768 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e0be      	b.n	80048e6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004768:	4b1c      	ldr	r3, [pc, #112]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	00db      	lsls	r3, r3, #3
 8004776:	429a      	cmp	r2, r3
 8004778:	d1eb      	bne.n	8004752 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b00      	cmp	r3, #0
 8004784:	d010      	beq.n	80047a8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	68da      	ldr	r2, [r3, #12]
 800478a:	4b14      	ldr	r3, [pc, #80]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	f003 030f 	and.w	r3, r3, #15
 8004792:	429a      	cmp	r2, r3
 8004794:	d208      	bcs.n	80047a8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004796:	4b11      	ldr	r3, [pc, #68]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	f023 020f 	bic.w	r2, r3, #15
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	68db      	ldr	r3, [r3, #12]
 80047a2:	490e      	ldr	r1, [pc, #56]	; (80047dc <HAL_RCC_ClockConfig+0x244>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047a8:	4b0b      	ldr	r3, [pc, #44]	; (80047d8 <HAL_RCC_ClockConfig+0x240>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 030f 	and.w	r3, r3, #15
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d214      	bcs.n	80047e0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047b6:	4b08      	ldr	r3, [pc, #32]	; (80047d8 <HAL_RCC_ClockConfig+0x240>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f023 020f 	bic.w	r2, r3, #15
 80047be:	4906      	ldr	r1, [pc, #24]	; (80047d8 <HAL_RCC_ClockConfig+0x240>)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047c6:	4b04      	ldr	r3, [pc, #16]	; (80047d8 <HAL_RCC_ClockConfig+0x240>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 030f 	and.w	r3, r3, #15
 80047ce:	683a      	ldr	r2, [r7, #0]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d005      	beq.n	80047e0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e086      	b.n	80048e6 <HAL_RCC_ClockConfig+0x34e>
 80047d8:	52002000 	.word	0x52002000
 80047dc:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d010      	beq.n	800480e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	691a      	ldr	r2, [r3, #16]
 80047f0:	4b3f      	ldr	r3, [pc, #252]	; (80048f0 <HAL_RCC_ClockConfig+0x358>)
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d208      	bcs.n	800480e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80047fc:	4b3c      	ldr	r3, [pc, #240]	; (80048f0 <HAL_RCC_ClockConfig+0x358>)
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	4939      	ldr	r1, [pc, #228]	; (80048f0 <HAL_RCC_ClockConfig+0x358>)
 800480a:	4313      	orrs	r3, r2
 800480c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0308 	and.w	r3, r3, #8
 8004816:	2b00      	cmp	r3, #0
 8004818:	d010      	beq.n	800483c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	695a      	ldr	r2, [r3, #20]
 800481e:	4b34      	ldr	r3, [pc, #208]	; (80048f0 <HAL_RCC_ClockConfig+0x358>)
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004826:	429a      	cmp	r2, r3
 8004828:	d208      	bcs.n	800483c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800482a:	4b31      	ldr	r3, [pc, #196]	; (80048f0 <HAL_RCC_ClockConfig+0x358>)
 800482c:	69db      	ldr	r3, [r3, #28]
 800482e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	492e      	ldr	r1, [pc, #184]	; (80048f0 <HAL_RCC_ClockConfig+0x358>)
 8004838:	4313      	orrs	r3, r2
 800483a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0310 	and.w	r3, r3, #16
 8004844:	2b00      	cmp	r3, #0
 8004846:	d010      	beq.n	800486a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	699a      	ldr	r2, [r3, #24]
 800484c:	4b28      	ldr	r3, [pc, #160]	; (80048f0 <HAL_RCC_ClockConfig+0x358>)
 800484e:	69db      	ldr	r3, [r3, #28]
 8004850:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004854:	429a      	cmp	r2, r3
 8004856:	d208      	bcs.n	800486a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004858:	4b25      	ldr	r3, [pc, #148]	; (80048f0 <HAL_RCC_ClockConfig+0x358>)
 800485a:	69db      	ldr	r3, [r3, #28]
 800485c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	4922      	ldr	r1, [pc, #136]	; (80048f0 <HAL_RCC_ClockConfig+0x358>)
 8004866:	4313      	orrs	r3, r2
 8004868:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0320 	and.w	r3, r3, #32
 8004872:	2b00      	cmp	r3, #0
 8004874:	d010      	beq.n	8004898 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69da      	ldr	r2, [r3, #28]
 800487a:	4b1d      	ldr	r3, [pc, #116]	; (80048f0 <HAL_RCC_ClockConfig+0x358>)
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004882:	429a      	cmp	r2, r3
 8004884:	d208      	bcs.n	8004898 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004886:	4b1a      	ldr	r3, [pc, #104]	; (80048f0 <HAL_RCC_ClockConfig+0x358>)
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	4917      	ldr	r1, [pc, #92]	; (80048f0 <HAL_RCC_ClockConfig+0x358>)
 8004894:	4313      	orrs	r3, r2
 8004896:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004898:	f000 f834 	bl	8004904 <HAL_RCC_GetSysClockFreq>
 800489c:	4602      	mov	r2, r0
 800489e:	4b14      	ldr	r3, [pc, #80]	; (80048f0 <HAL_RCC_ClockConfig+0x358>)
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	0a1b      	lsrs	r3, r3, #8
 80048a4:	f003 030f 	and.w	r3, r3, #15
 80048a8:	4912      	ldr	r1, [pc, #72]	; (80048f4 <HAL_RCC_ClockConfig+0x35c>)
 80048aa:	5ccb      	ldrb	r3, [r1, r3]
 80048ac:	f003 031f 	and.w	r3, r3, #31
 80048b0:	fa22 f303 	lsr.w	r3, r2, r3
 80048b4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80048b6:	4b0e      	ldr	r3, [pc, #56]	; (80048f0 <HAL_RCC_ClockConfig+0x358>)
 80048b8:	699b      	ldr	r3, [r3, #24]
 80048ba:	f003 030f 	and.w	r3, r3, #15
 80048be:	4a0d      	ldr	r2, [pc, #52]	; (80048f4 <HAL_RCC_ClockConfig+0x35c>)
 80048c0:	5cd3      	ldrb	r3, [r2, r3]
 80048c2:	f003 031f 	and.w	r3, r3, #31
 80048c6:	693a      	ldr	r2, [r7, #16]
 80048c8:	fa22 f303 	lsr.w	r3, r2, r3
 80048cc:	4a0a      	ldr	r2, [pc, #40]	; (80048f8 <HAL_RCC_ClockConfig+0x360>)
 80048ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80048d0:	4a0a      	ldr	r2, [pc, #40]	; (80048fc <HAL_RCC_ClockConfig+0x364>)
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80048d6:	4b0a      	ldr	r3, [pc, #40]	; (8004900 <HAL_RCC_ClockConfig+0x368>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4618      	mov	r0, r3
 80048dc:	f7fe f99a 	bl	8002c14 <HAL_InitTick>
 80048e0:	4603      	mov	r3, r0
 80048e2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80048e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3718      	adds	r7, #24
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	58024400 	.word	0x58024400
 80048f4:	0800b450 	.word	0x0800b450
 80048f8:	24000004 	.word	0x24000004
 80048fc:	24000000 	.word	0x24000000
 8004900:	24000030 	.word	0x24000030

08004904 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004904:	b480      	push	{r7}
 8004906:	b089      	sub	sp, #36	; 0x24
 8004908:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800490a:	4bb3      	ldr	r3, [pc, #716]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800490c:	691b      	ldr	r3, [r3, #16]
 800490e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004912:	2b18      	cmp	r3, #24
 8004914:	f200 8155 	bhi.w	8004bc2 <HAL_RCC_GetSysClockFreq+0x2be>
 8004918:	a201      	add	r2, pc, #4	; (adr r2, 8004920 <HAL_RCC_GetSysClockFreq+0x1c>)
 800491a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800491e:	bf00      	nop
 8004920:	08004985 	.word	0x08004985
 8004924:	08004bc3 	.word	0x08004bc3
 8004928:	08004bc3 	.word	0x08004bc3
 800492c:	08004bc3 	.word	0x08004bc3
 8004930:	08004bc3 	.word	0x08004bc3
 8004934:	08004bc3 	.word	0x08004bc3
 8004938:	08004bc3 	.word	0x08004bc3
 800493c:	08004bc3 	.word	0x08004bc3
 8004940:	080049ab 	.word	0x080049ab
 8004944:	08004bc3 	.word	0x08004bc3
 8004948:	08004bc3 	.word	0x08004bc3
 800494c:	08004bc3 	.word	0x08004bc3
 8004950:	08004bc3 	.word	0x08004bc3
 8004954:	08004bc3 	.word	0x08004bc3
 8004958:	08004bc3 	.word	0x08004bc3
 800495c:	08004bc3 	.word	0x08004bc3
 8004960:	080049b1 	.word	0x080049b1
 8004964:	08004bc3 	.word	0x08004bc3
 8004968:	08004bc3 	.word	0x08004bc3
 800496c:	08004bc3 	.word	0x08004bc3
 8004970:	08004bc3 	.word	0x08004bc3
 8004974:	08004bc3 	.word	0x08004bc3
 8004978:	08004bc3 	.word	0x08004bc3
 800497c:	08004bc3 	.word	0x08004bc3
 8004980:	080049b7 	.word	0x080049b7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004984:	4b94      	ldr	r3, [pc, #592]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0320 	and.w	r3, r3, #32
 800498c:	2b00      	cmp	r3, #0
 800498e:	d009      	beq.n	80049a4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004990:	4b91      	ldr	r3, [pc, #580]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	08db      	lsrs	r3, r3, #3
 8004996:	f003 0303 	and.w	r3, r3, #3
 800499a:	4a90      	ldr	r2, [pc, #576]	; (8004bdc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800499c:	fa22 f303 	lsr.w	r3, r2, r3
 80049a0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80049a2:	e111      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80049a4:	4b8d      	ldr	r3, [pc, #564]	; (8004bdc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80049a6:	61bb      	str	r3, [r7, #24]
    break;
 80049a8:	e10e      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80049aa:	4b8d      	ldr	r3, [pc, #564]	; (8004be0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80049ac:	61bb      	str	r3, [r7, #24]
    break;
 80049ae:	e10b      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80049b0:	4b8c      	ldr	r3, [pc, #560]	; (8004be4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80049b2:	61bb      	str	r3, [r7, #24]
    break;
 80049b4:	e108      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049b6:	4b88      	ldr	r3, [pc, #544]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80049c0:	4b85      	ldr	r3, [pc, #532]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c4:	091b      	lsrs	r3, r3, #4
 80049c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049ca:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80049cc:	4b82      	ldr	r3, [pc, #520]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80049d6:	4b80      	ldr	r3, [pc, #512]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80049d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049da:	08db      	lsrs	r3, r3, #3
 80049dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	fb02 f303 	mul.w	r3, r2, r3
 80049e6:	ee07 3a90 	vmov	s15, r3
 80049ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ee:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 80e1 	beq.w	8004bbc <HAL_RCC_GetSysClockFreq+0x2b8>
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	f000 8083 	beq.w	8004b08 <HAL_RCC_GetSysClockFreq+0x204>
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	f200 80a1 	bhi.w	8004b4c <HAL_RCC_GetSysClockFreq+0x248>
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d003      	beq.n	8004a18 <HAL_RCC_GetSysClockFreq+0x114>
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d056      	beq.n	8004ac4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004a16:	e099      	b.n	8004b4c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a18:	4b6f      	ldr	r3, [pc, #444]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0320 	and.w	r3, r3, #32
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d02d      	beq.n	8004a80 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a24:	4b6c      	ldr	r3, [pc, #432]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	08db      	lsrs	r3, r3, #3
 8004a2a:	f003 0303 	and.w	r3, r3, #3
 8004a2e:	4a6b      	ldr	r2, [pc, #428]	; (8004bdc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004a30:	fa22 f303 	lsr.w	r3, r2, r3
 8004a34:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	ee07 3a90 	vmov	s15, r3
 8004a3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	ee07 3a90 	vmov	s15, r3
 8004a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a4e:	4b62      	ldr	r3, [pc, #392]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a56:	ee07 3a90 	vmov	s15, r3
 8004a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a62:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004be8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004a7e:	e087      	b.n	8004b90 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	ee07 3a90 	vmov	s15, r3
 8004a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a8a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004bec <HAL_RCC_GetSysClockFreq+0x2e8>
 8004a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a92:	4b51      	ldr	r3, [pc, #324]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a9a:	ee07 3a90 	vmov	s15, r3
 8004a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8004aa6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004be8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ab2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004abe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ac2:	e065      	b.n	8004b90 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	ee07 3a90 	vmov	s15, r3
 8004aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ace:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004bf0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ad6:	4b40      	ldr	r3, [pc, #256]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ade:	ee07 3a90 	vmov	s15, r3
 8004ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ae6:	ed97 6a02 	vldr	s12, [r7, #8]
 8004aea:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004be8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004af6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b06:	e043      	b.n	8004b90 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	ee07 3a90 	vmov	s15, r3
 8004b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b12:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004bf4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b1a:	4b2f      	ldr	r3, [pc, #188]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b22:	ee07 3a90 	vmov	s15, r3
 8004b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b2e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004be8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b4a:	e021      	b.n	8004b90 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	ee07 3a90 	vmov	s15, r3
 8004b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b56:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004bf0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b5e:	4b1e      	ldr	r3, [pc, #120]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b66:	ee07 3a90 	vmov	s15, r3
 8004b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004b72:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004be8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b8e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004b90:	4b11      	ldr	r3, [pc, #68]	; (8004bd8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b94:	0a5b      	lsrs	r3, r3, #9
 8004b96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	ee07 3a90 	vmov	s15, r3
 8004ba4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004ba8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bb4:	ee17 3a90 	vmov	r3, s15
 8004bb8:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004bba:	e005      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	61bb      	str	r3, [r7, #24]
    break;
 8004bc0:	e002      	b.n	8004bc8 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004bc2:	4b07      	ldr	r3, [pc, #28]	; (8004be0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004bc4:	61bb      	str	r3, [r7, #24]
    break;
 8004bc6:	bf00      	nop
  }

  return sysclockfreq;
 8004bc8:	69bb      	ldr	r3, [r7, #24]
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3724      	adds	r7, #36	; 0x24
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	58024400 	.word	0x58024400
 8004bdc:	03d09000 	.word	0x03d09000
 8004be0:	003d0900 	.word	0x003d0900
 8004be4:	007a1200 	.word	0x007a1200
 8004be8:	46000000 	.word	0x46000000
 8004bec:	4c742400 	.word	0x4c742400
 8004bf0:	4a742400 	.word	0x4a742400
 8004bf4:	4af42400 	.word	0x4af42400

08004bf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004bfe:	f7ff fe81 	bl	8004904 <HAL_RCC_GetSysClockFreq>
 8004c02:	4602      	mov	r2, r0
 8004c04:	4b10      	ldr	r3, [pc, #64]	; (8004c48 <HAL_RCC_GetHCLKFreq+0x50>)
 8004c06:	699b      	ldr	r3, [r3, #24]
 8004c08:	0a1b      	lsrs	r3, r3, #8
 8004c0a:	f003 030f 	and.w	r3, r3, #15
 8004c0e:	490f      	ldr	r1, [pc, #60]	; (8004c4c <HAL_RCC_GetHCLKFreq+0x54>)
 8004c10:	5ccb      	ldrb	r3, [r1, r3]
 8004c12:	f003 031f 	and.w	r3, r3, #31
 8004c16:	fa22 f303 	lsr.w	r3, r2, r3
 8004c1a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c1c:	4b0a      	ldr	r3, [pc, #40]	; (8004c48 <HAL_RCC_GetHCLKFreq+0x50>)
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	f003 030f 	and.w	r3, r3, #15
 8004c24:	4a09      	ldr	r2, [pc, #36]	; (8004c4c <HAL_RCC_GetHCLKFreq+0x54>)
 8004c26:	5cd3      	ldrb	r3, [r2, r3]
 8004c28:	f003 031f 	and.w	r3, r3, #31
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c32:	4a07      	ldr	r2, [pc, #28]	; (8004c50 <HAL_RCC_GetHCLKFreq+0x58>)
 8004c34:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004c36:	4a07      	ldr	r2, [pc, #28]	; (8004c54 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004c3c:	4b04      	ldr	r3, [pc, #16]	; (8004c50 <HAL_RCC_GetHCLKFreq+0x58>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3708      	adds	r7, #8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	58024400 	.word	0x58024400
 8004c4c:	0800b450 	.word	0x0800b450
 8004c50:	24000004 	.word	0x24000004
 8004c54:	24000000 	.word	0x24000000

08004c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004c5c:	f7ff ffcc 	bl	8004bf8 <HAL_RCC_GetHCLKFreq>
 8004c60:	4602      	mov	r2, r0
 8004c62:	4b06      	ldr	r3, [pc, #24]	; (8004c7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	091b      	lsrs	r3, r3, #4
 8004c68:	f003 0307 	and.w	r3, r3, #7
 8004c6c:	4904      	ldr	r1, [pc, #16]	; (8004c80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c6e:	5ccb      	ldrb	r3, [r1, r3]
 8004c70:	f003 031f 	and.w	r3, r3, #31
 8004c74:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	58024400 	.word	0x58024400
 8004c80:	0800b450 	.word	0x0800b450

08004c84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004c88:	f7ff ffb6 	bl	8004bf8 <HAL_RCC_GetHCLKFreq>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	4b06      	ldr	r3, [pc, #24]	; (8004ca8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c90:	69db      	ldr	r3, [r3, #28]
 8004c92:	0a1b      	lsrs	r3, r3, #8
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	4904      	ldr	r1, [pc, #16]	; (8004cac <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c9a:	5ccb      	ldrb	r3, [r1, r3]
 8004c9c:	f003 031f 	and.w	r3, r3, #31
 8004ca0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	58024400 	.word	0x58024400
 8004cac:	0800b450 	.word	0x0800b450

08004cb0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004cb8:	2300      	movs	r3, #0
 8004cba:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d03f      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cd0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004cd4:	d02a      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004cd6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004cda:	d824      	bhi.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004cdc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ce0:	d018      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004ce2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ce6:	d81e      	bhi.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004cec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cf0:	d007      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004cf2:	e018      	b.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cf4:	4ba3      	ldr	r3, [pc, #652]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf8:	4aa2      	ldr	r2, [pc, #648]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004cfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cfe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004d00:	e015      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	3304      	adds	r3, #4
 8004d06:	2102      	movs	r1, #2
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f001 f9d5 	bl	80060b8 <RCCEx_PLL2_Config>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004d12:	e00c      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	3324      	adds	r3, #36	; 0x24
 8004d18:	2102      	movs	r1, #2
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f001 fa7e 	bl	800621c <RCCEx_PLL3_Config>
 8004d20:	4603      	mov	r3, r0
 8004d22:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004d24:	e003      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	75fb      	strb	r3, [r7, #23]
      break;
 8004d2a:	e000      	b.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004d2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d2e:	7dfb      	ldrb	r3, [r7, #23]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d109      	bne.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004d34:	4b93      	ldr	r3, [pc, #588]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d40:	4990      	ldr	r1, [pc, #576]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004d42:	4313      	orrs	r3, r2
 8004d44:	650b      	str	r3, [r1, #80]	; 0x50
 8004d46:	e001      	b.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d48:	7dfb      	ldrb	r3, [r7, #23]
 8004d4a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d03d      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d5c:	2b04      	cmp	r3, #4
 8004d5e:	d826      	bhi.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004d60:	a201      	add	r2, pc, #4	; (adr r2, 8004d68 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8004d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d66:	bf00      	nop
 8004d68:	08004d7d 	.word	0x08004d7d
 8004d6c:	08004d8b 	.word	0x08004d8b
 8004d70:	08004d9d 	.word	0x08004d9d
 8004d74:	08004db5 	.word	0x08004db5
 8004d78:	08004db5 	.word	0x08004db5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d7c:	4b81      	ldr	r3, [pc, #516]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d80:	4a80      	ldr	r2, [pc, #512]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004d82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004d88:	e015      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	3304      	adds	r3, #4
 8004d8e:	2100      	movs	r1, #0
 8004d90:	4618      	mov	r0, r3
 8004d92:	f001 f991 	bl	80060b8 <RCCEx_PLL2_Config>
 8004d96:	4603      	mov	r3, r0
 8004d98:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004d9a:	e00c      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	3324      	adds	r3, #36	; 0x24
 8004da0:	2100      	movs	r1, #0
 8004da2:	4618      	mov	r0, r3
 8004da4:	f001 fa3a 	bl	800621c <RCCEx_PLL3_Config>
 8004da8:	4603      	mov	r3, r0
 8004daa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004dac:	e003      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	75fb      	strb	r3, [r7, #23]
      break;
 8004db2:	e000      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8004db4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004db6:	7dfb      	ldrb	r3, [r7, #23]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d109      	bne.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004dbc:	4b71      	ldr	r3, [pc, #452]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dc0:	f023 0207 	bic.w	r2, r3, #7
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc8:	496e      	ldr	r1, [pc, #440]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	650b      	str	r3, [r1, #80]	; 0x50
 8004dce:	e001      	b.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dd0:	7dfb      	ldrb	r3, [r7, #23]
 8004dd2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d042      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004de8:	d02b      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004dea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dee:	d825      	bhi.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004df0:	2bc0      	cmp	r3, #192	; 0xc0
 8004df2:	d028      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004df4:	2bc0      	cmp	r3, #192	; 0xc0
 8004df6:	d821      	bhi.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004df8:	2b80      	cmp	r3, #128	; 0x80
 8004dfa:	d016      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004dfc:	2b80      	cmp	r3, #128	; 0x80
 8004dfe:	d81d      	bhi.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d002      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004e04:	2b40      	cmp	r3, #64	; 0x40
 8004e06:	d007      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004e08:	e018      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e0a:	4b5e      	ldr	r3, [pc, #376]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0e:	4a5d      	ldr	r2, [pc, #372]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004e16:	e017      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	3304      	adds	r3, #4
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f001 f94a 	bl	80060b8 <RCCEx_PLL2_Config>
 8004e24:	4603      	mov	r3, r0
 8004e26:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004e28:	e00e      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	3324      	adds	r3, #36	; 0x24
 8004e2e:	2100      	movs	r1, #0
 8004e30:	4618      	mov	r0, r3
 8004e32:	f001 f9f3 	bl	800621c <RCCEx_PLL3_Config>
 8004e36:	4603      	mov	r3, r0
 8004e38:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004e3a:	e005      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	75fb      	strb	r3, [r7, #23]
      break;
 8004e40:	e002      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004e42:	bf00      	nop
 8004e44:	e000      	b.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004e46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e48:	7dfb      	ldrb	r3, [r7, #23]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d109      	bne.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004e4e:	4b4d      	ldr	r3, [pc, #308]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e52:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e5a:	494a      	ldr	r1, [pc, #296]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	650b      	str	r3, [r1, #80]	; 0x50
 8004e60:	e001      	b.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e62:	7dfb      	ldrb	r3, [r7, #23]
 8004e64:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d049      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004e78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e7c:	d030      	beq.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004e7e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e82:	d82a      	bhi.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004e84:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004e88:	d02c      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8004e8a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004e8e:	d824      	bhi.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004e90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e94:	d018      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004e96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e9a:	d81e      	bhi.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d003      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8004ea0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ea4:	d007      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004ea6:	e018      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ea8:	4b36      	ldr	r3, [pc, #216]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eac:	4a35      	ldr	r2, [pc, #212]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004eae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004eb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004eb4:	e017      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	3304      	adds	r3, #4
 8004eba:	2100      	movs	r1, #0
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f001 f8fb 	bl	80060b8 <RCCEx_PLL2_Config>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004ec6:	e00e      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	3324      	adds	r3, #36	; 0x24
 8004ecc:	2100      	movs	r1, #0
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f001 f9a4 	bl	800621c <RCCEx_PLL3_Config>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ed8:	e005      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	75fb      	strb	r3, [r7, #23]
      break;
 8004ede:	e002      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004ee0:	bf00      	nop
 8004ee2:	e000      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004ee4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ee6:	7dfb      	ldrb	r3, [r7, #23]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10a      	bne.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004eec:	4b25      	ldr	r3, [pc, #148]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ef0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004efa:	4922      	ldr	r1, [pc, #136]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	658b      	str	r3, [r1, #88]	; 0x58
 8004f00:	e001      	b.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f02:	7dfb      	ldrb	r3, [r7, #23]
 8004f04:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d04b      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004f18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f1c:	d030      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8004f1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f22:	d82a      	bhi.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004f24:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004f28:	d02e      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8004f2a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004f2e:	d824      	bhi.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004f30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f34:	d018      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004f36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f3a:	d81e      	bhi.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d003      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004f40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f44:	d007      	beq.n	8004f56 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004f46:	e018      	b.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f48:	4b0e      	ldr	r3, [pc, #56]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4c:	4a0d      	ldr	r2, [pc, #52]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004f4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004f54:	e019      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	3304      	adds	r3, #4
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	f001 f8ab 	bl	80060b8 <RCCEx_PLL2_Config>
 8004f62:	4603      	mov	r3, r0
 8004f64:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004f66:	e010      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	3324      	adds	r3, #36	; 0x24
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f001 f954 	bl	800621c <RCCEx_PLL3_Config>
 8004f74:	4603      	mov	r3, r0
 8004f76:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004f78:	e007      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	75fb      	strb	r3, [r7, #23]
      break;
 8004f7e:	e004      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8004f80:	bf00      	nop
 8004f82:	e002      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004f84:	58024400 	.word	0x58024400
      break;
 8004f88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f8a:	7dfb      	ldrb	r3, [r7, #23]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d10a      	bne.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004f90:	4b99      	ldr	r3, [pc, #612]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f94:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004f9e:	4996      	ldr	r1, [pc, #600]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	658b      	str	r3, [r1, #88]	; 0x58
 8004fa4:	e001      	b.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fa6:	7dfb      	ldrb	r3, [r7, #23]
 8004fa8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d032      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fba:	2b30      	cmp	r3, #48	; 0x30
 8004fbc:	d01c      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8004fbe:	2b30      	cmp	r3, #48	; 0x30
 8004fc0:	d817      	bhi.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004fc2:	2b20      	cmp	r3, #32
 8004fc4:	d00c      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8004fc6:	2b20      	cmp	r3, #32
 8004fc8:	d813      	bhi.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d016      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8004fce:	2b10      	cmp	r3, #16
 8004fd0:	d10f      	bne.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004fd2:	4b89      	ldr	r3, [pc, #548]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd6:	4a88      	ldr	r2, [pc, #544]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004fd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fdc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004fde:	e00e      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	3304      	adds	r3, #4
 8004fe4:	2102      	movs	r1, #2
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f001 f866 	bl	80060b8 <RCCEx_PLL2_Config>
 8004fec:	4603      	mov	r3, r0
 8004fee:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004ff0:	e005      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	75fb      	strb	r3, [r7, #23]
      break;
 8004ff6:	e002      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004ff8:	bf00      	nop
 8004ffa:	e000      	b.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8004ffc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ffe:	7dfb      	ldrb	r3, [r7, #23]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d109      	bne.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005004:	4b7c      	ldr	r3, [pc, #496]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005008:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005010:	4979      	ldr	r1, [pc, #484]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005012:	4313      	orrs	r3, r2
 8005014:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005016:	e001      	b.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005018:	7dfb      	ldrb	r3, [r7, #23]
 800501a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d047      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800502c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005030:	d030      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005032:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005036:	d82a      	bhi.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005038:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800503c:	d02c      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800503e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005042:	d824      	bhi.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005044:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005048:	d018      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800504a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800504e:	d81e      	bhi.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005050:	2b00      	cmp	r3, #0
 8005052:	d003      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005054:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005058:	d007      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800505a:	e018      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800505c:	4b66      	ldr	r3, [pc, #408]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800505e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005060:	4a65      	ldr	r2, [pc, #404]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005062:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005066:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005068:	e017      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	3304      	adds	r3, #4
 800506e:	2100      	movs	r1, #0
 8005070:	4618      	mov	r0, r3
 8005072:	f001 f821 	bl	80060b8 <RCCEx_PLL2_Config>
 8005076:	4603      	mov	r3, r0
 8005078:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800507a:	e00e      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	3324      	adds	r3, #36	; 0x24
 8005080:	2100      	movs	r1, #0
 8005082:	4618      	mov	r0, r3
 8005084:	f001 f8ca 	bl	800621c <RCCEx_PLL3_Config>
 8005088:	4603      	mov	r3, r0
 800508a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800508c:	e005      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	75fb      	strb	r3, [r7, #23]
      break;
 8005092:	e002      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005094:	bf00      	nop
 8005096:	e000      	b.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005098:	bf00      	nop
    }

    if(ret == HAL_OK)
 800509a:	7dfb      	ldrb	r3, [r7, #23]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d109      	bne.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80050a0:	4b55      	ldr	r3, [pc, #340]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80050a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050a4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050ac:	4952      	ldr	r1, [pc, #328]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	650b      	str	r3, [r1, #80]	; 0x50
 80050b2:	e001      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050b4:	7dfb      	ldrb	r3, [r7, #23]
 80050b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d049      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050cc:	d02e      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80050ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050d2:	d828      	bhi.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80050d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80050d8:	d02a      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80050da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80050de:	d822      	bhi.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80050e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80050e4:	d026      	beq.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x484>
 80050e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80050ea:	d81c      	bhi.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80050ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050f0:	d010      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x464>
 80050f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050f6:	d816      	bhi.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x476>
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d01d      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80050fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005100:	d111      	bne.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	3304      	adds	r3, #4
 8005106:	2101      	movs	r1, #1
 8005108:	4618      	mov	r0, r3
 800510a:	f000 ffd5 	bl	80060b8 <RCCEx_PLL2_Config>
 800510e:	4603      	mov	r3, r0
 8005110:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005112:	e012      	b.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	3324      	adds	r3, #36	; 0x24
 8005118:	2101      	movs	r1, #1
 800511a:	4618      	mov	r0, r3
 800511c:	f001 f87e 	bl	800621c <RCCEx_PLL3_Config>
 8005120:	4603      	mov	r3, r0
 8005122:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005124:	e009      	b.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	75fb      	strb	r3, [r7, #23]
      break;
 800512a:	e006      	b.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800512c:	bf00      	nop
 800512e:	e004      	b.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005130:	bf00      	nop
 8005132:	e002      	b.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005134:	bf00      	nop
 8005136:	e000      	b.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005138:	bf00      	nop
    }

    if(ret == HAL_OK)
 800513a:	7dfb      	ldrb	r3, [r7, #23]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d109      	bne.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005140:	4b2d      	ldr	r3, [pc, #180]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005144:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800514c:	492a      	ldr	r1, [pc, #168]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800514e:	4313      	orrs	r3, r2
 8005150:	650b      	str	r3, [r1, #80]	; 0x50
 8005152:	e001      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005154:	7dfb      	ldrb	r3, [r7, #23]
 8005156:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d04d      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800516a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800516e:	d02e      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8005170:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005174:	d828      	bhi.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800517a:	d02a      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800517c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005180:	d822      	bhi.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005182:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005186:	d026      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8005188:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800518c:	d81c      	bhi.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800518e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005192:	d010      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005194:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005198:	d816      	bhi.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800519a:	2b00      	cmp	r3, #0
 800519c:	d01d      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800519e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051a2:	d111      	bne.n	80051c8 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	3304      	adds	r3, #4
 80051a8:	2101      	movs	r1, #1
 80051aa:	4618      	mov	r0, r3
 80051ac:	f000 ff84 	bl	80060b8 <RCCEx_PLL2_Config>
 80051b0:	4603      	mov	r3, r0
 80051b2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80051b4:	e012      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	3324      	adds	r3, #36	; 0x24
 80051ba:	2101      	movs	r1, #1
 80051bc:	4618      	mov	r0, r3
 80051be:	f001 f82d 	bl	800621c <RCCEx_PLL3_Config>
 80051c2:	4603      	mov	r3, r0
 80051c4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80051c6:	e009      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	75fb      	strb	r3, [r7, #23]
      break;
 80051cc:	e006      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80051ce:	bf00      	nop
 80051d0:	e004      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80051d2:	bf00      	nop
 80051d4:	e002      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80051d6:	bf00      	nop
 80051d8:	e000      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80051da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051dc:	7dfb      	ldrb	r3, [r7, #23]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d10c      	bne.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80051e2:	4b05      	ldr	r3, [pc, #20]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80051e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051e6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80051f0:	4901      	ldr	r1, [pc, #4]	; (80051f8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	658b      	str	r3, [r1, #88]	; 0x58
 80051f6:	e003      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80051f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051fc:	7dfb      	ldrb	r3, [r7, #23]
 80051fe:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d02f      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005210:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005214:	d00e      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8005216:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800521a:	d814      	bhi.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800521c:	2b00      	cmp	r3, #0
 800521e:	d015      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8005220:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005224:	d10f      	bne.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005226:	4baf      	ldr	r3, [pc, #700]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522a:	4aae      	ldr	r2, [pc, #696]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800522c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005230:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005232:	e00c      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	3304      	adds	r3, #4
 8005238:	2101      	movs	r1, #1
 800523a:	4618      	mov	r0, r3
 800523c:	f000 ff3c 	bl	80060b8 <RCCEx_PLL2_Config>
 8005240:	4603      	mov	r3, r0
 8005242:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005244:	e003      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	75fb      	strb	r3, [r7, #23]
      break;
 800524a:	e000      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800524c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800524e:	7dfb      	ldrb	r3, [r7, #23]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d109      	bne.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005254:	4ba3      	ldr	r3, [pc, #652]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005258:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005260:	49a0      	ldr	r1, [pc, #640]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005262:	4313      	orrs	r3, r2
 8005264:	650b      	str	r3, [r1, #80]	; 0x50
 8005266:	e001      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005268:	7dfb      	ldrb	r3, [r7, #23]
 800526a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d032      	beq.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527c:	2b03      	cmp	r3, #3
 800527e:	d81b      	bhi.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005280:	a201      	add	r2, pc, #4	; (adr r2, 8005288 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8005282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005286:	bf00      	nop
 8005288:	080052bf 	.word	0x080052bf
 800528c:	08005299 	.word	0x08005299
 8005290:	080052a7 	.word	0x080052a7
 8005294:	080052bf 	.word	0x080052bf
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005298:	4b92      	ldr	r3, [pc, #584]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800529a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800529c:	4a91      	ldr	r2, [pc, #580]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800529e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80052a4:	e00c      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	3304      	adds	r3, #4
 80052aa:	2102      	movs	r1, #2
 80052ac:	4618      	mov	r0, r3
 80052ae:	f000 ff03 	bl	80060b8 <RCCEx_PLL2_Config>
 80052b2:	4603      	mov	r3, r0
 80052b4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80052b6:	e003      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	75fb      	strb	r3, [r7, #23]
      break;
 80052bc:	e000      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80052be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052c0:	7dfb      	ldrb	r3, [r7, #23]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d109      	bne.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80052c6:	4b87      	ldr	r3, [pc, #540]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80052c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ca:	f023 0203 	bic.w	r2, r3, #3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d2:	4984      	ldr	r1, [pc, #528]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80052d4:	4313      	orrs	r3, r2
 80052d6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80052d8:	e001      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052da:	7dfb      	ldrb	r3, [r7, #23]
 80052dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	f000 8086 	beq.w	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052ec:	4b7e      	ldr	r3, [pc, #504]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a7d      	ldr	r2, [pc, #500]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80052f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052f8:	f7fd fcd6 	bl	8002ca8 <HAL_GetTick>
 80052fc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052fe:	e009      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005300:	f7fd fcd2 	bl	8002ca8 <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	2b64      	cmp	r3, #100	; 0x64
 800530c:	d902      	bls.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	75fb      	strb	r3, [r7, #23]
        break;
 8005312:	e005      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005314:	4b74      	ldr	r3, [pc, #464]	; (80054e8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800531c:	2b00      	cmp	r3, #0
 800531e:	d0ef      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8005320:	7dfb      	ldrb	r3, [r7, #23]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d166      	bne.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005326:	4b6f      	ldr	r3, [pc, #444]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005328:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005330:	4053      	eors	r3, r2
 8005332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005336:	2b00      	cmp	r3, #0
 8005338:	d013      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800533a:	4b6a      	ldr	r3, [pc, #424]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800533c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800533e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005342:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005344:	4b67      	ldr	r3, [pc, #412]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005348:	4a66      	ldr	r2, [pc, #408]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800534a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800534e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005350:	4b64      	ldr	r3, [pc, #400]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005354:	4a63      	ldr	r2, [pc, #396]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005356:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800535a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800535c:	4a61      	ldr	r2, [pc, #388]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005368:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800536c:	d115      	bne.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800536e:	f7fd fc9b 	bl	8002ca8 <HAL_GetTick>
 8005372:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005374:	e00b      	b.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005376:	f7fd fc97 	bl	8002ca8 <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	f241 3288 	movw	r2, #5000	; 0x1388
 8005384:	4293      	cmp	r3, r2
 8005386:	d902      	bls.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005388:	2303      	movs	r3, #3
 800538a:	75fb      	strb	r3, [r7, #23]
            break;
 800538c:	e005      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800538e:	4b55      	ldr	r3, [pc, #340]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005392:	f003 0302 	and.w	r3, r3, #2
 8005396:	2b00      	cmp	r3, #0
 8005398:	d0ed      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800539a:	7dfb      	ldrb	r3, [r7, #23]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d126      	bne.n	80053ee <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80053a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053ae:	d10d      	bne.n	80053cc <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80053b0:	4b4c      	ldr	r3, [pc, #304]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80053be:	0919      	lsrs	r1, r3, #4
 80053c0:	4b4a      	ldr	r3, [pc, #296]	; (80054ec <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80053c2:	400b      	ands	r3, r1
 80053c4:	4947      	ldr	r1, [pc, #284]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	610b      	str	r3, [r1, #16]
 80053ca:	e005      	b.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80053cc:	4b45      	ldr	r3, [pc, #276]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80053ce:	691b      	ldr	r3, [r3, #16]
 80053d0:	4a44      	ldr	r2, [pc, #272]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80053d2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80053d6:	6113      	str	r3, [r2, #16]
 80053d8:	4b42      	ldr	r3, [pc, #264]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80053da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80053e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053e6:	493f      	ldr	r1, [pc, #252]	; (80054e4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	670b      	str	r3, [r1, #112]	; 0x70
 80053ec:	e004      	b.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80053ee:	7dfb      	ldrb	r3, [r7, #23]
 80053f0:	75bb      	strb	r3, [r7, #22]
 80053f2:	e001      	b.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053f4:	7dfb      	ldrb	r3, [r7, #23]
 80053f6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	2b00      	cmp	r3, #0
 8005402:	f000 8085 	beq.w	8005510 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800540a:	2b28      	cmp	r3, #40	; 0x28
 800540c:	d866      	bhi.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800540e:	a201      	add	r2, pc, #4	; (adr r2, 8005414 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005414:	080054f1 	.word	0x080054f1
 8005418:	080054dd 	.word	0x080054dd
 800541c:	080054dd 	.word	0x080054dd
 8005420:	080054dd 	.word	0x080054dd
 8005424:	080054dd 	.word	0x080054dd
 8005428:	080054dd 	.word	0x080054dd
 800542c:	080054dd 	.word	0x080054dd
 8005430:	080054dd 	.word	0x080054dd
 8005434:	080054b9 	.word	0x080054b9
 8005438:	080054dd 	.word	0x080054dd
 800543c:	080054dd 	.word	0x080054dd
 8005440:	080054dd 	.word	0x080054dd
 8005444:	080054dd 	.word	0x080054dd
 8005448:	080054dd 	.word	0x080054dd
 800544c:	080054dd 	.word	0x080054dd
 8005450:	080054dd 	.word	0x080054dd
 8005454:	080054cb 	.word	0x080054cb
 8005458:	080054dd 	.word	0x080054dd
 800545c:	080054dd 	.word	0x080054dd
 8005460:	080054dd 	.word	0x080054dd
 8005464:	080054dd 	.word	0x080054dd
 8005468:	080054dd 	.word	0x080054dd
 800546c:	080054dd 	.word	0x080054dd
 8005470:	080054dd 	.word	0x080054dd
 8005474:	080054f1 	.word	0x080054f1
 8005478:	080054dd 	.word	0x080054dd
 800547c:	080054dd 	.word	0x080054dd
 8005480:	080054dd 	.word	0x080054dd
 8005484:	080054dd 	.word	0x080054dd
 8005488:	080054dd 	.word	0x080054dd
 800548c:	080054dd 	.word	0x080054dd
 8005490:	080054dd 	.word	0x080054dd
 8005494:	080054f1 	.word	0x080054f1
 8005498:	080054dd 	.word	0x080054dd
 800549c:	080054dd 	.word	0x080054dd
 80054a0:	080054dd 	.word	0x080054dd
 80054a4:	080054dd 	.word	0x080054dd
 80054a8:	080054dd 	.word	0x080054dd
 80054ac:	080054dd 	.word	0x080054dd
 80054b0:	080054dd 	.word	0x080054dd
 80054b4:	080054f1 	.word	0x080054f1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	3304      	adds	r3, #4
 80054bc:	2101      	movs	r1, #1
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 fdfa 	bl	80060b8 <RCCEx_PLL2_Config>
 80054c4:	4603      	mov	r3, r0
 80054c6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80054c8:	e013      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	3324      	adds	r3, #36	; 0x24
 80054ce:	2101      	movs	r1, #1
 80054d0:	4618      	mov	r0, r3
 80054d2:	f000 fea3 	bl	800621c <RCCEx_PLL3_Config>
 80054d6:	4603      	mov	r3, r0
 80054d8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80054da:	e00a      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	75fb      	strb	r3, [r7, #23]
      break;
 80054e0:	e007      	b.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80054e2:	bf00      	nop
 80054e4:	58024400 	.word	0x58024400
 80054e8:	58024800 	.word	0x58024800
 80054ec:	00ffffcf 	.word	0x00ffffcf
      break;
 80054f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054f2:	7dfb      	ldrb	r3, [r7, #23]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d109      	bne.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80054f8:	4b96      	ldr	r3, [pc, #600]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80054fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054fc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005504:	4993      	ldr	r1, [pc, #588]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005506:	4313      	orrs	r3, r2
 8005508:	654b      	str	r3, [r1, #84]	; 0x54
 800550a:	e001      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800550c:	7dfb      	ldrb	r3, [r7, #23]
 800550e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	2b00      	cmp	r3, #0
 800551a:	d038      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005520:	2b05      	cmp	r3, #5
 8005522:	d821      	bhi.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8005524:	a201      	add	r2, pc, #4	; (adr r2, 800552c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8005526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800552a:	bf00      	nop
 800552c:	0800556f 	.word	0x0800556f
 8005530:	08005545 	.word	0x08005545
 8005534:	08005557 	.word	0x08005557
 8005538:	0800556f 	.word	0x0800556f
 800553c:	0800556f 	.word	0x0800556f
 8005540:	0800556f 	.word	0x0800556f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	3304      	adds	r3, #4
 8005548:	2101      	movs	r1, #1
 800554a:	4618      	mov	r0, r3
 800554c:	f000 fdb4 	bl	80060b8 <RCCEx_PLL2_Config>
 8005550:	4603      	mov	r3, r0
 8005552:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005554:	e00c      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	3324      	adds	r3, #36	; 0x24
 800555a:	2101      	movs	r1, #1
 800555c:	4618      	mov	r0, r3
 800555e:	f000 fe5d 	bl	800621c <RCCEx_PLL3_Config>
 8005562:	4603      	mov	r3, r0
 8005564:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005566:	e003      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	75fb      	strb	r3, [r7, #23]
      break;
 800556c:	e000      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800556e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005570:	7dfb      	ldrb	r3, [r7, #23]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d109      	bne.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005576:	4b77      	ldr	r3, [pc, #476]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800557a:	f023 0207 	bic.w	r2, r3, #7
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005582:	4974      	ldr	r1, [pc, #464]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005584:	4313      	orrs	r3, r2
 8005586:	654b      	str	r3, [r1, #84]	; 0x54
 8005588:	e001      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800558a:	7dfb      	ldrb	r3, [r7, #23]
 800558c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0304 	and.w	r3, r3, #4
 8005596:	2b00      	cmp	r3, #0
 8005598:	d03a      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055a0:	2b05      	cmp	r3, #5
 80055a2:	d821      	bhi.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80055a4:	a201      	add	r2, pc, #4	; (adr r2, 80055ac <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80055a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055aa:	bf00      	nop
 80055ac:	080055ef 	.word	0x080055ef
 80055b0:	080055c5 	.word	0x080055c5
 80055b4:	080055d7 	.word	0x080055d7
 80055b8:	080055ef 	.word	0x080055ef
 80055bc:	080055ef 	.word	0x080055ef
 80055c0:	080055ef 	.word	0x080055ef
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	3304      	adds	r3, #4
 80055c8:	2101      	movs	r1, #1
 80055ca:	4618      	mov	r0, r3
 80055cc:	f000 fd74 	bl	80060b8 <RCCEx_PLL2_Config>
 80055d0:	4603      	mov	r3, r0
 80055d2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80055d4:	e00c      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	3324      	adds	r3, #36	; 0x24
 80055da:	2101      	movs	r1, #1
 80055dc:	4618      	mov	r0, r3
 80055de:	f000 fe1d 	bl	800621c <RCCEx_PLL3_Config>
 80055e2:	4603      	mov	r3, r0
 80055e4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80055e6:	e003      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	75fb      	strb	r3, [r7, #23]
      break;
 80055ec:	e000      	b.n	80055f0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80055ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 80055f0:	7dfb      	ldrb	r3, [r7, #23]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10a      	bne.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055f6:	4b57      	ldr	r3, [pc, #348]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80055f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055fa:	f023 0207 	bic.w	r2, r3, #7
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005604:	4953      	ldr	r1, [pc, #332]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005606:	4313      	orrs	r3, r2
 8005608:	658b      	str	r3, [r1, #88]	; 0x58
 800560a:	e001      	b.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800560c:	7dfb      	ldrb	r3, [r7, #23]
 800560e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0320 	and.w	r3, r3, #32
 8005618:	2b00      	cmp	r3, #0
 800561a:	d04b      	beq.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005622:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005626:	d02e      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005628:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800562c:	d828      	bhi.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800562e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005632:	d02a      	beq.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005638:	d822      	bhi.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800563a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800563e:	d026      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005640:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005644:	d81c      	bhi.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005646:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800564a:	d010      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800564c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005650:	d816      	bhi.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005652:	2b00      	cmp	r3, #0
 8005654:	d01d      	beq.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8005656:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800565a:	d111      	bne.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	3304      	adds	r3, #4
 8005660:	2100      	movs	r1, #0
 8005662:	4618      	mov	r0, r3
 8005664:	f000 fd28 	bl	80060b8 <RCCEx_PLL2_Config>
 8005668:	4603      	mov	r3, r0
 800566a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800566c:	e012      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	3324      	adds	r3, #36	; 0x24
 8005672:	2102      	movs	r1, #2
 8005674:	4618      	mov	r0, r3
 8005676:	f000 fdd1 	bl	800621c <RCCEx_PLL3_Config>
 800567a:	4603      	mov	r3, r0
 800567c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800567e:	e009      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	75fb      	strb	r3, [r7, #23]
      break;
 8005684:	e006      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005686:	bf00      	nop
 8005688:	e004      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800568a:	bf00      	nop
 800568c:	e002      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800568e:	bf00      	nop
 8005690:	e000      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005692:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005694:	7dfb      	ldrb	r3, [r7, #23]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10a      	bne.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800569a:	4b2e      	ldr	r3, [pc, #184]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800569c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800569e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056a8:	492a      	ldr	r1, [pc, #168]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	654b      	str	r3, [r1, #84]	; 0x54
 80056ae:	e001      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056b0:	7dfb      	ldrb	r3, [r7, #23]
 80056b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d04d      	beq.n	800575c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056c6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80056ca:	d02e      	beq.n	800572a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80056cc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80056d0:	d828      	bhi.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80056d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056d6:	d02a      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80056d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056dc:	d822      	bhi.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80056de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056e2:	d026      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80056e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056e8:	d81c      	bhi.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80056ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056ee:	d010      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80056f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056f4:	d816      	bhi.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d01d      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80056fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056fe:	d111      	bne.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	3304      	adds	r3, #4
 8005704:	2100      	movs	r1, #0
 8005706:	4618      	mov	r0, r3
 8005708:	f000 fcd6 	bl	80060b8 <RCCEx_PLL2_Config>
 800570c:	4603      	mov	r3, r0
 800570e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005710:	e012      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	3324      	adds	r3, #36	; 0x24
 8005716:	2102      	movs	r1, #2
 8005718:	4618      	mov	r0, r3
 800571a:	f000 fd7f 	bl	800621c <RCCEx_PLL3_Config>
 800571e:	4603      	mov	r3, r0
 8005720:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005722:	e009      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	75fb      	strb	r3, [r7, #23]
      break;
 8005728:	e006      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800572a:	bf00      	nop
 800572c:	e004      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800572e:	bf00      	nop
 8005730:	e002      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005732:	bf00      	nop
 8005734:	e000      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005736:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005738:	7dfb      	ldrb	r3, [r7, #23]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d10c      	bne.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800573e:	4b05      	ldr	r3, [pc, #20]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005742:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800574c:	4901      	ldr	r1, [pc, #4]	; (8005754 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800574e:	4313      	orrs	r3, r2
 8005750:	658b      	str	r3, [r1, #88]	; 0x58
 8005752:	e003      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005754:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005758:	7dfb      	ldrb	r3, [r7, #23]
 800575a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005764:	2b00      	cmp	r3, #0
 8005766:	d04b      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800576e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005772:	d02e      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005774:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005778:	d828      	bhi.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800577a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800577e:	d02a      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005780:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005784:	d822      	bhi.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005786:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800578a:	d026      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800578c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005790:	d81c      	bhi.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005792:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005796:	d010      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8005798:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800579c:	d816      	bhi.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d01d      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80057a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057a6:	d111      	bne.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	3304      	adds	r3, #4
 80057ac:	2100      	movs	r1, #0
 80057ae:	4618      	mov	r0, r3
 80057b0:	f000 fc82 	bl	80060b8 <RCCEx_PLL2_Config>
 80057b4:	4603      	mov	r3, r0
 80057b6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80057b8:	e012      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	3324      	adds	r3, #36	; 0x24
 80057be:	2102      	movs	r1, #2
 80057c0:	4618      	mov	r0, r3
 80057c2:	f000 fd2b 	bl	800621c <RCCEx_PLL3_Config>
 80057c6:	4603      	mov	r3, r0
 80057c8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80057ca:	e009      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	75fb      	strb	r3, [r7, #23]
      break;
 80057d0:	e006      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80057d2:	bf00      	nop
 80057d4:	e004      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80057d6:	bf00      	nop
 80057d8:	e002      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80057da:	bf00      	nop
 80057dc:	e000      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80057de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057e0:	7dfb      	ldrb	r3, [r7, #23]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d10a      	bne.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80057e6:	4b9d      	ldr	r3, [pc, #628]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80057e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80057f4:	4999      	ldr	r1, [pc, #612]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	658b      	str	r3, [r1, #88]	; 0x58
 80057fa:	e001      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057fc:	7dfb      	ldrb	r3, [r7, #23]
 80057fe:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0308 	and.w	r3, r3, #8
 8005808:	2b00      	cmp	r3, #0
 800580a:	d01a      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005816:	d10a      	bne.n	800582e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	3324      	adds	r3, #36	; 0x24
 800581c:	2102      	movs	r1, #2
 800581e:	4618      	mov	r0, r3
 8005820:	f000 fcfc 	bl	800621c <RCCEx_PLL3_Config>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d001      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800582a:	2301      	movs	r3, #1
 800582c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800582e:	4b8b      	ldr	r3, [pc, #556]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005832:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800583c:	4987      	ldr	r1, [pc, #540]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800583e:	4313      	orrs	r3, r2
 8005840:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0310 	and.w	r3, r3, #16
 800584a:	2b00      	cmp	r3, #0
 800584c:	d01a      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005854:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005858:	d10a      	bne.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	3324      	adds	r3, #36	; 0x24
 800585e:	2102      	movs	r1, #2
 8005860:	4618      	mov	r0, r3
 8005862:	f000 fcdb 	bl	800621c <RCCEx_PLL3_Config>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d001      	beq.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005870:	4b7a      	ldr	r3, [pc, #488]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005874:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800587e:	4977      	ldr	r1, [pc, #476]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005880:	4313      	orrs	r3, r2
 8005882:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d034      	beq.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005896:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800589a:	d01d      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800589c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058a0:	d817      	bhi.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d003      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80058a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058aa:	d009      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80058ac:	e011      	b.n	80058d2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	3304      	adds	r3, #4
 80058b2:	2100      	movs	r1, #0
 80058b4:	4618      	mov	r0, r3
 80058b6:	f000 fbff 	bl	80060b8 <RCCEx_PLL2_Config>
 80058ba:	4603      	mov	r3, r0
 80058bc:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80058be:	e00c      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	3324      	adds	r3, #36	; 0x24
 80058c4:	2102      	movs	r1, #2
 80058c6:	4618      	mov	r0, r3
 80058c8:	f000 fca8 	bl	800621c <RCCEx_PLL3_Config>
 80058cc:	4603      	mov	r3, r0
 80058ce:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80058d0:	e003      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	75fb      	strb	r3, [r7, #23]
      break;
 80058d6:	e000      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80058d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058da:	7dfb      	ldrb	r3, [r7, #23]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d10a      	bne.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80058e0:	4b5e      	ldr	r3, [pc, #376]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80058e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80058ee:	495b      	ldr	r1, [pc, #364]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	658b      	str	r3, [r1, #88]	; 0x58
 80058f4:	e001      	b.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058f6:	7dfb      	ldrb	r3, [r7, #23]
 80058f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d033      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800590c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005910:	d01c      	beq.n	800594c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8005912:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005916:	d816      	bhi.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005918:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800591c:	d003      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800591e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005922:	d007      	beq.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8005924:	e00f      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005926:	4b4d      	ldr	r3, [pc, #308]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592a:	4a4c      	ldr	r2, [pc, #304]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800592c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005930:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005932:	e00c      	b.n	800594e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	3324      	adds	r3, #36	; 0x24
 8005938:	2101      	movs	r1, #1
 800593a:	4618      	mov	r0, r3
 800593c:	f000 fc6e 	bl	800621c <RCCEx_PLL3_Config>
 8005940:	4603      	mov	r3, r0
 8005942:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005944:	e003      	b.n	800594e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	75fb      	strb	r3, [r7, #23]
      break;
 800594a:	e000      	b.n	800594e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800594c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800594e:	7dfb      	ldrb	r3, [r7, #23]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d10a      	bne.n	800596a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005954:	4b41      	ldr	r3, [pc, #260]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005958:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005962:	493e      	ldr	r1, [pc, #248]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005964:	4313      	orrs	r3, r2
 8005966:	654b      	str	r3, [r1, #84]	; 0x54
 8005968:	e001      	b.n	800596e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800596a:	7dfb      	ldrb	r3, [r7, #23]
 800596c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d029      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800597e:	2b00      	cmp	r3, #0
 8005980:	d003      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8005982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005986:	d007      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8005988:	e00f      	b.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800598a:	4b34      	ldr	r3, [pc, #208]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800598c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598e:	4a33      	ldr	r2, [pc, #204]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005994:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005996:	e00b      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	3304      	adds	r3, #4
 800599c:	2102      	movs	r1, #2
 800599e:	4618      	mov	r0, r3
 80059a0:	f000 fb8a 	bl	80060b8 <RCCEx_PLL2_Config>
 80059a4:	4603      	mov	r3, r0
 80059a6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80059a8:	e002      	b.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	75fb      	strb	r3, [r7, #23]
      break;
 80059ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059b0:	7dfb      	ldrb	r3, [r7, #23]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d109      	bne.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80059b6:	4b29      	ldr	r3, [pc, #164]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80059b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059c2:	4926      	ldr	r1, [pc, #152]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80059c8:	e001      	b.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059ca:	7dfb      	ldrb	r3, [r7, #23]
 80059cc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00a      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	3324      	adds	r3, #36	; 0x24
 80059de:	2102      	movs	r1, #2
 80059e0:	4618      	mov	r0, r3
 80059e2:	f000 fc1b 	bl	800621c <RCCEx_PLL3_Config>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d001      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d033      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a00:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a04:	d017      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8005a06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a0a:	d811      	bhi.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a10:	d013      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8005a12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a16:	d80b      	bhi.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d010      	beq.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8005a1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a20:	d106      	bne.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a22:	4b0e      	ldr	r3, [pc, #56]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a26:	4a0d      	ldr	r2, [pc, #52]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005a2e:	e007      	b.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	75fb      	strb	r3, [r7, #23]
      break;
 8005a34:	e004      	b.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005a36:	bf00      	nop
 8005a38:	e002      	b.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005a3a:	bf00      	nop
 8005a3c:	e000      	b.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8005a3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a40:	7dfb      	ldrb	r3, [r7, #23]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d10c      	bne.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a46:	4b05      	ldr	r3, [pc, #20]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a52:	4902      	ldr	r1, [pc, #8]	; (8005a5c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	654b      	str	r3, [r1, #84]	; 0x54
 8005a58:	e004      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8005a5a:	bf00      	nop
 8005a5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a60:	7dfb      	ldrb	r3, [r7, #23]
 8005a62:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d008      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005a70:	4b31      	ldr	r3, [pc, #196]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a74:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a7c:	492e      	ldr	r1, [pc, #184]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d009      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005a8e:	4b2a      	ldr	r3, [pc, #168]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005a9c:	4926      	ldr	r1, [pc, #152]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d008      	beq.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005aae:	4b22      	ldr	r3, [pc, #136]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ab2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005aba:	491f      	ldr	r1, [pc, #124]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005abc:	4313      	orrs	r3, r2
 8005abe:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00d      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005acc:	4b1a      	ldr	r3, [pc, #104]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	4a19      	ldr	r2, [pc, #100]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005ad2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ad6:	6113      	str	r3, [r2, #16]
 8005ad8:	4b17      	ldr	r3, [pc, #92]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005ada:	691a      	ldr	r2, [r3, #16]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005ae2:	4915      	ldr	r1, [pc, #84]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	da08      	bge.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005af0:	4b11      	ldr	r3, [pc, #68]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005af4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005afc:	490e      	ldr	r1, [pc, #56]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d009      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005b0e:	4b0a      	ldr	r3, [pc, #40]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b12:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b1c:	4906      	ldr	r1, [pc, #24]	; (8005b38 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005b22:	7dbb      	ldrb	r3, [r7, #22]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d101      	bne.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	e000      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3718      	adds	r7, #24
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	58024400 	.word	0x58024400

08005b3c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005b40:	f7ff f85a 	bl	8004bf8 <HAL_RCC_GetHCLKFreq>
 8005b44:	4602      	mov	r2, r0
 8005b46:	4b06      	ldr	r3, [pc, #24]	; (8005b60 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	091b      	lsrs	r3, r3, #4
 8005b4c:	f003 0307 	and.w	r3, r3, #7
 8005b50:	4904      	ldr	r1, [pc, #16]	; (8005b64 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005b52:	5ccb      	ldrb	r3, [r1, r3]
 8005b54:	f003 031f 	and.w	r3, r3, #31
 8005b58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	58024400 	.word	0x58024400
 8005b64:	0800b450 	.word	0x0800b450

08005b68 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b089      	sub	sp, #36	; 0x24
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b70:	4ba1      	ldr	r3, [pc, #644]	; (8005df8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b74:	f003 0303 	and.w	r3, r3, #3
 8005b78:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005b7a:	4b9f      	ldr	r3, [pc, #636]	; (8005df8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7e:	0b1b      	lsrs	r3, r3, #12
 8005b80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b84:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005b86:	4b9c      	ldr	r3, [pc, #624]	; (8005df8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b8a:	091b      	lsrs	r3, r3, #4
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005b92:	4b99      	ldr	r3, [pc, #612]	; (8005df8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b96:	08db      	lsrs	r3, r3, #3
 8005b98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b9c:	693a      	ldr	r2, [r7, #16]
 8005b9e:	fb02 f303 	mul.w	r3, r2, r3
 8005ba2:	ee07 3a90 	vmov	s15, r3
 8005ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005baa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f000 8111 	beq.w	8005dd8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	2b02      	cmp	r3, #2
 8005bba:	f000 8083 	beq.w	8005cc4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	f200 80a1 	bhi.w	8005d08 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d003      	beq.n	8005bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d056      	beq.n	8005c80 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005bd2:	e099      	b.n	8005d08 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bd4:	4b88      	ldr	r3, [pc, #544]	; (8005df8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0320 	and.w	r3, r3, #32
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d02d      	beq.n	8005c3c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005be0:	4b85      	ldr	r3, [pc, #532]	; (8005df8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	08db      	lsrs	r3, r3, #3
 8005be6:	f003 0303 	and.w	r3, r3, #3
 8005bea:	4a84      	ldr	r2, [pc, #528]	; (8005dfc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005bec:	fa22 f303 	lsr.w	r3, r2, r3
 8005bf0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	ee07 3a90 	vmov	s15, r3
 8005bf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	ee07 3a90 	vmov	s15, r3
 8005c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c0a:	4b7b      	ldr	r3, [pc, #492]	; (8005df8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c12:	ee07 3a90 	vmov	s15, r3
 8005c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c1e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005e00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c36:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005c3a:	e087      	b.n	8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	ee07 3a90 	vmov	s15, r3
 8005c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c46:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005e04 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c4e:	4b6a      	ldr	r3, [pc, #424]	; (8005df8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c56:	ee07 3a90 	vmov	s15, r3
 8005c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c62:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005e00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005c7e:	e065      	b.n	8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	ee07 3a90 	vmov	s15, r3
 8005c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c8a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005e08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c92:	4b59      	ldr	r3, [pc, #356]	; (8005df8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c9a:	ee07 3a90 	vmov	s15, r3
 8005c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ca2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ca6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005e00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005cc2:	e043      	b.n	8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	ee07 3a90 	vmov	s15, r3
 8005cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005e0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cd6:	4b48      	ldr	r3, [pc, #288]	; (8005df8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cde:	ee07 3a90 	vmov	s15, r3
 8005ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ce6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cea:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005e00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d06:	e021      	b.n	8005d4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	ee07 3a90 	vmov	s15, r3
 8005d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d12:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005e08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d1a:	4b37      	ldr	r3, [pc, #220]	; (8005df8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d22:	ee07 3a90 	vmov	s15, r3
 8005d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d2e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005e00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d4a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005d4c:	4b2a      	ldr	r3, [pc, #168]	; (8005df8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d50:	0a5b      	lsrs	r3, r3, #9
 8005d52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d56:	ee07 3a90 	vmov	s15, r3
 8005d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d66:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d72:	ee17 2a90 	vmov	r2, s15
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005d7a:	4b1f      	ldr	r3, [pc, #124]	; (8005df8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7e:	0c1b      	lsrs	r3, r3, #16
 8005d80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d84:	ee07 3a90 	vmov	s15, r3
 8005d88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d94:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005da0:	ee17 2a90 	vmov	r2, s15
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005da8:	4b13      	ldr	r3, [pc, #76]	; (8005df8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dac:	0e1b      	lsrs	r3, r3, #24
 8005dae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005db2:	ee07 3a90 	vmov	s15, r3
 8005db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005dbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005dc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005dc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005dca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005dce:	ee17 2a90 	vmov	r2, s15
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005dd6:	e008      	b.n	8005dea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	609a      	str	r2, [r3, #8]
}
 8005dea:	bf00      	nop
 8005dec:	3724      	adds	r7, #36	; 0x24
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop
 8005df8:	58024400 	.word	0x58024400
 8005dfc:	03d09000 	.word	0x03d09000
 8005e00:	46000000 	.word	0x46000000
 8005e04:	4c742400 	.word	0x4c742400
 8005e08:	4a742400 	.word	0x4a742400
 8005e0c:	4af42400 	.word	0x4af42400

08005e10 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b089      	sub	sp, #36	; 0x24
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005e18:	4ba1      	ldr	r3, [pc, #644]	; (80060a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e1c:	f003 0303 	and.w	r3, r3, #3
 8005e20:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005e22:	4b9f      	ldr	r3, [pc, #636]	; (80060a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e26:	0d1b      	lsrs	r3, r3, #20
 8005e28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e2c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005e2e:	4b9c      	ldr	r3, [pc, #624]	; (80060a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e32:	0a1b      	lsrs	r3, r3, #8
 8005e34:	f003 0301 	and.w	r3, r3, #1
 8005e38:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005e3a:	4b99      	ldr	r3, [pc, #612]	; (80060a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e3e:	08db      	lsrs	r3, r3, #3
 8005e40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	fb02 f303 	mul.w	r3, r2, r3
 8005e4a:	ee07 3a90 	vmov	s15, r3
 8005e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e52:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	f000 8111 	beq.w	8006080 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	2b02      	cmp	r3, #2
 8005e62:	f000 8083 	beq.w	8005f6c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	f200 80a1 	bhi.w	8005fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d003      	beq.n	8005e7c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	2b01      	cmp	r3, #1
 8005e78:	d056      	beq.n	8005f28 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005e7a:	e099      	b.n	8005fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e7c:	4b88      	ldr	r3, [pc, #544]	; (80060a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 0320 	and.w	r3, r3, #32
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d02d      	beq.n	8005ee4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005e88:	4b85      	ldr	r3, [pc, #532]	; (80060a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	08db      	lsrs	r3, r3, #3
 8005e8e:	f003 0303 	and.w	r3, r3, #3
 8005e92:	4a84      	ldr	r2, [pc, #528]	; (80060a4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005e94:	fa22 f303 	lsr.w	r3, r2, r3
 8005e98:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	ee07 3a90 	vmov	s15, r3
 8005ea0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	ee07 3a90 	vmov	s15, r3
 8005eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eb2:	4b7b      	ldr	r3, [pc, #492]	; (80060a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eba:	ee07 3a90 	vmov	s15, r3
 8005ebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ec2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ec6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80060a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005eca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ed2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ede:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005ee2:	e087      	b.n	8005ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	ee07 3a90 	vmov	s15, r3
 8005eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80060ac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005ef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ef6:	4b6a      	ldr	r3, [pc, #424]	; (80060a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005efe:	ee07 3a90 	vmov	s15, r3
 8005f02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f06:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f0a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80060a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f26:	e065      	b.n	8005ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	ee07 3a90 	vmov	s15, r3
 8005f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f32:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80060b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005f36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f3a:	4b59      	ldr	r3, [pc, #356]	; (80060a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f42:	ee07 3a90 	vmov	s15, r3
 8005f46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f4e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80060a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005f6a:	e043      	b.n	8005ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	ee07 3a90 	vmov	s15, r3
 8005f72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f76:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80060b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005f7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f7e:	4b48      	ldr	r3, [pc, #288]	; (80060a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f86:	ee07 3a90 	vmov	s15, r3
 8005f8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f92:	eddf 5a45 	vldr	s11, [pc, #276]	; 80060a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005f96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005faa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005fae:	e021      	b.n	8005ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	ee07 3a90 	vmov	s15, r3
 8005fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80060b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005fbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fc2:	4b37      	ldr	r3, [pc, #220]	; (80060a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fca:	ee07 3a90 	vmov	s15, r3
 8005fce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fd6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80060a8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005fda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fe2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005ff2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005ff4:	4b2a      	ldr	r3, [pc, #168]	; (80060a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff8:	0a5b      	lsrs	r3, r3, #9
 8005ffa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ffe:	ee07 3a90 	vmov	s15, r3
 8006002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006006:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800600a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800600e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006012:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006016:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800601a:	ee17 2a90 	vmov	r2, s15
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006022:	4b1f      	ldr	r3, [pc, #124]	; (80060a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006026:	0c1b      	lsrs	r3, r3, #16
 8006028:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800602c:	ee07 3a90 	vmov	s15, r3
 8006030:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006034:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006038:	ee37 7a87 	vadd.f32	s14, s15, s14
 800603c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006040:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006044:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006048:	ee17 2a90 	vmov	r2, s15
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006050:	4b13      	ldr	r3, [pc, #76]	; (80060a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006054:	0e1b      	lsrs	r3, r3, #24
 8006056:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800605a:	ee07 3a90 	vmov	s15, r3
 800605e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006062:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006066:	ee37 7a87 	vadd.f32	s14, s15, s14
 800606a:	edd7 6a07 	vldr	s13, [r7, #28]
 800606e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006072:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006076:	ee17 2a90 	vmov	r2, s15
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800607e:	e008      	b.n	8006092 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	609a      	str	r2, [r3, #8]
}
 8006092:	bf00      	nop
 8006094:	3724      	adds	r7, #36	; 0x24
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop
 80060a0:	58024400 	.word	0x58024400
 80060a4:	03d09000 	.word	0x03d09000
 80060a8:	46000000 	.word	0x46000000
 80060ac:	4c742400 	.word	0x4c742400
 80060b0:	4a742400 	.word	0x4a742400
 80060b4:	4af42400 	.word	0x4af42400

080060b8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060c2:	2300      	movs	r3, #0
 80060c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80060c6:	4b53      	ldr	r3, [pc, #332]	; (8006214 <RCCEx_PLL2_Config+0x15c>)
 80060c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ca:	f003 0303 	and.w	r3, r3, #3
 80060ce:	2b03      	cmp	r3, #3
 80060d0:	d101      	bne.n	80060d6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e099      	b.n	800620a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80060d6:	4b4f      	ldr	r3, [pc, #316]	; (8006214 <RCCEx_PLL2_Config+0x15c>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a4e      	ldr	r2, [pc, #312]	; (8006214 <RCCEx_PLL2_Config+0x15c>)
 80060dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80060e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060e2:	f7fc fde1 	bl	8002ca8 <HAL_GetTick>
 80060e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80060e8:	e008      	b.n	80060fc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80060ea:	f7fc fddd 	bl	8002ca8 <HAL_GetTick>
 80060ee:	4602      	mov	r2, r0
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d901      	bls.n	80060fc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80060f8:	2303      	movs	r3, #3
 80060fa:	e086      	b.n	800620a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80060fc:	4b45      	ldr	r3, [pc, #276]	; (8006214 <RCCEx_PLL2_Config+0x15c>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006104:	2b00      	cmp	r3, #0
 8006106:	d1f0      	bne.n	80060ea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006108:	4b42      	ldr	r3, [pc, #264]	; (8006214 <RCCEx_PLL2_Config+0x15c>)
 800610a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800610c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	031b      	lsls	r3, r3, #12
 8006116:	493f      	ldr	r1, [pc, #252]	; (8006214 <RCCEx_PLL2_Config+0x15c>)
 8006118:	4313      	orrs	r3, r2
 800611a:	628b      	str	r3, [r1, #40]	; 0x28
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	3b01      	subs	r3, #1
 8006122:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	3b01      	subs	r3, #1
 800612c:	025b      	lsls	r3, r3, #9
 800612e:	b29b      	uxth	r3, r3
 8006130:	431a      	orrs	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	3b01      	subs	r3, #1
 8006138:	041b      	lsls	r3, r3, #16
 800613a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800613e:	431a      	orrs	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	3b01      	subs	r3, #1
 8006146:	061b      	lsls	r3, r3, #24
 8006148:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800614c:	4931      	ldr	r1, [pc, #196]	; (8006214 <RCCEx_PLL2_Config+0x15c>)
 800614e:	4313      	orrs	r3, r2
 8006150:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006152:	4b30      	ldr	r3, [pc, #192]	; (8006214 <RCCEx_PLL2_Config+0x15c>)
 8006154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006156:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	695b      	ldr	r3, [r3, #20]
 800615e:	492d      	ldr	r1, [pc, #180]	; (8006214 <RCCEx_PLL2_Config+0x15c>)
 8006160:	4313      	orrs	r3, r2
 8006162:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006164:	4b2b      	ldr	r3, [pc, #172]	; (8006214 <RCCEx_PLL2_Config+0x15c>)
 8006166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006168:	f023 0220 	bic.w	r2, r3, #32
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	699b      	ldr	r3, [r3, #24]
 8006170:	4928      	ldr	r1, [pc, #160]	; (8006214 <RCCEx_PLL2_Config+0x15c>)
 8006172:	4313      	orrs	r3, r2
 8006174:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006176:	4b27      	ldr	r3, [pc, #156]	; (8006214 <RCCEx_PLL2_Config+0x15c>)
 8006178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617a:	4a26      	ldr	r2, [pc, #152]	; (8006214 <RCCEx_PLL2_Config+0x15c>)
 800617c:	f023 0310 	bic.w	r3, r3, #16
 8006180:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006182:	4b24      	ldr	r3, [pc, #144]	; (8006214 <RCCEx_PLL2_Config+0x15c>)
 8006184:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006186:	4b24      	ldr	r3, [pc, #144]	; (8006218 <RCCEx_PLL2_Config+0x160>)
 8006188:	4013      	ands	r3, r2
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	69d2      	ldr	r2, [r2, #28]
 800618e:	00d2      	lsls	r2, r2, #3
 8006190:	4920      	ldr	r1, [pc, #128]	; (8006214 <RCCEx_PLL2_Config+0x15c>)
 8006192:	4313      	orrs	r3, r2
 8006194:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006196:	4b1f      	ldr	r3, [pc, #124]	; (8006214 <RCCEx_PLL2_Config+0x15c>)
 8006198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800619a:	4a1e      	ldr	r2, [pc, #120]	; (8006214 <RCCEx_PLL2_Config+0x15c>)
 800619c:	f043 0310 	orr.w	r3, r3, #16
 80061a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d106      	bne.n	80061b6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80061a8:	4b1a      	ldr	r3, [pc, #104]	; (8006214 <RCCEx_PLL2_Config+0x15c>)
 80061aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ac:	4a19      	ldr	r2, [pc, #100]	; (8006214 <RCCEx_PLL2_Config+0x15c>)
 80061ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80061b4:	e00f      	b.n	80061d6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d106      	bne.n	80061ca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80061bc:	4b15      	ldr	r3, [pc, #84]	; (8006214 <RCCEx_PLL2_Config+0x15c>)
 80061be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c0:	4a14      	ldr	r2, [pc, #80]	; (8006214 <RCCEx_PLL2_Config+0x15c>)
 80061c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80061c8:	e005      	b.n	80061d6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80061ca:	4b12      	ldr	r3, [pc, #72]	; (8006214 <RCCEx_PLL2_Config+0x15c>)
 80061cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ce:	4a11      	ldr	r2, [pc, #68]	; (8006214 <RCCEx_PLL2_Config+0x15c>)
 80061d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80061d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80061d6:	4b0f      	ldr	r3, [pc, #60]	; (8006214 <RCCEx_PLL2_Config+0x15c>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a0e      	ldr	r2, [pc, #56]	; (8006214 <RCCEx_PLL2_Config+0x15c>)
 80061dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80061e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061e2:	f7fc fd61 	bl	8002ca8 <HAL_GetTick>
 80061e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80061e8:	e008      	b.n	80061fc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80061ea:	f7fc fd5d 	bl	8002ca8 <HAL_GetTick>
 80061ee:	4602      	mov	r2, r0
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	1ad3      	subs	r3, r2, r3
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d901      	bls.n	80061fc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80061f8:	2303      	movs	r3, #3
 80061fa:	e006      	b.n	800620a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80061fc:	4b05      	ldr	r3, [pc, #20]	; (8006214 <RCCEx_PLL2_Config+0x15c>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d0f0      	beq.n	80061ea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006208:	7bfb      	ldrb	r3, [r7, #15]
}
 800620a:	4618      	mov	r0, r3
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	58024400 	.word	0x58024400
 8006218:	ffff0007 	.word	0xffff0007

0800621c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006226:	2300      	movs	r3, #0
 8006228:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800622a:	4b53      	ldr	r3, [pc, #332]	; (8006378 <RCCEx_PLL3_Config+0x15c>)
 800622c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800622e:	f003 0303 	and.w	r3, r3, #3
 8006232:	2b03      	cmp	r3, #3
 8006234:	d101      	bne.n	800623a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e099      	b.n	800636e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800623a:	4b4f      	ldr	r3, [pc, #316]	; (8006378 <RCCEx_PLL3_Config+0x15c>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a4e      	ldr	r2, [pc, #312]	; (8006378 <RCCEx_PLL3_Config+0x15c>)
 8006240:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006244:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006246:	f7fc fd2f 	bl	8002ca8 <HAL_GetTick>
 800624a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800624c:	e008      	b.n	8006260 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800624e:	f7fc fd2b 	bl	8002ca8 <HAL_GetTick>
 8006252:	4602      	mov	r2, r0
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	2b02      	cmp	r3, #2
 800625a:	d901      	bls.n	8006260 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e086      	b.n	800636e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006260:	4b45      	ldr	r3, [pc, #276]	; (8006378 <RCCEx_PLL3_Config+0x15c>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1f0      	bne.n	800624e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800626c:	4b42      	ldr	r3, [pc, #264]	; (8006378 <RCCEx_PLL3_Config+0x15c>)
 800626e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006270:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	051b      	lsls	r3, r3, #20
 800627a:	493f      	ldr	r1, [pc, #252]	; (8006378 <RCCEx_PLL3_Config+0x15c>)
 800627c:	4313      	orrs	r3, r2
 800627e:	628b      	str	r3, [r1, #40]	; 0x28
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	685b      	ldr	r3, [r3, #4]
 8006284:	3b01      	subs	r3, #1
 8006286:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	3b01      	subs	r3, #1
 8006290:	025b      	lsls	r3, r3, #9
 8006292:	b29b      	uxth	r3, r3
 8006294:	431a      	orrs	r2, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	3b01      	subs	r3, #1
 800629c:	041b      	lsls	r3, r3, #16
 800629e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80062a2:	431a      	orrs	r2, r3
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	3b01      	subs	r3, #1
 80062aa:	061b      	lsls	r3, r3, #24
 80062ac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80062b0:	4931      	ldr	r1, [pc, #196]	; (8006378 <RCCEx_PLL3_Config+0x15c>)
 80062b2:	4313      	orrs	r3, r2
 80062b4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80062b6:	4b30      	ldr	r3, [pc, #192]	; (8006378 <RCCEx_PLL3_Config+0x15c>)
 80062b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	492d      	ldr	r1, [pc, #180]	; (8006378 <RCCEx_PLL3_Config+0x15c>)
 80062c4:	4313      	orrs	r3, r2
 80062c6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80062c8:	4b2b      	ldr	r3, [pc, #172]	; (8006378 <RCCEx_PLL3_Config+0x15c>)
 80062ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062cc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	699b      	ldr	r3, [r3, #24]
 80062d4:	4928      	ldr	r1, [pc, #160]	; (8006378 <RCCEx_PLL3_Config+0x15c>)
 80062d6:	4313      	orrs	r3, r2
 80062d8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80062da:	4b27      	ldr	r3, [pc, #156]	; (8006378 <RCCEx_PLL3_Config+0x15c>)
 80062dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062de:	4a26      	ldr	r2, [pc, #152]	; (8006378 <RCCEx_PLL3_Config+0x15c>)
 80062e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80062e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80062e6:	4b24      	ldr	r3, [pc, #144]	; (8006378 <RCCEx_PLL3_Config+0x15c>)
 80062e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062ea:	4b24      	ldr	r3, [pc, #144]	; (800637c <RCCEx_PLL3_Config+0x160>)
 80062ec:	4013      	ands	r3, r2
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	69d2      	ldr	r2, [r2, #28]
 80062f2:	00d2      	lsls	r2, r2, #3
 80062f4:	4920      	ldr	r1, [pc, #128]	; (8006378 <RCCEx_PLL3_Config+0x15c>)
 80062f6:	4313      	orrs	r3, r2
 80062f8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80062fa:	4b1f      	ldr	r3, [pc, #124]	; (8006378 <RCCEx_PLL3_Config+0x15c>)
 80062fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062fe:	4a1e      	ldr	r2, [pc, #120]	; (8006378 <RCCEx_PLL3_Config+0x15c>)
 8006300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006304:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d106      	bne.n	800631a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800630c:	4b1a      	ldr	r3, [pc, #104]	; (8006378 <RCCEx_PLL3_Config+0x15c>)
 800630e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006310:	4a19      	ldr	r2, [pc, #100]	; (8006378 <RCCEx_PLL3_Config+0x15c>)
 8006312:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006316:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006318:	e00f      	b.n	800633a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d106      	bne.n	800632e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006320:	4b15      	ldr	r3, [pc, #84]	; (8006378 <RCCEx_PLL3_Config+0x15c>)
 8006322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006324:	4a14      	ldr	r2, [pc, #80]	; (8006378 <RCCEx_PLL3_Config+0x15c>)
 8006326:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800632a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800632c:	e005      	b.n	800633a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800632e:	4b12      	ldr	r3, [pc, #72]	; (8006378 <RCCEx_PLL3_Config+0x15c>)
 8006330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006332:	4a11      	ldr	r2, [pc, #68]	; (8006378 <RCCEx_PLL3_Config+0x15c>)
 8006334:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006338:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800633a:	4b0f      	ldr	r3, [pc, #60]	; (8006378 <RCCEx_PLL3_Config+0x15c>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a0e      	ldr	r2, [pc, #56]	; (8006378 <RCCEx_PLL3_Config+0x15c>)
 8006340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006344:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006346:	f7fc fcaf 	bl	8002ca8 <HAL_GetTick>
 800634a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800634c:	e008      	b.n	8006360 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800634e:	f7fc fcab 	bl	8002ca8 <HAL_GetTick>
 8006352:	4602      	mov	r2, r0
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	2b02      	cmp	r3, #2
 800635a:	d901      	bls.n	8006360 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800635c:	2303      	movs	r3, #3
 800635e:	e006      	b.n	800636e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006360:	4b05      	ldr	r3, [pc, #20]	; (8006378 <RCCEx_PLL3_Config+0x15c>)
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d0f0      	beq.n	800634e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800636c:	7bfb      	ldrb	r3, [r7, #15]
}
 800636e:	4618      	mov	r0, r3
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}
 8006376:	bf00      	nop
 8006378:	58024400 	.word	0x58024400
 800637c:	ffff0007 	.word	0xffff0007

08006380 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d101      	bne.n	8006392 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e0f1      	b.n	8006576 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a78      	ldr	r2, [pc, #480]	; (8006580 <HAL_SPI_Init+0x200>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d00f      	beq.n	80063c2 <HAL_SPI_Init+0x42>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a77      	ldr	r2, [pc, #476]	; (8006584 <HAL_SPI_Init+0x204>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d00a      	beq.n	80063c2 <HAL_SPI_Init+0x42>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a75      	ldr	r2, [pc, #468]	; (8006588 <HAL_SPI_Init+0x208>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d005      	beq.n	80063c2 <HAL_SPI_Init+0x42>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	68db      	ldr	r3, [r3, #12]
 80063ba:	2b0f      	cmp	r3, #15
 80063bc:	d901      	bls.n	80063c2 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e0d9      	b.n	8006576 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 ff66 	bl	8007294 <SPI_GetPacketSize>
 80063c8:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a6c      	ldr	r2, [pc, #432]	; (8006580 <HAL_SPI_Init+0x200>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d00c      	beq.n	80063ee <HAL_SPI_Init+0x6e>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a6a      	ldr	r2, [pc, #424]	; (8006584 <HAL_SPI_Init+0x204>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d007      	beq.n	80063ee <HAL_SPI_Init+0x6e>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a69      	ldr	r2, [pc, #420]	; (8006588 <HAL_SPI_Init+0x208>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d002      	beq.n	80063ee <HAL_SPI_Init+0x6e>
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2b08      	cmp	r3, #8
 80063ec:	d811      	bhi.n	8006412 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80063f2:	4a63      	ldr	r2, [pc, #396]	; (8006580 <HAL_SPI_Init+0x200>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d009      	beq.n	800640c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a61      	ldr	r2, [pc, #388]	; (8006584 <HAL_SPI_Init+0x204>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d004      	beq.n	800640c <HAL_SPI_Init+0x8c>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a60      	ldr	r2, [pc, #384]	; (8006588 <HAL_SPI_Init+0x208>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d104      	bne.n	8006416 <HAL_SPI_Init+0x96>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2b10      	cmp	r3, #16
 8006410:	d901      	bls.n	8006416 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e0af      	b.n	8006576 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800641c:	b2db      	uxtb	r3, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	d106      	bne.n	8006430 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f7fc f930 	bl	8002690 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2202      	movs	r2, #2
 8006434:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f022 0201 	bic.w	r2, r2, #1
 8006446:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8006452:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800645c:	d119      	bne.n	8006492 <HAL_SPI_Init+0x112>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006466:	d103      	bne.n	8006470 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800646c:	2b00      	cmp	r3, #0
 800646e:	d008      	beq.n	8006482 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006474:	2b00      	cmp	r3, #0
 8006476:	d10c      	bne.n	8006492 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800647c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006480:	d107      	bne.n	8006492 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006490:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	69da      	ldr	r2, [r3, #28]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800649a:	431a      	orrs	r2, r3
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	431a      	orrs	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064a4:	ea42 0103 	orr.w	r1, r2, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	68da      	ldr	r2, [r3, #12]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	430a      	orrs	r2, r1
 80064b2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064bc:	431a      	orrs	r2, r3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064c2:	431a      	orrs	r2, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	699b      	ldr	r3, [r3, #24]
 80064c8:	431a      	orrs	r2, r3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	431a      	orrs	r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	695b      	ldr	r3, [r3, #20]
 80064d4:	431a      	orrs	r2, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a1b      	ldr	r3, [r3, #32]
 80064da:	431a      	orrs	r2, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	431a      	orrs	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064e6:	431a      	orrs	r2, r3
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	431a      	orrs	r2, r3
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064f2:	ea42 0103 	orr.w	r1, r2, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	430a      	orrs	r2, r1
 8006500:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d113      	bne.n	8006532 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800651c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006530:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f022 0201 	bic.w	r2, r2, #1
 8006540:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00a      	beq.n	8006564 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	430a      	orrs	r2, r1
 8006562:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	3710      	adds	r7, #16
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	40013000 	.word	0x40013000
 8006584:	40003800 	.word	0x40003800
 8006588:	40003c00 	.word	0x40003c00

0800658c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b08a      	sub	sp, #40	; 0x28
 8006590:	af02      	add	r7, sp, #8
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	603b      	str	r3, [r7, #0]
 8006598:	4613      	mov	r3, r2
 800659a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	3320      	adds	r3, #32
 80065a2:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80065a4:	2300      	movs	r3, #0
 80065a6:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d101      	bne.n	80065b6 <HAL_SPI_Transmit+0x2a>
 80065b2:	2302      	movs	r3, #2
 80065b4:	e1d7      	b.n	8006966 <HAL_SPI_Transmit+0x3da>
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2201      	movs	r2, #1
 80065ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065be:	f7fc fb73 	bl	8002ca8 <HAL_GetTick>
 80065c2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80065ca:	b2db      	uxtb	r3, r3
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d007      	beq.n	80065e0 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 80065d0:	2302      	movs	r3, #2
 80065d2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80065dc:	7efb      	ldrb	r3, [r7, #27]
 80065de:	e1c2      	b.n	8006966 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d002      	beq.n	80065ec <HAL_SPI_Transmit+0x60>
 80065e6:	88fb      	ldrh	r3, [r7, #6]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d107      	bne.n	80065fc <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80065f8:	7efb      	ldrb	r3, [r7, #27]
 80065fa:	e1b4      	b.n	8006966 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2203      	movs	r2, #3
 8006600:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2200      	movs	r2, #0
 8006608:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	68ba      	ldr	r2, [r7, #8]
 8006610:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	88fa      	ldrh	r2, [r7, #6]
 8006616:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	88fa      	ldrh	r2, [r7, #6]
 800661e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2200      	movs	r2, #0
 800662c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2200      	movs	r2, #0
 8006634:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2200      	movs	r2, #0
 800663c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2200      	movs	r2, #0
 8006642:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800664c:	d107      	bne.n	800665e <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681a      	ldr	r2, [r3, #0]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800665c:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	685a      	ldr	r2, [r3, #4]
 8006664:	4b96      	ldr	r3, [pc, #600]	; (80068c0 <HAL_SPI_Transmit+0x334>)
 8006666:	4013      	ands	r3, r2
 8006668:	88f9      	ldrh	r1, [r7, #6]
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	6812      	ldr	r2, [r2, #0]
 800666e:	430b      	orrs	r3, r1
 8006670:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f042 0201 	orr.w	r2, r2, #1
 8006680:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800668a:	d107      	bne.n	800669c <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800669a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	2b0f      	cmp	r3, #15
 80066a2:	d947      	bls.n	8006734 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80066a4:	e03f      	b.n	8006726 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	695b      	ldr	r3, [r3, #20]
 80066ac:	f003 0302 	and.w	r3, r3, #2
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	d114      	bne.n	80066de <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	6812      	ldr	r2, [r2, #0]
 80066be:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066c4:	1d1a      	adds	r2, r3, #4
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	3b01      	subs	r3, #1
 80066d4:	b29a      	uxth	r2, r3
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80066dc:	e023      	b.n	8006726 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066de:	f7fc fae3 	bl	8002ca8 <HAL_GetTick>
 80066e2:	4602      	mov	r2, r0
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	1ad3      	subs	r3, r2, r3
 80066e8:	683a      	ldr	r2, [r7, #0]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d803      	bhi.n	80066f6 <HAL_SPI_Transmit+0x16a>
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f4:	d102      	bne.n	80066fc <HAL_SPI_Transmit+0x170>
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d114      	bne.n	8006726 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f000 fcfb 	bl	80070f8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	2200      	movs	r2, #0
 8006706:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006710:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2201      	movs	r2, #1
 800671e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e11f      	b.n	8006966 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800672c:	b29b      	uxth	r3, r3
 800672e:	2b00      	cmp	r3, #0
 8006730:	d1b9      	bne.n	80066a6 <HAL_SPI_Transmit+0x11a>
 8006732:	e0f2      	b.n	800691a <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	2b07      	cmp	r3, #7
 800673a:	f240 80e7 	bls.w	800690c <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800673e:	e05d      	b.n	80067fc <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	695b      	ldr	r3, [r3, #20]
 8006746:	f003 0302 	and.w	r3, r3, #2
 800674a:	2b02      	cmp	r3, #2
 800674c:	d132      	bne.n	80067b4 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006754:	b29b      	uxth	r3, r3
 8006756:	2b01      	cmp	r3, #1
 8006758:	d918      	bls.n	800678c <HAL_SPI_Transmit+0x200>
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800675e:	2b00      	cmp	r3, #0
 8006760:	d014      	beq.n	800678c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	6812      	ldr	r2, [r2, #0]
 800676c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006772:	1d1a      	adds	r2, r3, #4
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800677e:	b29b      	uxth	r3, r3
 8006780:	3b02      	subs	r3, #2
 8006782:	b29a      	uxth	r2, r3
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800678a:	e037      	b.n	80067fc <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006790:	881a      	ldrh	r2, [r3, #0]
 8006792:	69fb      	ldr	r3, [r7, #28]
 8006794:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800679a:	1c9a      	adds	r2, r3, #2
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	3b01      	subs	r3, #1
 80067aa:	b29a      	uxth	r2, r3
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80067b2:	e023      	b.n	80067fc <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067b4:	f7fc fa78 	bl	8002ca8 <HAL_GetTick>
 80067b8:	4602      	mov	r2, r0
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	1ad3      	subs	r3, r2, r3
 80067be:	683a      	ldr	r2, [r7, #0]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d803      	bhi.n	80067cc <HAL_SPI_Transmit+0x240>
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ca:	d102      	bne.n	80067d2 <HAL_SPI_Transmit+0x246>
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d114      	bne.n	80067fc <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80067d2:	68f8      	ldr	r0, [r7, #12]
 80067d4:	f000 fc90 	bl	80070f8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067e6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e0b4      	b.n	8006966 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006802:	b29b      	uxth	r3, r3
 8006804:	2b00      	cmp	r3, #0
 8006806:	d19b      	bne.n	8006740 <HAL_SPI_Transmit+0x1b4>
 8006808:	e087      	b.n	800691a <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	695b      	ldr	r3, [r3, #20]
 8006810:	f003 0302 	and.w	r3, r3, #2
 8006814:	2b02      	cmp	r3, #2
 8006816:	d155      	bne.n	80068c4 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800681e:	b29b      	uxth	r3, r3
 8006820:	2b03      	cmp	r3, #3
 8006822:	d918      	bls.n	8006856 <HAL_SPI_Transmit+0x2ca>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006828:	2b40      	cmp	r3, #64	; 0x40
 800682a:	d914      	bls.n	8006856 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	6812      	ldr	r2, [r2, #0]
 8006836:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800683c:	1d1a      	adds	r2, r3, #4
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006848:	b29b      	uxth	r3, r3
 800684a:	3b04      	subs	r3, #4
 800684c:	b29a      	uxth	r2, r3
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006854:	e05a      	b.n	800690c <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800685c:	b29b      	uxth	r3, r3
 800685e:	2b01      	cmp	r3, #1
 8006860:	d917      	bls.n	8006892 <HAL_SPI_Transmit+0x306>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006866:	2b00      	cmp	r3, #0
 8006868:	d013      	beq.n	8006892 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800686e:	881a      	ldrh	r2, [r3, #0]
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006878:	1c9a      	adds	r2, r3, #2
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006884:	b29b      	uxth	r3, r3
 8006886:	3b02      	subs	r3, #2
 8006888:	b29a      	uxth	r2, r3
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8006890:	e03c      	b.n	800690c <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	3320      	adds	r3, #32
 800689c:	7812      	ldrb	r2, [r2, #0]
 800689e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068a4:	1c5a      	adds	r2, r3, #1
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	3b01      	subs	r3, #1
 80068b4:	b29a      	uxth	r2, r3
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80068bc:	e026      	b.n	800690c <HAL_SPI_Transmit+0x380>
 80068be:	bf00      	nop
 80068c0:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068c4:	f7fc f9f0 	bl	8002ca8 <HAL_GetTick>
 80068c8:	4602      	mov	r2, r0
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	1ad3      	subs	r3, r2, r3
 80068ce:	683a      	ldr	r2, [r7, #0]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d803      	bhi.n	80068dc <HAL_SPI_Transmit+0x350>
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068da:	d102      	bne.n	80068e2 <HAL_SPI_Transmit+0x356>
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d114      	bne.n	800690c <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	f000 fc08 	bl	80070f8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006908:	2303      	movs	r3, #3
 800690a:	e02c      	b.n	8006966 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006912:	b29b      	uxth	r3, r3
 8006914:	2b00      	cmp	r3, #0
 8006916:	f47f af78 	bne.w	800680a <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	9300      	str	r3, [sp, #0]
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	2200      	movs	r2, #0
 8006922:	2108      	movs	r1, #8
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f000 fc87 	bl	8007238 <SPI_WaitOnFlagUntilTimeout>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d007      	beq.n	8006940 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006936:	f043 0220 	orr.w	r2, r3, #32
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	f000 fbd9 	bl	80070f8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2201      	movs	r2, #1
 8006952:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800695c:	2b00      	cmp	r3, #0
 800695e:	d001      	beq.n	8006964 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	e000      	b.n	8006966 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8006964:	7efb      	ldrb	r3, [r7, #27]
}
 8006966:	4618      	mov	r0, r3
 8006968:	3720      	adds	r7, #32
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop

08006970 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b08a      	sub	sp, #40	; 0x28
 8006974:	af02      	add	r7, sp, #8
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	603b      	str	r3, [r7, #0]
 800697c:	4613      	mov	r3, r2
 800697e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006980:	2300      	movs	r3, #0
 8006982:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	3330      	adds	r3, #48	; 0x30
 800698a:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006994:	d112      	bne.n	80069bc <HAL_SPI_Receive+0x4c>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d10e      	bne.n	80069bc <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2204      	movs	r2, #4
 80069a2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80069a6:	88fa      	ldrh	r2, [r7, #6]
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	9300      	str	r3, [sp, #0]
 80069ac:	4613      	mov	r3, r2
 80069ae:	68ba      	ldr	r2, [r7, #8]
 80069b0:	68b9      	ldr	r1, [r7, #8]
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f000 f978 	bl	8006ca8 <HAL_SPI_TransmitReceive>
 80069b8:	4603      	mov	r3, r0
 80069ba:	e16f      	b.n	8006c9c <HAL_SPI_Receive+0x32c>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d101      	bne.n	80069ca <HAL_SPI_Receive+0x5a>
 80069c6:	2302      	movs	r3, #2
 80069c8:	e168      	b.n	8006c9c <HAL_SPI_Receive+0x32c>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2201      	movs	r2, #1
 80069ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069d2:	f7fc f969 	bl	8002ca8 <HAL_GetTick>
 80069d6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d007      	beq.n	80069f4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 80069e4:	2302      	movs	r3, #2
 80069e6:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80069f0:	7ffb      	ldrb	r3, [r7, #31]
 80069f2:	e153      	b.n	8006c9c <HAL_SPI_Receive+0x32c>
  }

  if ((pData == NULL) || (Size == 0UL))
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d002      	beq.n	8006a00 <HAL_SPI_Receive+0x90>
 80069fa:	88fb      	ldrh	r3, [r7, #6]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d107      	bne.n	8006a10 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006a0c:	7ffb      	ldrb	r3, [r7, #31]
 8006a0e:	e145      	b.n	8006c9c <HAL_SPI_Receive+0x32c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2204      	movs	r2, #4
 8006a14:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	68ba      	ldr	r2, [r7, #8]
 8006a24:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	88fa      	ldrh	r2, [r7, #6]
 8006a2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	88fa      	ldrh	r2, [r7, #6]
 8006a32:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2200      	movs	r2, #0
 8006a56:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8006a60:	d107      	bne.n	8006a72 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006a70:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	685a      	ldr	r2, [r3, #4]
 8006a78:	4b8a      	ldr	r3, [pc, #552]	; (8006ca4 <HAL_SPI_Receive+0x334>)
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	88f9      	ldrh	r1, [r7, #6]
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	6812      	ldr	r2, [r2, #0]
 8006a82:	430b      	orrs	r3, r1
 8006a84:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f042 0201 	orr.w	r2, r2, #1
 8006a94:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a9e:	d107      	bne.n	8006ab0 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006aae:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	2b0f      	cmp	r3, #15
 8006ab6:	d948      	bls.n	8006b4a <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006ab8:	e040      	b.n	8006b3c <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	695a      	ldr	r2, [r3, #20]
 8006ac0:	f248 0308 	movw	r3, #32776	; 0x8008
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d014      	beq.n	8006af4 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ad2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006ad4:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ada:	1d1a      	adds	r2, r3, #4
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006af2:	e023      	b.n	8006b3c <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006af4:	f7fc f8d8 	bl	8002ca8 <HAL_GetTick>
 8006af8:	4602      	mov	r2, r0
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	683a      	ldr	r2, [r7, #0]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d803      	bhi.n	8006b0c <HAL_SPI_Receive+0x19c>
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b0a:	d102      	bne.n	8006b12 <HAL_SPI_Receive+0x1a2>
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d114      	bne.n	8006b3c <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f000 faf0 	bl	80070f8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b26:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	e0af      	b.n	8006c9c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1b8      	bne.n	8006aba <HAL_SPI_Receive+0x14a>
 8006b48:	e095      	b.n	8006c76 <HAL_SPI_Receive+0x306>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	2b07      	cmp	r3, #7
 8006b50:	f240 808b 	bls.w	8006c6a <HAL_SPI_Receive+0x2fa>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 8006b54:	e03f      	b.n	8006bd6 <HAL_SPI_Receive+0x266>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	695b      	ldr	r3, [r3, #20]
 8006b5c:	f003 0301 	and.w	r3, r3, #1
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d114      	bne.n	8006b8e <HAL_SPI_Receive+0x21e>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b68:	69ba      	ldr	r2, [r7, #24]
 8006b6a:	8812      	ldrh	r2, [r2, #0]
 8006b6c:	b292      	uxth	r2, r2
 8006b6e:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b74:	1c9a      	adds	r2, r3, #2
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	3b01      	subs	r3, #1
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006b8c:	e023      	b.n	8006bd6 <HAL_SPI_Receive+0x266>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b8e:	f7fc f88b 	bl	8002ca8 <HAL_GetTick>
 8006b92:	4602      	mov	r2, r0
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	1ad3      	subs	r3, r2, r3
 8006b98:	683a      	ldr	r2, [r7, #0]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d803      	bhi.n	8006ba6 <HAL_SPI_Receive+0x236>
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba4:	d102      	bne.n	8006bac <HAL_SPI_Receive+0x23c>
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d114      	bne.n	8006bd6 <HAL_SPI_Receive+0x266>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006bac:	68f8      	ldr	r0, [r7, #12]
 8006bae:	f000 faa3 	bl	80070f8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bc0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006bd2:	2303      	movs	r3, #3
 8006bd4:	e062      	b.n	8006c9c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006bdc:	b29b      	uxth	r3, r3
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d1b9      	bne.n	8006b56 <HAL_SPI_Receive+0x1e6>
 8006be2:	e048      	b.n	8006c76 <HAL_SPI_Receive+0x306>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	695b      	ldr	r3, [r3, #20]
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d117      	bne.n	8006c22 <HAL_SPI_Receive+0x2b2>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bfe:	7812      	ldrb	r2, [r2, #0]
 8006c00:	b2d2      	uxtb	r2, r2
 8006c02:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c08:	1c5a      	adds	r2, r3, #1
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006c14:	b29b      	uxth	r3, r3
 8006c16:	3b01      	subs	r3, #1
 8006c18:	b29a      	uxth	r2, r3
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8006c20:	e023      	b.n	8006c6a <HAL_SPI_Receive+0x2fa>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c22:	f7fc f841 	bl	8002ca8 <HAL_GetTick>
 8006c26:	4602      	mov	r2, r0
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	1ad3      	subs	r3, r2, r3
 8006c2c:	683a      	ldr	r2, [r7, #0]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d803      	bhi.n	8006c3a <HAL_SPI_Receive+0x2ca>
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c38:	d102      	bne.n	8006c40 <HAL_SPI_Receive+0x2d0>
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d114      	bne.n	8006c6a <HAL_SPI_Receive+0x2fa>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f000 fa59 	bl	80070f8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c54:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2201      	movs	r2, #1
 8006c62:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8006c66:	2303      	movs	r3, #3
 8006c68:	e018      	b.n	8006c9c <HAL_SPI_Receive+0x32c>
    while (hspi->RxXferCount > 0UL)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1b6      	bne.n	8006be4 <HAL_SPI_Receive+0x274>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8006c76:	68f8      	ldr	r0, [r7, #12]
 8006c78:	f000 fa3e 	bl	80070f8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2201      	movs	r2, #1
 8006c88:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d001      	beq.n	8006c9a <HAL_SPI_Receive+0x32a>
  {
    return HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e000      	b.n	8006c9c <HAL_SPI_Receive+0x32c>
  }
  return errorcode;
 8006c9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3720      	adds	r7, #32
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}
 8006ca4:	ffff0000 	.word	0xffff0000

08006ca8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b08e      	sub	sp, #56	; 0x38
 8006cac:	af02      	add	r7, sp, #8
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	60b9      	str	r1, [r7, #8]
 8006cb2:	607a      	str	r2, [r7, #4]
 8006cb4:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	3320      	adds	r3, #32
 8006cc2:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	3330      	adds	r3, #48	; 0x30
 8006cca:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d101      	bne.n	8006cda <HAL_SPI_TransmitReceive+0x32>
 8006cd6:	2302      	movs	r3, #2
 8006cd8:	e209      	b.n	80070ee <HAL_SPI_TransmitReceive+0x446>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ce2:	f7fb ffe1 	bl	8002ca8 <HAL_GetTick>
 8006ce6:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 8006ce8:	887b      	ldrh	r3, [r7, #2]
 8006cea:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 8006cec:	887b      	ldrh	r3, [r7, #2]
 8006cee:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006cf6:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006cfe:	7efb      	ldrb	r3, [r7, #27]
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d014      	beq.n	8006d2e <HAL_SPI_TransmitReceive+0x86>
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d0a:	d106      	bne.n	8006d1a <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && \
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	689b      	ldr	r3, [r3, #8]
        ((tmp_mode == SPI_MODE_MASTER) && \
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d102      	bne.n	8006d1a <HAL_SPI_TransmitReceive+0x72>
         (hspi->Init.Direction == SPI_DIRECTION_2LINES) && \
 8006d14:	7efb      	ldrb	r3, [r7, #27]
 8006d16:	2b04      	cmp	r3, #4
 8006d18:	d009      	beq.n	8006d2e <HAL_SPI_TransmitReceive+0x86>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    errorcode = HAL_BUSY;
 8006d1a:	2302      	movs	r3, #2
 8006d1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006d28:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006d2c:	e1df      	b.n	80070ee <HAL_SPI_TransmitReceive+0x446>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d005      	beq.n	8006d40 <HAL_SPI_TransmitReceive+0x98>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d002      	beq.n	8006d40 <HAL_SPI_TransmitReceive+0x98>
 8006d3a:	887b      	ldrh	r3, [r7, #2]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d109      	bne.n	8006d54 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8006d4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006d52:	e1cc      	b.n	80070ee <HAL_SPI_TransmitReceive+0x446>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	2b04      	cmp	r3, #4
 8006d5e:	d003      	beq.n	8006d68 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2205      	movs	r2, #5
 8006d64:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	687a      	ldr	r2, [r7, #4]
 8006d74:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	887a      	ldrh	r2, [r7, #2]
 8006d7a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	887a      	ldrh	r2, [r7, #2]
 8006d82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	68ba      	ldr	r2, [r7, #8]
 8006d8a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	887a      	ldrh	r2, [r7, #2]
 8006d90:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	887a      	ldrh	r2, [r7, #2]
 8006d98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2200      	movs	r2, #0
 8006da6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	685a      	ldr	r2, [r3, #4]
 8006dae:	4b82      	ldr	r3, [pc, #520]	; (8006fb8 <HAL_SPI_TransmitReceive+0x310>)
 8006db0:	4013      	ands	r3, r2
 8006db2:	8879      	ldrh	r1, [r7, #2]
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	6812      	ldr	r2, [r2, #0]
 8006db8:	430b      	orrs	r3, r1
 8006dba:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681a      	ldr	r2, [r3, #0]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f042 0201 	orr.w	r2, r2, #1
 8006dca:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006dd4:	d107      	bne.n	8006de6 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006de4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	2b0f      	cmp	r3, #15
 8006dec:	d970      	bls.n	8006ed0 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006dee:	e068      	b.n	8006ec2 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	695b      	ldr	r3, [r3, #20]
 8006df6:	f003 0302 	and.w	r3, r3, #2
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	d11a      	bne.n	8006e34 <HAL_SPI_TransmitReceive+0x18c>
 8006dfe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d017      	beq.n	8006e34 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	6812      	ldr	r2, [r2, #0]
 8006e0e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e14:	1d1a      	adds	r2, r3, #4
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006e20:	b29b      	uxth	r3, r3
 8006e22:	3b01      	subs	r3, #1
 8006e24:	b29a      	uxth	r2, r3
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006e32:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	695a      	ldr	r2, [r3, #20]
 8006e3a:	f248 0308 	movw	r3, #32776	; 0x8008
 8006e3e:	4013      	ands	r3, r2
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d01a      	beq.n	8006e7a <HAL_SPI_TransmitReceive+0x1d2>
 8006e44:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d017      	beq.n	8006e7a <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e52:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006e54:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e5a:	1d1a      	adds	r2, r3, #4
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006e66:	b29b      	uxth	r3, r3
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006e78:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e7a:	f7fb ff15 	bl	8002ca8 <HAL_GetTick>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	1ad3      	subs	r3, r2, r3
 8006e84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d803      	bhi.n	8006e92 <HAL_SPI_TransmitReceive+0x1ea>
 8006e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e90:	d102      	bne.n	8006e98 <HAL_SPI_TransmitReceive+0x1f0>
 8006e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d114      	bne.n	8006ec2 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f000 f92d 	bl	80070f8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006eac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	e115      	b.n	80070ee <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006ec2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d193      	bne.n	8006df0 <HAL_SPI_TransmitReceive+0x148>
 8006ec8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d190      	bne.n	8006df0 <HAL_SPI_TransmitReceive+0x148>
 8006ece:	e0e7      	b.n	80070a0 <HAL_SPI_TransmitReceive+0x3f8>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	2b07      	cmp	r3, #7
 8006ed6:	f240 80dd 	bls.w	8007094 <HAL_SPI_TransmitReceive+0x3ec>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006eda:	e066      	b.n	8006faa <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check the TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	695b      	ldr	r3, [r3, #20]
 8006ee2:	f003 0302 	and.w	r3, r3, #2
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d119      	bne.n	8006f1e <HAL_SPI_TransmitReceive+0x276>
 8006eea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d016      	beq.n	8006f1e <HAL_SPI_TransmitReceive+0x276>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ef4:	881a      	ldrh	r2, [r3, #0]
 8006ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef8:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006efe:	1c9a      	adds	r2, r3, #2
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	b29a      	uxth	r2, r3
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006f1c:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	695b      	ldr	r3, [r3, #20]
 8006f24:	f003 0301 	and.w	r3, r3, #1
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d11a      	bne.n	8006f62 <HAL_SPI_TransmitReceive+0x2ba>
 8006f2c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d017      	beq.n	8006f62 <HAL_SPI_TransmitReceive+0x2ba>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f36:	6a3a      	ldr	r2, [r7, #32]
 8006f38:	8812      	ldrh	r2, [r2, #0]
 8006f3a:	b292      	uxth	r2, r2
 8006f3c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f42:	1c9a      	adds	r2, r3, #2
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	3b01      	subs	r3, #1
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8006f60:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f62:	f7fb fea1 	bl	8002ca8 <HAL_GetTick>
 8006f66:	4602      	mov	r2, r0
 8006f68:	69fb      	ldr	r3, [r7, #28]
 8006f6a:	1ad3      	subs	r3, r2, r3
 8006f6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d803      	bhi.n	8006f7a <HAL_SPI_TransmitReceive+0x2d2>
 8006f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f78:	d102      	bne.n	8006f80 <HAL_SPI_TransmitReceive+0x2d8>
 8006f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d114      	bne.n	8006faa <HAL_SPI_TransmitReceive+0x302>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 8006f80:	68f8      	ldr	r0, [r7, #12]
 8006f82:	f000 f8b9 	bl	80070f8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8006fa6:	2303      	movs	r3, #3
 8006fa8:	e0a1      	b.n	80070ee <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8006faa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d195      	bne.n	8006edc <HAL_SPI_TransmitReceive+0x234>
 8006fb0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d192      	bne.n	8006edc <HAL_SPI_TransmitReceive+0x234>
 8006fb6:	e073      	b.n	80070a0 <HAL_SPI_TransmitReceive+0x3f8>
 8006fb8:	ffff0000 	.word	0xffff0000
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	695b      	ldr	r3, [r3, #20]
 8006fc2:	f003 0302 	and.w	r3, r3, #2
 8006fc6:	2b02      	cmp	r3, #2
 8006fc8:	d11b      	bne.n	8007002 <HAL_SPI_TransmitReceive+0x35a>
 8006fca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d018      	beq.n	8007002 <HAL_SPI_TransmitReceive+0x35a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	3320      	adds	r3, #32
 8006fda:	7812      	ldrb	r2, [r2, #0]
 8006fdc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fe2:	1c5a      	adds	r2, r3, #1
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	b29a      	uxth	r2, r3
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007000:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check the RXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP)) && (initial_RxXferCount > 0UL))
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	695b      	ldr	r3, [r3, #20]
 8007008:	f003 0301 	and.w	r3, r3, #1
 800700c:	2b01      	cmp	r3, #1
 800700e:	d11d      	bne.n	800704c <HAL_SPI_TransmitReceive+0x3a4>
 8007010:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007012:	2b00      	cmp	r3, #0
 8007014:	d01a      	beq.n	800704c <HAL_SPI_TransmitReceive+0x3a4>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007022:	7812      	ldrb	r2, [r2, #0]
 8007024:	b2d2      	uxtb	r2, r2
 8007026:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800702c:	1c5a      	adds	r2, r3, #1
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007038:	b29b      	uxth	r3, r3
 800703a:	3b01      	subs	r3, #1
 800703c:	b29a      	uxth	r2, r3
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800704a:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800704c:	f7fb fe2c 	bl	8002ca8 <HAL_GetTick>
 8007050:	4602      	mov	r2, r0
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	1ad3      	subs	r3, r2, r3
 8007056:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007058:	429a      	cmp	r2, r3
 800705a:	d803      	bhi.n	8007064 <HAL_SPI_TransmitReceive+0x3bc>
 800705c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007062:	d102      	bne.n	800706a <HAL_SPI_TransmitReceive+0x3c2>
 8007064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007066:	2b00      	cmp	r3, #0
 8007068:	d114      	bne.n	8007094 <HAL_SPI_TransmitReceive+0x3ec>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800706a:	68f8      	ldr	r0, [r7, #12]
 800706c:	f000 f844 	bl	80070f8 <SPI_CloseTransfer>

        /* Unlock the process */
        __HAL_UNLOCK(hspi);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800707e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_TIMEOUT;
 8007090:	2303      	movs	r3, #3
 8007092:	e02c      	b.n	80070ee <HAL_SPI_TransmitReceive+0x446>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 8007094:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007096:	2b00      	cmp	r3, #0
 8007098:	d190      	bne.n	8006fbc <HAL_SPI_TransmitReceive+0x314>
 800709a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800709c:	2b00      	cmp	r3, #0
 800709e:	d18d      	bne.n	8006fbc <HAL_SPI_TransmitReceive+0x314>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80070a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070a2:	9300      	str	r3, [sp, #0]
 80070a4:	69fb      	ldr	r3, [r7, #28]
 80070a6:	2200      	movs	r2, #0
 80070a8:	2108      	movs	r1, #8
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	f000 f8c4 	bl	8007238 <SPI_WaitOnFlagUntilTimeout>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d007      	beq.n	80070c6 <HAL_SPI_TransmitReceive+0x41e>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070bc:	f043 0220 	orr.w	r2, r3, #32
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f000 f816 	bl	80070f8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d001      	beq.n	80070ea <HAL_SPI_TransmitReceive+0x442>
  {
    return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e001      	b.n	80070ee <HAL_SPI_TransmitReceive+0x446>
  }
  return errorcode;
 80070ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3730      	adds	r7, #48	; 0x30
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop

080070f8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	695b      	ldr	r3, [r3, #20]
 8007106:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	699a      	ldr	r2, [r3, #24]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f042 0208 	orr.w	r2, r2, #8
 8007116:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	699a      	ldr	r2, [r3, #24]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f042 0210 	orr.w	r2, r2, #16
 8007126:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f022 0201 	bic.w	r2, r2, #1
 8007136:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	6919      	ldr	r1, [r3, #16]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	4b3c      	ldr	r3, [pc, #240]	; (8007234 <SPI_CloseTransfer+0x13c>)
 8007144:	400b      	ands	r3, r1
 8007146:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	689a      	ldr	r2, [r3, #8]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007156:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800715e:	b2db      	uxtb	r3, r3
 8007160:	2b04      	cmp	r3, #4
 8007162:	d014      	beq.n	800718e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f003 0320 	and.w	r3, r3, #32
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00f      	beq.n	800718e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007174:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	699a      	ldr	r2, [r3, #24]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f042 0220 	orr.w	r2, r2, #32
 800718c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007194:	b2db      	uxtb	r3, r3
 8007196:	2b03      	cmp	r3, #3
 8007198:	d014      	beq.n	80071c4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d00f      	beq.n	80071c4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071aa:	f043 0204 	orr.w	r2, r3, #4
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	699a      	ldr	r2, [r3, #24]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071c2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00f      	beq.n	80071ee <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071d4:	f043 0201 	orr.w	r2, r3, #1
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	699a      	ldr	r2, [r3, #24]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071ec:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00f      	beq.n	8007218 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071fe:	f043 0208 	orr.w	r2, r3, #8
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	699a      	ldr	r2, [r3, #24]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007216:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8007228:	bf00      	nop
 800722a:	3714      	adds	r7, #20
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr
 8007234:	fffffc90 	.word	0xfffffc90

08007238 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	60b9      	str	r1, [r7, #8]
 8007242:	603b      	str	r3, [r7, #0]
 8007244:	4613      	mov	r3, r2
 8007246:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8007248:	e010      	b.n	800726c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800724a:	f7fb fd2d 	bl	8002ca8 <HAL_GetTick>
 800724e:	4602      	mov	r2, r0
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	1ad3      	subs	r3, r2, r3
 8007254:	69ba      	ldr	r2, [r7, #24]
 8007256:	429a      	cmp	r2, r3
 8007258:	d803      	bhi.n	8007262 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007260:	d102      	bne.n	8007268 <SPI_WaitOnFlagUntilTimeout+0x30>
 8007262:	69bb      	ldr	r3, [r7, #24]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d101      	bne.n	800726c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8007268:	2303      	movs	r3, #3
 800726a:	e00f      	b.n	800728c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	695a      	ldr	r2, [r3, #20]
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	4013      	ands	r3, r2
 8007276:	68ba      	ldr	r2, [r7, #8]
 8007278:	429a      	cmp	r2, r3
 800727a:	bf0c      	ite	eq
 800727c:	2301      	moveq	r3, #1
 800727e:	2300      	movne	r3, #0
 8007280:	b2db      	uxtb	r3, r3
 8007282:	461a      	mov	r2, r3
 8007284:	79fb      	ldrb	r3, [r7, #7]
 8007286:	429a      	cmp	r2, r3
 8007288:	d0df      	beq.n	800724a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800728a:	2300      	movs	r3, #0
}
 800728c:	4618      	mov	r0, r3
 800728e:	3710      	adds	r7, #16
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8007294:	b480      	push	{r7}
 8007296:	b085      	sub	sp, #20
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072a0:	095b      	lsrs	r3, r3, #5
 80072a2:	3301      	adds	r3, #1
 80072a4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	3301      	adds	r3, #1
 80072ac:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	3307      	adds	r3, #7
 80072b2:	08db      	lsrs	r3, r3, #3
 80072b4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	68fa      	ldr	r2, [r7, #12]
 80072ba:	fb02 f303 	mul.w	r3, r2, r3
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3714      	adds	r7, #20
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr

080072ca <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b082      	sub	sp, #8
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d101      	bne.n	80072dc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	e049      	b.n	8007370 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d106      	bne.n	80072f6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f7fb fa33 	bl	800275c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2202      	movs	r2, #2
 80072fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	3304      	adds	r3, #4
 8007306:	4619      	mov	r1, r3
 8007308:	4610      	mov	r0, r2
 800730a:	f000 fd03 	bl	8007d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2201      	movs	r2, #1
 8007312:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2201      	movs	r2, #1
 800731a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2201      	movs	r2, #1
 8007322:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2201      	movs	r2, #1
 800732a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2201      	movs	r2, #1
 8007332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2201      	movs	r2, #1
 800733a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2201      	movs	r2, #1
 8007342:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2201      	movs	r2, #1
 800734a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2201      	movs	r2, #1
 8007352:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2201      	movs	r2, #1
 800735a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2201      	movs	r2, #1
 8007362:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2201      	movs	r2, #1
 800736a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800736e:	2300      	movs	r3, #0
}
 8007370:	4618      	mov	r0, r3
 8007372:	3708      	adds	r7, #8
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d101      	bne.n	800738a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007386:	2301      	movs	r3, #1
 8007388:	e049      	b.n	800741e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007390:	b2db      	uxtb	r3, r3
 8007392:	2b00      	cmp	r3, #0
 8007394:	d106      	bne.n	80073a4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 f841 	bl	8007426 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2202      	movs	r2, #2
 80073a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	3304      	adds	r3, #4
 80073b4:	4619      	mov	r1, r3
 80073b6:	4610      	mov	r0, r2
 80073b8:	f000 fcac 	bl	8007d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3708      	adds	r7, #8
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}

08007426 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007426:	b480      	push	{r7}
 8007428:	b083      	sub	sp, #12
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800742e:	bf00      	nop
 8007430:	370c      	adds	r7, #12
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr
	...

0800743c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d109      	bne.n	8007460 <HAL_TIM_PWM_Start+0x24>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007452:	b2db      	uxtb	r3, r3
 8007454:	2b01      	cmp	r3, #1
 8007456:	bf14      	ite	ne
 8007458:	2301      	movne	r3, #1
 800745a:	2300      	moveq	r3, #0
 800745c:	b2db      	uxtb	r3, r3
 800745e:	e03c      	b.n	80074da <HAL_TIM_PWM_Start+0x9e>
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	2b04      	cmp	r3, #4
 8007464:	d109      	bne.n	800747a <HAL_TIM_PWM_Start+0x3e>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800746c:	b2db      	uxtb	r3, r3
 800746e:	2b01      	cmp	r3, #1
 8007470:	bf14      	ite	ne
 8007472:	2301      	movne	r3, #1
 8007474:	2300      	moveq	r3, #0
 8007476:	b2db      	uxtb	r3, r3
 8007478:	e02f      	b.n	80074da <HAL_TIM_PWM_Start+0x9e>
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	2b08      	cmp	r3, #8
 800747e:	d109      	bne.n	8007494 <HAL_TIM_PWM_Start+0x58>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007486:	b2db      	uxtb	r3, r3
 8007488:	2b01      	cmp	r3, #1
 800748a:	bf14      	ite	ne
 800748c:	2301      	movne	r3, #1
 800748e:	2300      	moveq	r3, #0
 8007490:	b2db      	uxtb	r3, r3
 8007492:	e022      	b.n	80074da <HAL_TIM_PWM_Start+0x9e>
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	2b0c      	cmp	r3, #12
 8007498:	d109      	bne.n	80074ae <HAL_TIM_PWM_Start+0x72>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	bf14      	ite	ne
 80074a6:	2301      	movne	r3, #1
 80074a8:	2300      	moveq	r3, #0
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	e015      	b.n	80074da <HAL_TIM_PWM_Start+0x9e>
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	2b10      	cmp	r3, #16
 80074b2:	d109      	bne.n	80074c8 <HAL_TIM_PWM_Start+0x8c>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	2b01      	cmp	r3, #1
 80074be:	bf14      	ite	ne
 80074c0:	2301      	movne	r3, #1
 80074c2:	2300      	moveq	r3, #0
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	e008      	b.n	80074da <HAL_TIM_PWM_Start+0x9e>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	bf14      	ite	ne
 80074d4:	2301      	movne	r3, #1
 80074d6:	2300      	moveq	r3, #0
 80074d8:	b2db      	uxtb	r3, r3
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d001      	beq.n	80074e2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	e0a1      	b.n	8007626 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d104      	bne.n	80074f2 <HAL_TIM_PWM_Start+0xb6>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2202      	movs	r2, #2
 80074ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074f0:	e023      	b.n	800753a <HAL_TIM_PWM_Start+0xfe>
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	2b04      	cmp	r3, #4
 80074f6:	d104      	bne.n	8007502 <HAL_TIM_PWM_Start+0xc6>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2202      	movs	r2, #2
 80074fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007500:	e01b      	b.n	800753a <HAL_TIM_PWM_Start+0xfe>
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	2b08      	cmp	r3, #8
 8007506:	d104      	bne.n	8007512 <HAL_TIM_PWM_Start+0xd6>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2202      	movs	r2, #2
 800750c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007510:	e013      	b.n	800753a <HAL_TIM_PWM_Start+0xfe>
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	2b0c      	cmp	r3, #12
 8007516:	d104      	bne.n	8007522 <HAL_TIM_PWM_Start+0xe6>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2202      	movs	r2, #2
 800751c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007520:	e00b      	b.n	800753a <HAL_TIM_PWM_Start+0xfe>
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	2b10      	cmp	r3, #16
 8007526:	d104      	bne.n	8007532 <HAL_TIM_PWM_Start+0xf6>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2202      	movs	r2, #2
 800752c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007530:	e003      	b.n	800753a <HAL_TIM_PWM_Start+0xfe>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2202      	movs	r2, #2
 8007536:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2201      	movs	r2, #1
 8007540:	6839      	ldr	r1, [r7, #0]
 8007542:	4618      	mov	r0, r3
 8007544:	f000 fff4 	bl	8008530 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a38      	ldr	r2, [pc, #224]	; (8007630 <HAL_TIM_PWM_Start+0x1f4>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d013      	beq.n	800757a <HAL_TIM_PWM_Start+0x13e>
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a37      	ldr	r2, [pc, #220]	; (8007634 <HAL_TIM_PWM_Start+0x1f8>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d00e      	beq.n	800757a <HAL_TIM_PWM_Start+0x13e>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4a35      	ldr	r2, [pc, #212]	; (8007638 <HAL_TIM_PWM_Start+0x1fc>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d009      	beq.n	800757a <HAL_TIM_PWM_Start+0x13e>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a34      	ldr	r2, [pc, #208]	; (800763c <HAL_TIM_PWM_Start+0x200>)
 800756c:	4293      	cmp	r3, r2
 800756e:	d004      	beq.n	800757a <HAL_TIM_PWM_Start+0x13e>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a32      	ldr	r2, [pc, #200]	; (8007640 <HAL_TIM_PWM_Start+0x204>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d101      	bne.n	800757e <HAL_TIM_PWM_Start+0x142>
 800757a:	2301      	movs	r3, #1
 800757c:	e000      	b.n	8007580 <HAL_TIM_PWM_Start+0x144>
 800757e:	2300      	movs	r3, #0
 8007580:	2b00      	cmp	r3, #0
 8007582:	d007      	beq.n	8007594 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007592:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a25      	ldr	r2, [pc, #148]	; (8007630 <HAL_TIM_PWM_Start+0x1f4>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d022      	beq.n	80075e4 <HAL_TIM_PWM_Start+0x1a8>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075a6:	d01d      	beq.n	80075e4 <HAL_TIM_PWM_Start+0x1a8>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a25      	ldr	r2, [pc, #148]	; (8007644 <HAL_TIM_PWM_Start+0x208>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d018      	beq.n	80075e4 <HAL_TIM_PWM_Start+0x1a8>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a24      	ldr	r2, [pc, #144]	; (8007648 <HAL_TIM_PWM_Start+0x20c>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d013      	beq.n	80075e4 <HAL_TIM_PWM_Start+0x1a8>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a22      	ldr	r2, [pc, #136]	; (800764c <HAL_TIM_PWM_Start+0x210>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d00e      	beq.n	80075e4 <HAL_TIM_PWM_Start+0x1a8>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a1a      	ldr	r2, [pc, #104]	; (8007634 <HAL_TIM_PWM_Start+0x1f8>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d009      	beq.n	80075e4 <HAL_TIM_PWM_Start+0x1a8>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a1e      	ldr	r2, [pc, #120]	; (8007650 <HAL_TIM_PWM_Start+0x214>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d004      	beq.n	80075e4 <HAL_TIM_PWM_Start+0x1a8>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a16      	ldr	r2, [pc, #88]	; (8007638 <HAL_TIM_PWM_Start+0x1fc>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d115      	bne.n	8007610 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	689a      	ldr	r2, [r3, #8]
 80075ea:	4b1a      	ldr	r3, [pc, #104]	; (8007654 <HAL_TIM_PWM_Start+0x218>)
 80075ec:	4013      	ands	r3, r2
 80075ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2b06      	cmp	r3, #6
 80075f4:	d015      	beq.n	8007622 <HAL_TIM_PWM_Start+0x1e6>
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075fc:	d011      	beq.n	8007622 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f042 0201 	orr.w	r2, r2, #1
 800760c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800760e:	e008      	b.n	8007622 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f042 0201 	orr.w	r2, r2, #1
 800761e:	601a      	str	r2, [r3, #0]
 8007620:	e000      	b.n	8007624 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007622:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3710      	adds	r7, #16
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
 800762e:	bf00      	nop
 8007630:	40010000 	.word	0x40010000
 8007634:	40010400 	.word	0x40010400
 8007638:	40014000 	.word	0x40014000
 800763c:	40014400 	.word	0x40014400
 8007640:	40014800 	.word	0x40014800
 8007644:	40000400 	.word	0x40000400
 8007648:	40000800 	.word	0x40000800
 800764c:	40000c00 	.word	0x40000c00
 8007650:	40001800 	.word	0x40001800
 8007654:	00010007 	.word	0x00010007

08007658 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b082      	sub	sp, #8
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	691b      	ldr	r3, [r3, #16]
 8007666:	f003 0302 	and.w	r3, r3, #2
 800766a:	2b02      	cmp	r3, #2
 800766c:	d122      	bne.n	80076b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	f003 0302 	and.w	r3, r3, #2
 8007678:	2b02      	cmp	r3, #2
 800767a:	d11b      	bne.n	80076b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f06f 0202 	mvn.w	r2, #2
 8007684:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2201      	movs	r2, #1
 800768a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	f003 0303 	and.w	r3, r3, #3
 8007696:	2b00      	cmp	r3, #0
 8007698:	d003      	beq.n	80076a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 fb1c 	bl	8007cd8 <HAL_TIM_IC_CaptureCallback>
 80076a0:	e005      	b.n	80076ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f000 fb0e 	bl	8007cc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 fb1f 	bl	8007cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	2200      	movs	r2, #0
 80076b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	f003 0304 	and.w	r3, r3, #4
 80076be:	2b04      	cmp	r3, #4
 80076c0:	d122      	bne.n	8007708 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	f003 0304 	and.w	r3, r3, #4
 80076cc:	2b04      	cmp	r3, #4
 80076ce:	d11b      	bne.n	8007708 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f06f 0204 	mvn.w	r2, #4
 80076d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2202      	movs	r2, #2
 80076de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	699b      	ldr	r3, [r3, #24]
 80076e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d003      	beq.n	80076f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 faf2 	bl	8007cd8 <HAL_TIM_IC_CaptureCallback>
 80076f4:	e005      	b.n	8007702 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f000 fae4 	bl	8007cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 faf5 	bl	8007cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	f003 0308 	and.w	r3, r3, #8
 8007712:	2b08      	cmp	r3, #8
 8007714:	d122      	bne.n	800775c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	68db      	ldr	r3, [r3, #12]
 800771c:	f003 0308 	and.w	r3, r3, #8
 8007720:	2b08      	cmp	r3, #8
 8007722:	d11b      	bne.n	800775c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f06f 0208 	mvn.w	r2, #8
 800772c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2204      	movs	r2, #4
 8007732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	69db      	ldr	r3, [r3, #28]
 800773a:	f003 0303 	and.w	r3, r3, #3
 800773e:	2b00      	cmp	r3, #0
 8007740:	d003      	beq.n	800774a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 fac8 	bl	8007cd8 <HAL_TIM_IC_CaptureCallback>
 8007748:	e005      	b.n	8007756 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 faba 	bl	8007cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 facb 	bl	8007cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	f003 0310 	and.w	r3, r3, #16
 8007766:	2b10      	cmp	r3, #16
 8007768:	d122      	bne.n	80077b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	f003 0310 	and.w	r3, r3, #16
 8007774:	2b10      	cmp	r3, #16
 8007776:	d11b      	bne.n	80077b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f06f 0210 	mvn.w	r2, #16
 8007780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2208      	movs	r2, #8
 8007786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	69db      	ldr	r3, [r3, #28]
 800778e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007792:	2b00      	cmp	r3, #0
 8007794:	d003      	beq.n	800779e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 fa9e 	bl	8007cd8 <HAL_TIM_IC_CaptureCallback>
 800779c:	e005      	b.n	80077aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 fa90 	bl	8007cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 faa1 	bl	8007cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	f003 0301 	and.w	r3, r3, #1
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d10e      	bne.n	80077dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	f003 0301 	and.w	r3, r3, #1
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d107      	bne.n	80077dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f06f 0201 	mvn.w	r2, #1
 80077d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 fa6a 	bl	8007cb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077e6:	2b80      	cmp	r3, #128	; 0x80
 80077e8:	d10e      	bne.n	8007808 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077f4:	2b80      	cmp	r3, #128	; 0x80
 80077f6:	d107      	bne.n	8007808 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 ff52 	bl	80086ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007816:	d10e      	bne.n	8007836 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68db      	ldr	r3, [r3, #12]
 800781e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007822:	2b80      	cmp	r3, #128	; 0x80
 8007824:	d107      	bne.n	8007836 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800782e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 ff45 	bl	80086c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007840:	2b40      	cmp	r3, #64	; 0x40
 8007842:	d10e      	bne.n	8007862 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800784e:	2b40      	cmp	r3, #64	; 0x40
 8007850:	d107      	bne.n	8007862 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800785a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 fa4f 	bl	8007d00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	f003 0320 	and.w	r3, r3, #32
 800786c:	2b20      	cmp	r3, #32
 800786e:	d10e      	bne.n	800788e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	68db      	ldr	r3, [r3, #12]
 8007876:	f003 0320 	and.w	r3, r3, #32
 800787a:	2b20      	cmp	r3, #32
 800787c:	d107      	bne.n	800788e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f06f 0220 	mvn.w	r2, #32
 8007886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 ff05 	bl	8008698 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800788e:	bf00      	nop
 8007890:	3708      	adds	r7, #8
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
	...

08007898 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b086      	sub	sp, #24
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80078a4:	2300      	movs	r3, #0
 80078a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d101      	bne.n	80078b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80078b2:	2302      	movs	r3, #2
 80078b4:	e0ff      	b.n	8007ab6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2201      	movs	r2, #1
 80078ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2b14      	cmp	r3, #20
 80078c2:	f200 80f0 	bhi.w	8007aa6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80078c6:	a201      	add	r2, pc, #4	; (adr r2, 80078cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80078c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078cc:	08007921 	.word	0x08007921
 80078d0:	08007aa7 	.word	0x08007aa7
 80078d4:	08007aa7 	.word	0x08007aa7
 80078d8:	08007aa7 	.word	0x08007aa7
 80078dc:	08007961 	.word	0x08007961
 80078e0:	08007aa7 	.word	0x08007aa7
 80078e4:	08007aa7 	.word	0x08007aa7
 80078e8:	08007aa7 	.word	0x08007aa7
 80078ec:	080079a3 	.word	0x080079a3
 80078f0:	08007aa7 	.word	0x08007aa7
 80078f4:	08007aa7 	.word	0x08007aa7
 80078f8:	08007aa7 	.word	0x08007aa7
 80078fc:	080079e3 	.word	0x080079e3
 8007900:	08007aa7 	.word	0x08007aa7
 8007904:	08007aa7 	.word	0x08007aa7
 8007908:	08007aa7 	.word	0x08007aa7
 800790c:	08007a25 	.word	0x08007a25
 8007910:	08007aa7 	.word	0x08007aa7
 8007914:	08007aa7 	.word	0x08007aa7
 8007918:	08007aa7 	.word	0x08007aa7
 800791c:	08007a65 	.word	0x08007a65
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	68b9      	ldr	r1, [r7, #8]
 8007926:	4618      	mov	r0, r3
 8007928:	f000 fa8e 	bl	8007e48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	699a      	ldr	r2, [r3, #24]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f042 0208 	orr.w	r2, r2, #8
 800793a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	699a      	ldr	r2, [r3, #24]
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f022 0204 	bic.w	r2, r2, #4
 800794a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	6999      	ldr	r1, [r3, #24]
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	691a      	ldr	r2, [r3, #16]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	430a      	orrs	r2, r1
 800795c:	619a      	str	r2, [r3, #24]
      break;
 800795e:	e0a5      	b.n	8007aac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	68b9      	ldr	r1, [r7, #8]
 8007966:	4618      	mov	r0, r3
 8007968:	f000 fafe 	bl	8007f68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	699a      	ldr	r2, [r3, #24]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800797a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	699a      	ldr	r2, [r3, #24]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800798a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	6999      	ldr	r1, [r3, #24]
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	691b      	ldr	r3, [r3, #16]
 8007996:	021a      	lsls	r2, r3, #8
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	430a      	orrs	r2, r1
 800799e:	619a      	str	r2, [r3, #24]
      break;
 80079a0:	e084      	b.n	8007aac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	68b9      	ldr	r1, [r7, #8]
 80079a8:	4618      	mov	r0, r3
 80079aa:	f000 fb67 	bl	800807c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	69da      	ldr	r2, [r3, #28]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f042 0208 	orr.w	r2, r2, #8
 80079bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	69da      	ldr	r2, [r3, #28]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f022 0204 	bic.w	r2, r2, #4
 80079cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	69d9      	ldr	r1, [r3, #28]
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	691a      	ldr	r2, [r3, #16]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	430a      	orrs	r2, r1
 80079de:	61da      	str	r2, [r3, #28]
      break;
 80079e0:	e064      	b.n	8007aac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	68b9      	ldr	r1, [r7, #8]
 80079e8:	4618      	mov	r0, r3
 80079ea:	f000 fbcf 	bl	800818c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	69da      	ldr	r2, [r3, #28]
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	69da      	ldr	r2, [r3, #28]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	69d9      	ldr	r1, [r3, #28]
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	691b      	ldr	r3, [r3, #16]
 8007a18:	021a      	lsls	r2, r3, #8
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	430a      	orrs	r2, r1
 8007a20:	61da      	str	r2, [r3, #28]
      break;
 8007a22:	e043      	b.n	8007aac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	68b9      	ldr	r1, [r7, #8]
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f000 fc18 	bl	8008260 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f042 0208 	orr.w	r2, r2, #8
 8007a3e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f022 0204 	bic.w	r2, r2, #4
 8007a4e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	691a      	ldr	r2, [r3, #16]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	430a      	orrs	r2, r1
 8007a60:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007a62:	e023      	b.n	8007aac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68b9      	ldr	r1, [r7, #8]
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f000 fc5c 	bl	8008328 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a7e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a8e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	691b      	ldr	r3, [r3, #16]
 8007a9a:	021a      	lsls	r2, r3, #8
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	430a      	orrs	r2, r1
 8007aa2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007aa4:	e002      	b.n	8007aac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	75fb      	strb	r3, [r7, #23]
      break;
 8007aaa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007ab4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3718      	adds	r7, #24
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop

08007ac0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007aca:	2300      	movs	r3, #0
 8007acc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d101      	bne.n	8007adc <HAL_TIM_ConfigClockSource+0x1c>
 8007ad8:	2302      	movs	r3, #2
 8007ada:	e0dc      	b.n	8007c96 <HAL_TIM_ConfigClockSource+0x1d6>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2202      	movs	r2, #2
 8007ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007af4:	68ba      	ldr	r2, [r7, #8]
 8007af6:	4b6a      	ldr	r3, [pc, #424]	; (8007ca0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007af8:	4013      	ands	r3, r2
 8007afa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	68ba      	ldr	r2, [r7, #8]
 8007b0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a64      	ldr	r2, [pc, #400]	; (8007ca4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	f000 80a9 	beq.w	8007c6a <HAL_TIM_ConfigClockSource+0x1aa>
 8007b18:	4a62      	ldr	r2, [pc, #392]	; (8007ca4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	f200 80ae 	bhi.w	8007c7c <HAL_TIM_ConfigClockSource+0x1bc>
 8007b20:	4a61      	ldr	r2, [pc, #388]	; (8007ca8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	f000 80a1 	beq.w	8007c6a <HAL_TIM_ConfigClockSource+0x1aa>
 8007b28:	4a5f      	ldr	r2, [pc, #380]	; (8007ca8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	f200 80a6 	bhi.w	8007c7c <HAL_TIM_ConfigClockSource+0x1bc>
 8007b30:	4a5e      	ldr	r2, [pc, #376]	; (8007cac <HAL_TIM_ConfigClockSource+0x1ec>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	f000 8099 	beq.w	8007c6a <HAL_TIM_ConfigClockSource+0x1aa>
 8007b38:	4a5c      	ldr	r2, [pc, #368]	; (8007cac <HAL_TIM_ConfigClockSource+0x1ec>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	f200 809e 	bhi.w	8007c7c <HAL_TIM_ConfigClockSource+0x1bc>
 8007b40:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007b44:	f000 8091 	beq.w	8007c6a <HAL_TIM_ConfigClockSource+0x1aa>
 8007b48:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007b4c:	f200 8096 	bhi.w	8007c7c <HAL_TIM_ConfigClockSource+0x1bc>
 8007b50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b54:	f000 8089 	beq.w	8007c6a <HAL_TIM_ConfigClockSource+0x1aa>
 8007b58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b5c:	f200 808e 	bhi.w	8007c7c <HAL_TIM_ConfigClockSource+0x1bc>
 8007b60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b64:	d03e      	beq.n	8007be4 <HAL_TIM_ConfigClockSource+0x124>
 8007b66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b6a:	f200 8087 	bhi.w	8007c7c <HAL_TIM_ConfigClockSource+0x1bc>
 8007b6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b72:	f000 8086 	beq.w	8007c82 <HAL_TIM_ConfigClockSource+0x1c2>
 8007b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b7a:	d87f      	bhi.n	8007c7c <HAL_TIM_ConfigClockSource+0x1bc>
 8007b7c:	2b70      	cmp	r3, #112	; 0x70
 8007b7e:	d01a      	beq.n	8007bb6 <HAL_TIM_ConfigClockSource+0xf6>
 8007b80:	2b70      	cmp	r3, #112	; 0x70
 8007b82:	d87b      	bhi.n	8007c7c <HAL_TIM_ConfigClockSource+0x1bc>
 8007b84:	2b60      	cmp	r3, #96	; 0x60
 8007b86:	d050      	beq.n	8007c2a <HAL_TIM_ConfigClockSource+0x16a>
 8007b88:	2b60      	cmp	r3, #96	; 0x60
 8007b8a:	d877      	bhi.n	8007c7c <HAL_TIM_ConfigClockSource+0x1bc>
 8007b8c:	2b50      	cmp	r3, #80	; 0x50
 8007b8e:	d03c      	beq.n	8007c0a <HAL_TIM_ConfigClockSource+0x14a>
 8007b90:	2b50      	cmp	r3, #80	; 0x50
 8007b92:	d873      	bhi.n	8007c7c <HAL_TIM_ConfigClockSource+0x1bc>
 8007b94:	2b40      	cmp	r3, #64	; 0x40
 8007b96:	d058      	beq.n	8007c4a <HAL_TIM_ConfigClockSource+0x18a>
 8007b98:	2b40      	cmp	r3, #64	; 0x40
 8007b9a:	d86f      	bhi.n	8007c7c <HAL_TIM_ConfigClockSource+0x1bc>
 8007b9c:	2b30      	cmp	r3, #48	; 0x30
 8007b9e:	d064      	beq.n	8007c6a <HAL_TIM_ConfigClockSource+0x1aa>
 8007ba0:	2b30      	cmp	r3, #48	; 0x30
 8007ba2:	d86b      	bhi.n	8007c7c <HAL_TIM_ConfigClockSource+0x1bc>
 8007ba4:	2b20      	cmp	r3, #32
 8007ba6:	d060      	beq.n	8007c6a <HAL_TIM_ConfigClockSource+0x1aa>
 8007ba8:	2b20      	cmp	r3, #32
 8007baa:	d867      	bhi.n	8007c7c <HAL_TIM_ConfigClockSource+0x1bc>
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d05c      	beq.n	8007c6a <HAL_TIM_ConfigClockSource+0x1aa>
 8007bb0:	2b10      	cmp	r3, #16
 8007bb2:	d05a      	beq.n	8007c6a <HAL_TIM_ConfigClockSource+0x1aa>
 8007bb4:	e062      	b.n	8007c7c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6818      	ldr	r0, [r3, #0]
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	6899      	ldr	r1, [r3, #8]
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	685a      	ldr	r2, [r3, #4]
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	f000 fc93 	bl	80084f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007bd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	68ba      	ldr	r2, [r7, #8]
 8007be0:	609a      	str	r2, [r3, #8]
      break;
 8007be2:	e04f      	b.n	8007c84 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6818      	ldr	r0, [r3, #0]
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	6899      	ldr	r1, [r3, #8]
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	685a      	ldr	r2, [r3, #4]
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	68db      	ldr	r3, [r3, #12]
 8007bf4:	f000 fc7c 	bl	80084f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	689a      	ldr	r2, [r3, #8]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c06:	609a      	str	r2, [r3, #8]
      break;
 8007c08:	e03c      	b.n	8007c84 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6818      	ldr	r0, [r3, #0]
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	6859      	ldr	r1, [r3, #4]
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	68db      	ldr	r3, [r3, #12]
 8007c16:	461a      	mov	r2, r3
 8007c18:	f000 fbec 	bl	80083f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	2150      	movs	r1, #80	; 0x50
 8007c22:	4618      	mov	r0, r3
 8007c24:	f000 fc46 	bl	80084b4 <TIM_ITRx_SetConfig>
      break;
 8007c28:	e02c      	b.n	8007c84 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6818      	ldr	r0, [r3, #0]
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	6859      	ldr	r1, [r3, #4]
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	461a      	mov	r2, r3
 8007c38:	f000 fc0b 	bl	8008452 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2160      	movs	r1, #96	; 0x60
 8007c42:	4618      	mov	r0, r3
 8007c44:	f000 fc36 	bl	80084b4 <TIM_ITRx_SetConfig>
      break;
 8007c48:	e01c      	b.n	8007c84 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6818      	ldr	r0, [r3, #0]
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	6859      	ldr	r1, [r3, #4]
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	461a      	mov	r2, r3
 8007c58:	f000 fbcc 	bl	80083f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	2140      	movs	r1, #64	; 0x40
 8007c62:	4618      	mov	r0, r3
 8007c64:	f000 fc26 	bl	80084b4 <TIM_ITRx_SetConfig>
      break;
 8007c68:	e00c      	b.n	8007c84 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4619      	mov	r1, r3
 8007c74:	4610      	mov	r0, r2
 8007c76:	f000 fc1d 	bl	80084b4 <TIM_ITRx_SetConfig>
      break;
 8007c7a:	e003      	b.n	8007c84 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8007c80:	e000      	b.n	8007c84 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007c82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3710      	adds	r7, #16
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}
 8007c9e:	bf00      	nop
 8007ca0:	ffceff88 	.word	0xffceff88
 8007ca4:	00100040 	.word	0x00100040
 8007ca8:	00100030 	.word	0x00100030
 8007cac:	00100020 	.word	0x00100020

08007cb0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007cb8:	bf00      	nop
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ccc:	bf00      	nop
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ce0:	bf00      	nop
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007cf4:	bf00      	nop
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d08:	bf00      	nop
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b085      	sub	sp, #20
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	4a40      	ldr	r2, [pc, #256]	; (8007e28 <TIM_Base_SetConfig+0x114>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d013      	beq.n	8007d54 <TIM_Base_SetConfig+0x40>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d32:	d00f      	beq.n	8007d54 <TIM_Base_SetConfig+0x40>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4a3d      	ldr	r2, [pc, #244]	; (8007e2c <TIM_Base_SetConfig+0x118>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d00b      	beq.n	8007d54 <TIM_Base_SetConfig+0x40>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4a3c      	ldr	r2, [pc, #240]	; (8007e30 <TIM_Base_SetConfig+0x11c>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d007      	beq.n	8007d54 <TIM_Base_SetConfig+0x40>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	4a3b      	ldr	r2, [pc, #236]	; (8007e34 <TIM_Base_SetConfig+0x120>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d003      	beq.n	8007d54 <TIM_Base_SetConfig+0x40>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a3a      	ldr	r2, [pc, #232]	; (8007e38 <TIM_Base_SetConfig+0x124>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d108      	bne.n	8007d66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	68fa      	ldr	r2, [r7, #12]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	4a2f      	ldr	r2, [pc, #188]	; (8007e28 <TIM_Base_SetConfig+0x114>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d01f      	beq.n	8007dae <TIM_Base_SetConfig+0x9a>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d74:	d01b      	beq.n	8007dae <TIM_Base_SetConfig+0x9a>
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	4a2c      	ldr	r2, [pc, #176]	; (8007e2c <TIM_Base_SetConfig+0x118>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d017      	beq.n	8007dae <TIM_Base_SetConfig+0x9a>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	4a2b      	ldr	r2, [pc, #172]	; (8007e30 <TIM_Base_SetConfig+0x11c>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d013      	beq.n	8007dae <TIM_Base_SetConfig+0x9a>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4a2a      	ldr	r2, [pc, #168]	; (8007e34 <TIM_Base_SetConfig+0x120>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d00f      	beq.n	8007dae <TIM_Base_SetConfig+0x9a>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4a29      	ldr	r2, [pc, #164]	; (8007e38 <TIM_Base_SetConfig+0x124>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d00b      	beq.n	8007dae <TIM_Base_SetConfig+0x9a>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	4a28      	ldr	r2, [pc, #160]	; (8007e3c <TIM_Base_SetConfig+0x128>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d007      	beq.n	8007dae <TIM_Base_SetConfig+0x9a>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4a27      	ldr	r2, [pc, #156]	; (8007e40 <TIM_Base_SetConfig+0x12c>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d003      	beq.n	8007dae <TIM_Base_SetConfig+0x9a>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4a26      	ldr	r2, [pc, #152]	; (8007e44 <TIM_Base_SetConfig+0x130>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d108      	bne.n	8007dc0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007db4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	68fa      	ldr	r2, [r7, #12]
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	695b      	ldr	r3, [r3, #20]
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	68fa      	ldr	r2, [r7, #12]
 8007dd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	689a      	ldr	r2, [r3, #8]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	4a10      	ldr	r2, [pc, #64]	; (8007e28 <TIM_Base_SetConfig+0x114>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d00f      	beq.n	8007e0c <TIM_Base_SetConfig+0xf8>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	4a12      	ldr	r2, [pc, #72]	; (8007e38 <TIM_Base_SetConfig+0x124>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d00b      	beq.n	8007e0c <TIM_Base_SetConfig+0xf8>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	4a11      	ldr	r2, [pc, #68]	; (8007e3c <TIM_Base_SetConfig+0x128>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d007      	beq.n	8007e0c <TIM_Base_SetConfig+0xf8>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4a10      	ldr	r2, [pc, #64]	; (8007e40 <TIM_Base_SetConfig+0x12c>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d003      	beq.n	8007e0c <TIM_Base_SetConfig+0xf8>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	4a0f      	ldr	r2, [pc, #60]	; (8007e44 <TIM_Base_SetConfig+0x130>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d103      	bne.n	8007e14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	691a      	ldr	r2, [r3, #16]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2201      	movs	r2, #1
 8007e18:	615a      	str	r2, [r3, #20]
}
 8007e1a:	bf00      	nop
 8007e1c:	3714      	adds	r7, #20
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr
 8007e26:	bf00      	nop
 8007e28:	40010000 	.word	0x40010000
 8007e2c:	40000400 	.word	0x40000400
 8007e30:	40000800 	.word	0x40000800
 8007e34:	40000c00 	.word	0x40000c00
 8007e38:	40010400 	.word	0x40010400
 8007e3c:	40014000 	.word	0x40014000
 8007e40:	40014400 	.word	0x40014400
 8007e44:	40014800 	.word	0x40014800

08007e48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b087      	sub	sp, #28
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a1b      	ldr	r3, [r3, #32]
 8007e56:	f023 0201 	bic.w	r2, r3, #1
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a1b      	ldr	r3, [r3, #32]
 8007e62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	699b      	ldr	r3, [r3, #24]
 8007e6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007e70:	68fa      	ldr	r2, [r7, #12]
 8007e72:	4b37      	ldr	r3, [pc, #220]	; (8007f50 <TIM_OC1_SetConfig+0x108>)
 8007e74:	4013      	ands	r3, r2
 8007e76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f023 0303 	bic.w	r3, r3, #3
 8007e7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	68fa      	ldr	r2, [r7, #12]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	f023 0302 	bic.w	r3, r3, #2
 8007e90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	697a      	ldr	r2, [r7, #20]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	4a2d      	ldr	r2, [pc, #180]	; (8007f54 <TIM_OC1_SetConfig+0x10c>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d00f      	beq.n	8007ec4 <TIM_OC1_SetConfig+0x7c>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	4a2c      	ldr	r2, [pc, #176]	; (8007f58 <TIM_OC1_SetConfig+0x110>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d00b      	beq.n	8007ec4 <TIM_OC1_SetConfig+0x7c>
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	4a2b      	ldr	r2, [pc, #172]	; (8007f5c <TIM_OC1_SetConfig+0x114>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d007      	beq.n	8007ec4 <TIM_OC1_SetConfig+0x7c>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	4a2a      	ldr	r2, [pc, #168]	; (8007f60 <TIM_OC1_SetConfig+0x118>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d003      	beq.n	8007ec4 <TIM_OC1_SetConfig+0x7c>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	4a29      	ldr	r2, [pc, #164]	; (8007f64 <TIM_OC1_SetConfig+0x11c>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d10c      	bne.n	8007ede <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	f023 0308 	bic.w	r3, r3, #8
 8007eca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	697a      	ldr	r2, [r7, #20]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	f023 0304 	bic.w	r3, r3, #4
 8007edc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a1c      	ldr	r2, [pc, #112]	; (8007f54 <TIM_OC1_SetConfig+0x10c>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d00f      	beq.n	8007f06 <TIM_OC1_SetConfig+0xbe>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a1b      	ldr	r2, [pc, #108]	; (8007f58 <TIM_OC1_SetConfig+0x110>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d00b      	beq.n	8007f06 <TIM_OC1_SetConfig+0xbe>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	4a1a      	ldr	r2, [pc, #104]	; (8007f5c <TIM_OC1_SetConfig+0x114>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d007      	beq.n	8007f06 <TIM_OC1_SetConfig+0xbe>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	4a19      	ldr	r2, [pc, #100]	; (8007f60 <TIM_OC1_SetConfig+0x118>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d003      	beq.n	8007f06 <TIM_OC1_SetConfig+0xbe>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	4a18      	ldr	r2, [pc, #96]	; (8007f64 <TIM_OC1_SetConfig+0x11c>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d111      	bne.n	8007f2a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	695b      	ldr	r3, [r3, #20]
 8007f1a:	693a      	ldr	r2, [r7, #16]
 8007f1c:	4313      	orrs	r3, r2
 8007f1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	699b      	ldr	r3, [r3, #24]
 8007f24:	693a      	ldr	r2, [r7, #16]
 8007f26:	4313      	orrs	r3, r2
 8007f28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	693a      	ldr	r2, [r7, #16]
 8007f2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	68fa      	ldr	r2, [r7, #12]
 8007f34:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	685a      	ldr	r2, [r3, #4]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	697a      	ldr	r2, [r7, #20]
 8007f42:	621a      	str	r2, [r3, #32]
}
 8007f44:	bf00      	nop
 8007f46:	371c      	adds	r7, #28
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr
 8007f50:	fffeff8f 	.word	0xfffeff8f
 8007f54:	40010000 	.word	0x40010000
 8007f58:	40010400 	.word	0x40010400
 8007f5c:	40014000 	.word	0x40014000
 8007f60:	40014400 	.word	0x40014400
 8007f64:	40014800 	.word	0x40014800

08007f68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b087      	sub	sp, #28
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6a1b      	ldr	r3, [r3, #32]
 8007f76:	f023 0210 	bic.w	r2, r3, #16
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6a1b      	ldr	r3, [r3, #32]
 8007f82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	699b      	ldr	r3, [r3, #24]
 8007f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	4b34      	ldr	r3, [pc, #208]	; (8008064 <TIM_OC2_SetConfig+0xfc>)
 8007f94:	4013      	ands	r3, r2
 8007f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	021b      	lsls	r3, r3, #8
 8007fa6:	68fa      	ldr	r2, [r7, #12]
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	f023 0320 	bic.w	r3, r3, #32
 8007fb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	689b      	ldr	r3, [r3, #8]
 8007fb8:	011b      	lsls	r3, r3, #4
 8007fba:	697a      	ldr	r2, [r7, #20]
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	4a29      	ldr	r2, [pc, #164]	; (8008068 <TIM_OC2_SetConfig+0x100>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d003      	beq.n	8007fd0 <TIM_OC2_SetConfig+0x68>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	4a28      	ldr	r2, [pc, #160]	; (800806c <TIM_OC2_SetConfig+0x104>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d10d      	bne.n	8007fec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	68db      	ldr	r3, [r3, #12]
 8007fdc:	011b      	lsls	r3, r3, #4
 8007fde:	697a      	ldr	r2, [r7, #20]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	4a1e      	ldr	r2, [pc, #120]	; (8008068 <TIM_OC2_SetConfig+0x100>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d00f      	beq.n	8008014 <TIM_OC2_SetConfig+0xac>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	4a1d      	ldr	r2, [pc, #116]	; (800806c <TIM_OC2_SetConfig+0x104>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d00b      	beq.n	8008014 <TIM_OC2_SetConfig+0xac>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	4a1c      	ldr	r2, [pc, #112]	; (8008070 <TIM_OC2_SetConfig+0x108>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d007      	beq.n	8008014 <TIM_OC2_SetConfig+0xac>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	4a1b      	ldr	r2, [pc, #108]	; (8008074 <TIM_OC2_SetConfig+0x10c>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d003      	beq.n	8008014 <TIM_OC2_SetConfig+0xac>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	4a1a      	ldr	r2, [pc, #104]	; (8008078 <TIM_OC2_SetConfig+0x110>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d113      	bne.n	800803c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800801a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008022:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	695b      	ldr	r3, [r3, #20]
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	693a      	ldr	r2, [r7, #16]
 800802c:	4313      	orrs	r3, r2
 800802e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	699b      	ldr	r3, [r3, #24]
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	693a      	ldr	r2, [r7, #16]
 8008038:	4313      	orrs	r3, r2
 800803a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	693a      	ldr	r2, [r7, #16]
 8008040:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	68fa      	ldr	r2, [r7, #12]
 8008046:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	685a      	ldr	r2, [r3, #4]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	697a      	ldr	r2, [r7, #20]
 8008054:	621a      	str	r2, [r3, #32]
}
 8008056:	bf00      	nop
 8008058:	371c      	adds	r7, #28
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop
 8008064:	feff8fff 	.word	0xfeff8fff
 8008068:	40010000 	.word	0x40010000
 800806c:	40010400 	.word	0x40010400
 8008070:	40014000 	.word	0x40014000
 8008074:	40014400 	.word	0x40014400
 8008078:	40014800 	.word	0x40014800

0800807c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800807c:	b480      	push	{r7}
 800807e:	b087      	sub	sp, #28
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6a1b      	ldr	r3, [r3, #32]
 800808a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6a1b      	ldr	r3, [r3, #32]
 8008096:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	69db      	ldr	r3, [r3, #28]
 80080a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	4b33      	ldr	r3, [pc, #204]	; (8008174 <TIM_OC3_SetConfig+0xf8>)
 80080a8:	4013      	ands	r3, r2
 80080aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f023 0303 	bic.w	r3, r3, #3
 80080b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	68fa      	ldr	r2, [r7, #12]
 80080ba:	4313      	orrs	r3, r2
 80080bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80080c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	021b      	lsls	r3, r3, #8
 80080cc:	697a      	ldr	r2, [r7, #20]
 80080ce:	4313      	orrs	r3, r2
 80080d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	4a28      	ldr	r2, [pc, #160]	; (8008178 <TIM_OC3_SetConfig+0xfc>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d003      	beq.n	80080e2 <TIM_OC3_SetConfig+0x66>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4a27      	ldr	r2, [pc, #156]	; (800817c <TIM_OC3_SetConfig+0x100>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d10d      	bne.n	80080fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80080e2:	697b      	ldr	r3, [r7, #20]
 80080e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80080e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	021b      	lsls	r3, r3, #8
 80080f0:	697a      	ldr	r2, [r7, #20]
 80080f2:	4313      	orrs	r3, r2
 80080f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80080fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4a1d      	ldr	r2, [pc, #116]	; (8008178 <TIM_OC3_SetConfig+0xfc>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d00f      	beq.n	8008126 <TIM_OC3_SetConfig+0xaa>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4a1c      	ldr	r2, [pc, #112]	; (800817c <TIM_OC3_SetConfig+0x100>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d00b      	beq.n	8008126 <TIM_OC3_SetConfig+0xaa>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	4a1b      	ldr	r2, [pc, #108]	; (8008180 <TIM_OC3_SetConfig+0x104>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d007      	beq.n	8008126 <TIM_OC3_SetConfig+0xaa>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4a1a      	ldr	r2, [pc, #104]	; (8008184 <TIM_OC3_SetConfig+0x108>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d003      	beq.n	8008126 <TIM_OC3_SetConfig+0xaa>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	4a19      	ldr	r2, [pc, #100]	; (8008188 <TIM_OC3_SetConfig+0x10c>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d113      	bne.n	800814e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800812c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008134:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	695b      	ldr	r3, [r3, #20]
 800813a:	011b      	lsls	r3, r3, #4
 800813c:	693a      	ldr	r2, [r7, #16]
 800813e:	4313      	orrs	r3, r2
 8008140:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	699b      	ldr	r3, [r3, #24]
 8008146:	011b      	lsls	r3, r3, #4
 8008148:	693a      	ldr	r2, [r7, #16]
 800814a:	4313      	orrs	r3, r2
 800814c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	693a      	ldr	r2, [r7, #16]
 8008152:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	685a      	ldr	r2, [r3, #4]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	697a      	ldr	r2, [r7, #20]
 8008166:	621a      	str	r2, [r3, #32]
}
 8008168:	bf00      	nop
 800816a:	371c      	adds	r7, #28
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr
 8008174:	fffeff8f 	.word	0xfffeff8f
 8008178:	40010000 	.word	0x40010000
 800817c:	40010400 	.word	0x40010400
 8008180:	40014000 	.word	0x40014000
 8008184:	40014400 	.word	0x40014400
 8008188:	40014800 	.word	0x40014800

0800818c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800818c:	b480      	push	{r7}
 800818e:	b087      	sub	sp, #28
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6a1b      	ldr	r3, [r3, #32]
 800819a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6a1b      	ldr	r3, [r3, #32]
 80081a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	69db      	ldr	r3, [r3, #28]
 80081b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80081b4:	68fa      	ldr	r2, [r7, #12]
 80081b6:	4b24      	ldr	r3, [pc, #144]	; (8008248 <TIM_OC4_SetConfig+0xbc>)
 80081b8:	4013      	ands	r3, r2
 80081ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	021b      	lsls	r3, r3, #8
 80081ca:	68fa      	ldr	r2, [r7, #12]
 80081cc:	4313      	orrs	r3, r2
 80081ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80081d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	031b      	lsls	r3, r3, #12
 80081de:	693a      	ldr	r2, [r7, #16]
 80081e0:	4313      	orrs	r3, r2
 80081e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	4a19      	ldr	r2, [pc, #100]	; (800824c <TIM_OC4_SetConfig+0xc0>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d00f      	beq.n	800820c <TIM_OC4_SetConfig+0x80>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	4a18      	ldr	r2, [pc, #96]	; (8008250 <TIM_OC4_SetConfig+0xc4>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d00b      	beq.n	800820c <TIM_OC4_SetConfig+0x80>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	4a17      	ldr	r2, [pc, #92]	; (8008254 <TIM_OC4_SetConfig+0xc8>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d007      	beq.n	800820c <TIM_OC4_SetConfig+0x80>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	4a16      	ldr	r2, [pc, #88]	; (8008258 <TIM_OC4_SetConfig+0xcc>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d003      	beq.n	800820c <TIM_OC4_SetConfig+0x80>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	4a15      	ldr	r2, [pc, #84]	; (800825c <TIM_OC4_SetConfig+0xd0>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d109      	bne.n	8008220 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008212:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	695b      	ldr	r3, [r3, #20]
 8008218:	019b      	lsls	r3, r3, #6
 800821a:	697a      	ldr	r2, [r7, #20]
 800821c:	4313      	orrs	r3, r2
 800821e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	697a      	ldr	r2, [r7, #20]
 8008224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	685a      	ldr	r2, [r3, #4]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	693a      	ldr	r2, [r7, #16]
 8008238:	621a      	str	r2, [r3, #32]
}
 800823a:	bf00      	nop
 800823c:	371c      	adds	r7, #28
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop
 8008248:	feff8fff 	.word	0xfeff8fff
 800824c:	40010000 	.word	0x40010000
 8008250:	40010400 	.word	0x40010400
 8008254:	40014000 	.word	0x40014000
 8008258:	40014400 	.word	0x40014400
 800825c:	40014800 	.word	0x40014800

08008260 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008260:	b480      	push	{r7}
 8008262:	b087      	sub	sp, #28
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6a1b      	ldr	r3, [r3, #32]
 800826e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6a1b      	ldr	r3, [r3, #32]
 800827a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008288:	68fa      	ldr	r2, [r7, #12]
 800828a:	4b21      	ldr	r3, [pc, #132]	; (8008310 <TIM_OC5_SetConfig+0xb0>)
 800828c:	4013      	ands	r3, r2
 800828e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	68fa      	ldr	r2, [r7, #12]
 8008296:	4313      	orrs	r3, r2
 8008298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80082a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	041b      	lsls	r3, r3, #16
 80082a8:	693a      	ldr	r2, [r7, #16]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4a18      	ldr	r2, [pc, #96]	; (8008314 <TIM_OC5_SetConfig+0xb4>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d00f      	beq.n	80082d6 <TIM_OC5_SetConfig+0x76>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4a17      	ldr	r2, [pc, #92]	; (8008318 <TIM_OC5_SetConfig+0xb8>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d00b      	beq.n	80082d6 <TIM_OC5_SetConfig+0x76>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	4a16      	ldr	r2, [pc, #88]	; (800831c <TIM_OC5_SetConfig+0xbc>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d007      	beq.n	80082d6 <TIM_OC5_SetConfig+0x76>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	4a15      	ldr	r2, [pc, #84]	; (8008320 <TIM_OC5_SetConfig+0xc0>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d003      	beq.n	80082d6 <TIM_OC5_SetConfig+0x76>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	4a14      	ldr	r2, [pc, #80]	; (8008324 <TIM_OC5_SetConfig+0xc4>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d109      	bne.n	80082ea <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082dc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	695b      	ldr	r3, [r3, #20]
 80082e2:	021b      	lsls	r3, r3, #8
 80082e4:	697a      	ldr	r2, [r7, #20]
 80082e6:	4313      	orrs	r3, r2
 80082e8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	697a      	ldr	r2, [r7, #20]
 80082ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	68fa      	ldr	r2, [r7, #12]
 80082f4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	685a      	ldr	r2, [r3, #4]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	693a      	ldr	r2, [r7, #16]
 8008302:	621a      	str	r2, [r3, #32]
}
 8008304:	bf00      	nop
 8008306:	371c      	adds	r7, #28
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr
 8008310:	fffeff8f 	.word	0xfffeff8f
 8008314:	40010000 	.word	0x40010000
 8008318:	40010400 	.word	0x40010400
 800831c:	40014000 	.word	0x40014000
 8008320:	40014400 	.word	0x40014400
 8008324:	40014800 	.word	0x40014800

08008328 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008328:	b480      	push	{r7}
 800832a:	b087      	sub	sp, #28
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a1b      	ldr	r3, [r3, #32]
 8008336:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a1b      	ldr	r3, [r3, #32]
 8008342:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800834e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008350:	68fa      	ldr	r2, [r7, #12]
 8008352:	4b22      	ldr	r3, [pc, #136]	; (80083dc <TIM_OC6_SetConfig+0xb4>)
 8008354:	4013      	ands	r3, r2
 8008356:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	021b      	lsls	r3, r3, #8
 800835e:	68fa      	ldr	r2, [r7, #12]
 8008360:	4313      	orrs	r3, r2
 8008362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800836a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	051b      	lsls	r3, r3, #20
 8008372:	693a      	ldr	r2, [r7, #16]
 8008374:	4313      	orrs	r3, r2
 8008376:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	4a19      	ldr	r2, [pc, #100]	; (80083e0 <TIM_OC6_SetConfig+0xb8>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d00f      	beq.n	80083a0 <TIM_OC6_SetConfig+0x78>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4a18      	ldr	r2, [pc, #96]	; (80083e4 <TIM_OC6_SetConfig+0xbc>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d00b      	beq.n	80083a0 <TIM_OC6_SetConfig+0x78>
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	4a17      	ldr	r2, [pc, #92]	; (80083e8 <TIM_OC6_SetConfig+0xc0>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d007      	beq.n	80083a0 <TIM_OC6_SetConfig+0x78>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4a16      	ldr	r2, [pc, #88]	; (80083ec <TIM_OC6_SetConfig+0xc4>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d003      	beq.n	80083a0 <TIM_OC6_SetConfig+0x78>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a15      	ldr	r2, [pc, #84]	; (80083f0 <TIM_OC6_SetConfig+0xc8>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d109      	bne.n	80083b4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	695b      	ldr	r3, [r3, #20]
 80083ac:	029b      	lsls	r3, r3, #10
 80083ae:	697a      	ldr	r2, [r7, #20]
 80083b0:	4313      	orrs	r3, r2
 80083b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	697a      	ldr	r2, [r7, #20]
 80083b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	685a      	ldr	r2, [r3, #4]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	693a      	ldr	r2, [r7, #16]
 80083cc:	621a      	str	r2, [r3, #32]
}
 80083ce:	bf00      	nop
 80083d0:	371c      	adds	r7, #28
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	feff8fff 	.word	0xfeff8fff
 80083e0:	40010000 	.word	0x40010000
 80083e4:	40010400 	.word	0x40010400
 80083e8:	40014000 	.word	0x40014000
 80083ec:	40014400 	.word	0x40014400
 80083f0:	40014800 	.word	0x40014800

080083f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b087      	sub	sp, #28
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	60b9      	str	r1, [r7, #8]
 80083fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	6a1b      	ldr	r3, [r3, #32]
 8008404:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	6a1b      	ldr	r3, [r3, #32]
 800840a:	f023 0201 	bic.w	r2, r3, #1
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	699b      	ldr	r3, [r3, #24]
 8008416:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800841e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	011b      	lsls	r3, r3, #4
 8008424:	693a      	ldr	r2, [r7, #16]
 8008426:	4313      	orrs	r3, r2
 8008428:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	f023 030a 	bic.w	r3, r3, #10
 8008430:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008432:	697a      	ldr	r2, [r7, #20]
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	4313      	orrs	r3, r2
 8008438:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	693a      	ldr	r2, [r7, #16]
 800843e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	697a      	ldr	r2, [r7, #20]
 8008444:	621a      	str	r2, [r3, #32]
}
 8008446:	bf00      	nop
 8008448:	371c      	adds	r7, #28
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr

08008452 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008452:	b480      	push	{r7}
 8008454:	b087      	sub	sp, #28
 8008456:	af00      	add	r7, sp, #0
 8008458:	60f8      	str	r0, [r7, #12]
 800845a:	60b9      	str	r1, [r7, #8]
 800845c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	6a1b      	ldr	r3, [r3, #32]
 8008462:	f023 0210 	bic.w	r2, r3, #16
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	699b      	ldr	r3, [r3, #24]
 800846e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6a1b      	ldr	r3, [r3, #32]
 8008474:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800847c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	031b      	lsls	r3, r3, #12
 8008482:	697a      	ldr	r2, [r7, #20]
 8008484:	4313      	orrs	r3, r2
 8008486:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800848e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	011b      	lsls	r3, r3, #4
 8008494:	693a      	ldr	r2, [r7, #16]
 8008496:	4313      	orrs	r3, r2
 8008498:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	697a      	ldr	r2, [r7, #20]
 800849e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	693a      	ldr	r2, [r7, #16]
 80084a4:	621a      	str	r2, [r3, #32]
}
 80084a6:	bf00      	nop
 80084a8:	371c      	adds	r7, #28
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr
	...

080084b4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b085      	sub	sp, #20
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80084c4:	68fa      	ldr	r2, [r7, #12]
 80084c6:	4b09      	ldr	r3, [pc, #36]	; (80084ec <TIM_ITRx_SetConfig+0x38>)
 80084c8:	4013      	ands	r3, r2
 80084ca:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80084cc:	683a      	ldr	r2, [r7, #0]
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	4313      	orrs	r3, r2
 80084d2:	f043 0307 	orr.w	r3, r3, #7
 80084d6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	68fa      	ldr	r2, [r7, #12]
 80084dc:	609a      	str	r2, [r3, #8]
}
 80084de:	bf00      	nop
 80084e0:	3714      	adds	r7, #20
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr
 80084ea:	bf00      	nop
 80084ec:	ffcfff8f 	.word	0xffcfff8f

080084f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b087      	sub	sp, #28
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	607a      	str	r2, [r7, #4]
 80084fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800850a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	021a      	lsls	r2, r3, #8
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	431a      	orrs	r2, r3
 8008514:	68bb      	ldr	r3, [r7, #8]
 8008516:	4313      	orrs	r3, r2
 8008518:	697a      	ldr	r2, [r7, #20]
 800851a:	4313      	orrs	r3, r2
 800851c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	697a      	ldr	r2, [r7, #20]
 8008522:	609a      	str	r2, [r3, #8]
}
 8008524:	bf00      	nop
 8008526:	371c      	adds	r7, #28
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008530:	b480      	push	{r7}
 8008532:	b087      	sub	sp, #28
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	f003 031f 	and.w	r3, r3, #31
 8008542:	2201      	movs	r2, #1
 8008544:	fa02 f303 	lsl.w	r3, r2, r3
 8008548:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	6a1a      	ldr	r2, [r3, #32]
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	43db      	mvns	r3, r3
 8008552:	401a      	ands	r2, r3
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6a1a      	ldr	r2, [r3, #32]
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	f003 031f 	and.w	r3, r3, #31
 8008562:	6879      	ldr	r1, [r7, #4]
 8008564:	fa01 f303 	lsl.w	r3, r1, r3
 8008568:	431a      	orrs	r2, r3
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	621a      	str	r2, [r3, #32]
}
 800856e:	bf00      	nop
 8008570:	371c      	adds	r7, #28
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr
	...

0800857c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800857c:	b480      	push	{r7}
 800857e:	b085      	sub	sp, #20
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]
 8008584:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800858c:	2b01      	cmp	r3, #1
 800858e:	d101      	bne.n	8008594 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008590:	2302      	movs	r3, #2
 8008592:	e06d      	b.n	8008670 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2201      	movs	r2, #1
 8008598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2202      	movs	r2, #2
 80085a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a30      	ldr	r2, [pc, #192]	; (800867c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d004      	beq.n	80085c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a2f      	ldr	r2, [pc, #188]	; (8008680 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d108      	bne.n	80085da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80085ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	68fa      	ldr	r2, [r7, #12]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	68fa      	ldr	r2, [r7, #12]
 80085e8:	4313      	orrs	r3, r2
 80085ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	68fa      	ldr	r2, [r7, #12]
 80085f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4a20      	ldr	r2, [pc, #128]	; (800867c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d022      	beq.n	8008644 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008606:	d01d      	beq.n	8008644 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	4a1d      	ldr	r2, [pc, #116]	; (8008684 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d018      	beq.n	8008644 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	4a1c      	ldr	r2, [pc, #112]	; (8008688 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008618:	4293      	cmp	r3, r2
 800861a:	d013      	beq.n	8008644 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4a1a      	ldr	r2, [pc, #104]	; (800868c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d00e      	beq.n	8008644 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	4a15      	ldr	r2, [pc, #84]	; (8008680 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d009      	beq.n	8008644 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	4a16      	ldr	r2, [pc, #88]	; (8008690 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d004      	beq.n	8008644 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a15      	ldr	r2, [pc, #84]	; (8008694 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d10c      	bne.n	800865e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800864a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	689b      	ldr	r3, [r3, #8]
 8008650:	68ba      	ldr	r2, [r7, #8]
 8008652:	4313      	orrs	r3, r2
 8008654:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	68ba      	ldr	r2, [r7, #8]
 800865c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2201      	movs	r2, #1
 8008662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	2200      	movs	r2, #0
 800866a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800866e:	2300      	movs	r3, #0
}
 8008670:	4618      	mov	r0, r3
 8008672:	3714      	adds	r7, #20
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr
 800867c:	40010000 	.word	0x40010000
 8008680:	40010400 	.word	0x40010400
 8008684:	40000400 	.word	0x40000400
 8008688:	40000800 	.word	0x40000800
 800868c:	40000c00 	.word	0x40000c00
 8008690:	40001800 	.word	0x40001800
 8008694:	40014000 	.word	0x40014000

08008698 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008698:	b480      	push	{r7}
 800869a:	b083      	sub	sp, #12
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80086a0:	bf00      	nop
 80086a2:	370c      	adds	r7, #12
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b083      	sub	sp, #12
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80086b4:	bf00      	nop
 80086b6:	370c      	adds	r7, #12
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr

080086c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b083      	sub	sp, #12
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80086c8:	bf00      	nop
 80086ca:	370c      	adds	r7, #12
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr

080086d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d101      	bne.n	80086e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086e2:	2301      	movs	r3, #1
 80086e4:	e042      	b.n	800876c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d106      	bne.n	80086fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2200      	movs	r2, #0
 80086f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f7fa f8e7 	bl	80028cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2224      	movs	r2, #36	; 0x24
 8008702:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f022 0201 	bic.w	r2, r2, #1
 8008714:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 f8c2 	bl	80088a0 <UART_SetConfig>
 800871c:	4603      	mov	r3, r0
 800871e:	2b01      	cmp	r3, #1
 8008720:	d101      	bne.n	8008726 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008722:	2301      	movs	r3, #1
 8008724:	e022      	b.n	800876c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800872a:	2b00      	cmp	r3, #0
 800872c:	d002      	beq.n	8008734 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 fe1e 	bl	8009370 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	685a      	ldr	r2, [r3, #4]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008742:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	689a      	ldr	r2, [r3, #8]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008752:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	681a      	ldr	r2, [r3, #0]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f042 0201 	orr.w	r2, r2, #1
 8008762:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 fea5 	bl	80094b4 <UART_CheckIdleState>
 800876a:	4603      	mov	r3, r0
}
 800876c:	4618      	mov	r0, r3
 800876e:	3708      	adds	r7, #8
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b08a      	sub	sp, #40	; 0x28
 8008778:	af02      	add	r7, sp, #8
 800877a:	60f8      	str	r0, [r7, #12]
 800877c:	60b9      	str	r1, [r7, #8]
 800877e:	603b      	str	r3, [r7, #0]
 8008780:	4613      	mov	r3, r2
 8008782:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800878a:	2b20      	cmp	r3, #32
 800878c:	f040 8083 	bne.w	8008896 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d002      	beq.n	800879c <HAL_UART_Transmit+0x28>
 8008796:	88fb      	ldrh	r3, [r7, #6]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d101      	bne.n	80087a0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800879c:	2301      	movs	r3, #1
 800879e:	e07b      	b.n	8008898 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	d101      	bne.n	80087ae <HAL_UART_Transmit+0x3a>
 80087aa:	2302      	movs	r3, #2
 80087ac:	e074      	b.n	8008898 <HAL_UART_Transmit+0x124>
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2201      	movs	r2, #1
 80087b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2200      	movs	r2, #0
 80087ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2221      	movs	r2, #33	; 0x21
 80087c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80087c6:	f7fa fa6f 	bl	8002ca8 <HAL_GetTick>
 80087ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	88fa      	ldrh	r2, [r7, #6]
 80087d0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	88fa      	ldrh	r2, [r7, #6]
 80087d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087e4:	d108      	bne.n	80087f8 <HAL_UART_Transmit+0x84>
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	691b      	ldr	r3, [r3, #16]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d104      	bne.n	80087f8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80087ee:	2300      	movs	r3, #0
 80087f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	61bb      	str	r3, [r7, #24]
 80087f6:	e003      	b.n	8008800 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80087fc:	2300      	movs	r3, #0
 80087fe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2200      	movs	r2, #0
 8008804:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8008808:	e02c      	b.n	8008864 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	9300      	str	r3, [sp, #0]
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	2200      	movs	r2, #0
 8008812:	2180      	movs	r1, #128	; 0x80
 8008814:	68f8      	ldr	r0, [r7, #12]
 8008816:	f000 fe98 	bl	800954a <UART_WaitOnFlagUntilTimeout>
 800881a:	4603      	mov	r3, r0
 800881c:	2b00      	cmp	r3, #0
 800881e:	d001      	beq.n	8008824 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8008820:	2303      	movs	r3, #3
 8008822:	e039      	b.n	8008898 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8008824:	69fb      	ldr	r3, [r7, #28]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d10b      	bne.n	8008842 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800882a:	69bb      	ldr	r3, [r7, #24]
 800882c:	881b      	ldrh	r3, [r3, #0]
 800882e:	461a      	mov	r2, r3
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008838:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800883a:	69bb      	ldr	r3, [r7, #24]
 800883c:	3302      	adds	r3, #2
 800883e:	61bb      	str	r3, [r7, #24]
 8008840:	e007      	b.n	8008852 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008842:	69fb      	ldr	r3, [r7, #28]
 8008844:	781a      	ldrb	r2, [r3, #0]
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	3301      	adds	r3, #1
 8008850:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008858:	b29b      	uxth	r3, r3
 800885a:	3b01      	subs	r3, #1
 800885c:	b29a      	uxth	r2, r3
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800886a:	b29b      	uxth	r3, r3
 800886c:	2b00      	cmp	r3, #0
 800886e:	d1cc      	bne.n	800880a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	9300      	str	r3, [sp, #0]
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	2200      	movs	r2, #0
 8008878:	2140      	movs	r1, #64	; 0x40
 800887a:	68f8      	ldr	r0, [r7, #12]
 800887c:	f000 fe65 	bl	800954a <UART_WaitOnFlagUntilTimeout>
 8008880:	4603      	mov	r3, r0
 8008882:	2b00      	cmp	r3, #0
 8008884:	d001      	beq.n	800888a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008886:	2303      	movs	r3, #3
 8008888:	e006      	b.n	8008898 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2220      	movs	r2, #32
 800888e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008892:	2300      	movs	r3, #0
 8008894:	e000      	b.n	8008898 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008896:	2302      	movs	r3, #2
  }
}
 8008898:	4618      	mov	r0, r3
 800889a:	3720      	adds	r7, #32
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80088a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80088a4:	b092      	sub	sp, #72	; 0x48
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80088aa:	2300      	movs	r3, #0
 80088ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	689a      	ldr	r2, [r3, #8]
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	691b      	ldr	r3, [r3, #16]
 80088b8:	431a      	orrs	r2, r3
 80088ba:	697b      	ldr	r3, [r7, #20]
 80088bc:	695b      	ldr	r3, [r3, #20]
 80088be:	431a      	orrs	r2, r3
 80088c0:	697b      	ldr	r3, [r7, #20]
 80088c2:	69db      	ldr	r3, [r3, #28]
 80088c4:	4313      	orrs	r3, r2
 80088c6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	4bbe      	ldr	r3, [pc, #760]	; (8008bc8 <UART_SetConfig+0x328>)
 80088d0:	4013      	ands	r3, r2
 80088d2:	697a      	ldr	r2, [r7, #20]
 80088d4:	6812      	ldr	r2, [r2, #0]
 80088d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80088d8:	430b      	orrs	r3, r1
 80088da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	68da      	ldr	r2, [r3, #12]
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	430a      	orrs	r2, r1
 80088f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	699b      	ldr	r3, [r3, #24]
 80088f6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4ab3      	ldr	r2, [pc, #716]	; (8008bcc <UART_SetConfig+0x32c>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d004      	beq.n	800890c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	6a1b      	ldr	r3, [r3, #32]
 8008906:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008908:	4313      	orrs	r3, r2
 800890a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	689a      	ldr	r2, [r3, #8]
 8008912:	4baf      	ldr	r3, [pc, #700]	; (8008bd0 <UART_SetConfig+0x330>)
 8008914:	4013      	ands	r3, r2
 8008916:	697a      	ldr	r2, [r7, #20]
 8008918:	6812      	ldr	r2, [r2, #0]
 800891a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800891c:	430b      	orrs	r3, r1
 800891e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008926:	f023 010f 	bic.w	r1, r3, #15
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	430a      	orrs	r2, r1
 8008934:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4aa6      	ldr	r2, [pc, #664]	; (8008bd4 <UART_SetConfig+0x334>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d177      	bne.n	8008a30 <UART_SetConfig+0x190>
 8008940:	4ba5      	ldr	r3, [pc, #660]	; (8008bd8 <UART_SetConfig+0x338>)
 8008942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008944:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008948:	2b28      	cmp	r3, #40	; 0x28
 800894a:	d86d      	bhi.n	8008a28 <UART_SetConfig+0x188>
 800894c:	a201      	add	r2, pc, #4	; (adr r2, 8008954 <UART_SetConfig+0xb4>)
 800894e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008952:	bf00      	nop
 8008954:	080089f9 	.word	0x080089f9
 8008958:	08008a29 	.word	0x08008a29
 800895c:	08008a29 	.word	0x08008a29
 8008960:	08008a29 	.word	0x08008a29
 8008964:	08008a29 	.word	0x08008a29
 8008968:	08008a29 	.word	0x08008a29
 800896c:	08008a29 	.word	0x08008a29
 8008970:	08008a29 	.word	0x08008a29
 8008974:	08008a01 	.word	0x08008a01
 8008978:	08008a29 	.word	0x08008a29
 800897c:	08008a29 	.word	0x08008a29
 8008980:	08008a29 	.word	0x08008a29
 8008984:	08008a29 	.word	0x08008a29
 8008988:	08008a29 	.word	0x08008a29
 800898c:	08008a29 	.word	0x08008a29
 8008990:	08008a29 	.word	0x08008a29
 8008994:	08008a09 	.word	0x08008a09
 8008998:	08008a29 	.word	0x08008a29
 800899c:	08008a29 	.word	0x08008a29
 80089a0:	08008a29 	.word	0x08008a29
 80089a4:	08008a29 	.word	0x08008a29
 80089a8:	08008a29 	.word	0x08008a29
 80089ac:	08008a29 	.word	0x08008a29
 80089b0:	08008a29 	.word	0x08008a29
 80089b4:	08008a11 	.word	0x08008a11
 80089b8:	08008a29 	.word	0x08008a29
 80089bc:	08008a29 	.word	0x08008a29
 80089c0:	08008a29 	.word	0x08008a29
 80089c4:	08008a29 	.word	0x08008a29
 80089c8:	08008a29 	.word	0x08008a29
 80089cc:	08008a29 	.word	0x08008a29
 80089d0:	08008a29 	.word	0x08008a29
 80089d4:	08008a19 	.word	0x08008a19
 80089d8:	08008a29 	.word	0x08008a29
 80089dc:	08008a29 	.word	0x08008a29
 80089e0:	08008a29 	.word	0x08008a29
 80089e4:	08008a29 	.word	0x08008a29
 80089e8:	08008a29 	.word	0x08008a29
 80089ec:	08008a29 	.word	0x08008a29
 80089f0:	08008a29 	.word	0x08008a29
 80089f4:	08008a21 	.word	0x08008a21
 80089f8:	2301      	movs	r3, #1
 80089fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80089fe:	e222      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008a00:	2304      	movs	r3, #4
 8008a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a06:	e21e      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008a08:	2308      	movs	r3, #8
 8008a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a0e:	e21a      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008a10:	2310      	movs	r3, #16
 8008a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a16:	e216      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008a18:	2320      	movs	r3, #32
 8008a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a1e:	e212      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008a20:	2340      	movs	r3, #64	; 0x40
 8008a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a26:	e20e      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008a28:	2380      	movs	r3, #128	; 0x80
 8008a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a2e:	e20a      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a69      	ldr	r2, [pc, #420]	; (8008bdc <UART_SetConfig+0x33c>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d130      	bne.n	8008a9c <UART_SetConfig+0x1fc>
 8008a3a:	4b67      	ldr	r3, [pc, #412]	; (8008bd8 <UART_SetConfig+0x338>)
 8008a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a3e:	f003 0307 	and.w	r3, r3, #7
 8008a42:	2b05      	cmp	r3, #5
 8008a44:	d826      	bhi.n	8008a94 <UART_SetConfig+0x1f4>
 8008a46:	a201      	add	r2, pc, #4	; (adr r2, 8008a4c <UART_SetConfig+0x1ac>)
 8008a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a4c:	08008a65 	.word	0x08008a65
 8008a50:	08008a6d 	.word	0x08008a6d
 8008a54:	08008a75 	.word	0x08008a75
 8008a58:	08008a7d 	.word	0x08008a7d
 8008a5c:	08008a85 	.word	0x08008a85
 8008a60:	08008a8d 	.word	0x08008a8d
 8008a64:	2300      	movs	r3, #0
 8008a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a6a:	e1ec      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008a6c:	2304      	movs	r3, #4
 8008a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a72:	e1e8      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008a74:	2308      	movs	r3, #8
 8008a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a7a:	e1e4      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008a7c:	2310      	movs	r3, #16
 8008a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a82:	e1e0      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008a84:	2320      	movs	r3, #32
 8008a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a8a:	e1dc      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008a8c:	2340      	movs	r3, #64	; 0x40
 8008a8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a92:	e1d8      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008a94:	2380      	movs	r3, #128	; 0x80
 8008a96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008a9a:	e1d4      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a4f      	ldr	r2, [pc, #316]	; (8008be0 <UART_SetConfig+0x340>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d130      	bne.n	8008b08 <UART_SetConfig+0x268>
 8008aa6:	4b4c      	ldr	r3, [pc, #304]	; (8008bd8 <UART_SetConfig+0x338>)
 8008aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aaa:	f003 0307 	and.w	r3, r3, #7
 8008aae:	2b05      	cmp	r3, #5
 8008ab0:	d826      	bhi.n	8008b00 <UART_SetConfig+0x260>
 8008ab2:	a201      	add	r2, pc, #4	; (adr r2, 8008ab8 <UART_SetConfig+0x218>)
 8008ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab8:	08008ad1 	.word	0x08008ad1
 8008abc:	08008ad9 	.word	0x08008ad9
 8008ac0:	08008ae1 	.word	0x08008ae1
 8008ac4:	08008ae9 	.word	0x08008ae9
 8008ac8:	08008af1 	.word	0x08008af1
 8008acc:	08008af9 	.word	0x08008af9
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ad6:	e1b6      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008ad8:	2304      	movs	r3, #4
 8008ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ade:	e1b2      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008ae0:	2308      	movs	r3, #8
 8008ae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ae6:	e1ae      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008ae8:	2310      	movs	r3, #16
 8008aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aee:	e1aa      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008af0:	2320      	movs	r3, #32
 8008af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008af6:	e1a6      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008af8:	2340      	movs	r3, #64	; 0x40
 8008afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008afe:	e1a2      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008b00:	2380      	movs	r3, #128	; 0x80
 8008b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b06:	e19e      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a35      	ldr	r2, [pc, #212]	; (8008be4 <UART_SetConfig+0x344>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d130      	bne.n	8008b74 <UART_SetConfig+0x2d4>
 8008b12:	4b31      	ldr	r3, [pc, #196]	; (8008bd8 <UART_SetConfig+0x338>)
 8008b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b16:	f003 0307 	and.w	r3, r3, #7
 8008b1a:	2b05      	cmp	r3, #5
 8008b1c:	d826      	bhi.n	8008b6c <UART_SetConfig+0x2cc>
 8008b1e:	a201      	add	r2, pc, #4	; (adr r2, 8008b24 <UART_SetConfig+0x284>)
 8008b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b24:	08008b3d 	.word	0x08008b3d
 8008b28:	08008b45 	.word	0x08008b45
 8008b2c:	08008b4d 	.word	0x08008b4d
 8008b30:	08008b55 	.word	0x08008b55
 8008b34:	08008b5d 	.word	0x08008b5d
 8008b38:	08008b65 	.word	0x08008b65
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b42:	e180      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008b44:	2304      	movs	r3, #4
 8008b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b4a:	e17c      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008b4c:	2308      	movs	r3, #8
 8008b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b52:	e178      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008b54:	2310      	movs	r3, #16
 8008b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b5a:	e174      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008b5c:	2320      	movs	r3, #32
 8008b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b62:	e170      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008b64:	2340      	movs	r3, #64	; 0x40
 8008b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b6a:	e16c      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008b6c:	2380      	movs	r3, #128	; 0x80
 8008b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b72:	e168      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a1b      	ldr	r2, [pc, #108]	; (8008be8 <UART_SetConfig+0x348>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d142      	bne.n	8008c04 <UART_SetConfig+0x364>
 8008b7e:	4b16      	ldr	r3, [pc, #88]	; (8008bd8 <UART_SetConfig+0x338>)
 8008b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b82:	f003 0307 	and.w	r3, r3, #7
 8008b86:	2b05      	cmp	r3, #5
 8008b88:	d838      	bhi.n	8008bfc <UART_SetConfig+0x35c>
 8008b8a:	a201      	add	r2, pc, #4	; (adr r2, 8008b90 <UART_SetConfig+0x2f0>)
 8008b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b90:	08008ba9 	.word	0x08008ba9
 8008b94:	08008bb1 	.word	0x08008bb1
 8008b98:	08008bb9 	.word	0x08008bb9
 8008b9c:	08008bc1 	.word	0x08008bc1
 8008ba0:	08008bed 	.word	0x08008bed
 8008ba4:	08008bf5 	.word	0x08008bf5
 8008ba8:	2300      	movs	r3, #0
 8008baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bae:	e14a      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008bb0:	2304      	movs	r3, #4
 8008bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bb6:	e146      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008bb8:	2308      	movs	r3, #8
 8008bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bbe:	e142      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008bc0:	2310      	movs	r3, #16
 8008bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bc6:	e13e      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008bc8:	cfff69f3 	.word	0xcfff69f3
 8008bcc:	58000c00 	.word	0x58000c00
 8008bd0:	11fff4ff 	.word	0x11fff4ff
 8008bd4:	40011000 	.word	0x40011000
 8008bd8:	58024400 	.word	0x58024400
 8008bdc:	40004400 	.word	0x40004400
 8008be0:	40004800 	.word	0x40004800
 8008be4:	40004c00 	.word	0x40004c00
 8008be8:	40005000 	.word	0x40005000
 8008bec:	2320      	movs	r3, #32
 8008bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bf2:	e128      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008bf4:	2340      	movs	r3, #64	; 0x40
 8008bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bfa:	e124      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008bfc:	2380      	movs	r3, #128	; 0x80
 8008bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c02:	e120      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4acb      	ldr	r2, [pc, #812]	; (8008f38 <UART_SetConfig+0x698>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d176      	bne.n	8008cfc <UART_SetConfig+0x45c>
 8008c0e:	4bcb      	ldr	r3, [pc, #812]	; (8008f3c <UART_SetConfig+0x69c>)
 8008c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c16:	2b28      	cmp	r3, #40	; 0x28
 8008c18:	d86c      	bhi.n	8008cf4 <UART_SetConfig+0x454>
 8008c1a:	a201      	add	r2, pc, #4	; (adr r2, 8008c20 <UART_SetConfig+0x380>)
 8008c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c20:	08008cc5 	.word	0x08008cc5
 8008c24:	08008cf5 	.word	0x08008cf5
 8008c28:	08008cf5 	.word	0x08008cf5
 8008c2c:	08008cf5 	.word	0x08008cf5
 8008c30:	08008cf5 	.word	0x08008cf5
 8008c34:	08008cf5 	.word	0x08008cf5
 8008c38:	08008cf5 	.word	0x08008cf5
 8008c3c:	08008cf5 	.word	0x08008cf5
 8008c40:	08008ccd 	.word	0x08008ccd
 8008c44:	08008cf5 	.word	0x08008cf5
 8008c48:	08008cf5 	.word	0x08008cf5
 8008c4c:	08008cf5 	.word	0x08008cf5
 8008c50:	08008cf5 	.word	0x08008cf5
 8008c54:	08008cf5 	.word	0x08008cf5
 8008c58:	08008cf5 	.word	0x08008cf5
 8008c5c:	08008cf5 	.word	0x08008cf5
 8008c60:	08008cd5 	.word	0x08008cd5
 8008c64:	08008cf5 	.word	0x08008cf5
 8008c68:	08008cf5 	.word	0x08008cf5
 8008c6c:	08008cf5 	.word	0x08008cf5
 8008c70:	08008cf5 	.word	0x08008cf5
 8008c74:	08008cf5 	.word	0x08008cf5
 8008c78:	08008cf5 	.word	0x08008cf5
 8008c7c:	08008cf5 	.word	0x08008cf5
 8008c80:	08008cdd 	.word	0x08008cdd
 8008c84:	08008cf5 	.word	0x08008cf5
 8008c88:	08008cf5 	.word	0x08008cf5
 8008c8c:	08008cf5 	.word	0x08008cf5
 8008c90:	08008cf5 	.word	0x08008cf5
 8008c94:	08008cf5 	.word	0x08008cf5
 8008c98:	08008cf5 	.word	0x08008cf5
 8008c9c:	08008cf5 	.word	0x08008cf5
 8008ca0:	08008ce5 	.word	0x08008ce5
 8008ca4:	08008cf5 	.word	0x08008cf5
 8008ca8:	08008cf5 	.word	0x08008cf5
 8008cac:	08008cf5 	.word	0x08008cf5
 8008cb0:	08008cf5 	.word	0x08008cf5
 8008cb4:	08008cf5 	.word	0x08008cf5
 8008cb8:	08008cf5 	.word	0x08008cf5
 8008cbc:	08008cf5 	.word	0x08008cf5
 8008cc0:	08008ced 	.word	0x08008ced
 8008cc4:	2301      	movs	r3, #1
 8008cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cca:	e0bc      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008ccc:	2304      	movs	r3, #4
 8008cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cd2:	e0b8      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008cd4:	2308      	movs	r3, #8
 8008cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cda:	e0b4      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008cdc:	2310      	movs	r3, #16
 8008cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ce2:	e0b0      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008ce4:	2320      	movs	r3, #32
 8008ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cea:	e0ac      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008cec:	2340      	movs	r3, #64	; 0x40
 8008cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cf2:	e0a8      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008cf4:	2380      	movs	r3, #128	; 0x80
 8008cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cfa:	e0a4      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a8f      	ldr	r2, [pc, #572]	; (8008f40 <UART_SetConfig+0x6a0>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d130      	bne.n	8008d68 <UART_SetConfig+0x4c8>
 8008d06:	4b8d      	ldr	r3, [pc, #564]	; (8008f3c <UART_SetConfig+0x69c>)
 8008d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d0a:	f003 0307 	and.w	r3, r3, #7
 8008d0e:	2b05      	cmp	r3, #5
 8008d10:	d826      	bhi.n	8008d60 <UART_SetConfig+0x4c0>
 8008d12:	a201      	add	r2, pc, #4	; (adr r2, 8008d18 <UART_SetConfig+0x478>)
 8008d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d18:	08008d31 	.word	0x08008d31
 8008d1c:	08008d39 	.word	0x08008d39
 8008d20:	08008d41 	.word	0x08008d41
 8008d24:	08008d49 	.word	0x08008d49
 8008d28:	08008d51 	.word	0x08008d51
 8008d2c:	08008d59 	.word	0x08008d59
 8008d30:	2300      	movs	r3, #0
 8008d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d36:	e086      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008d38:	2304      	movs	r3, #4
 8008d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d3e:	e082      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008d40:	2308      	movs	r3, #8
 8008d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d46:	e07e      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008d48:	2310      	movs	r3, #16
 8008d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d4e:	e07a      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008d50:	2320      	movs	r3, #32
 8008d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d56:	e076      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008d58:	2340      	movs	r3, #64	; 0x40
 8008d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d5e:	e072      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008d60:	2380      	movs	r3, #128	; 0x80
 8008d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d66:	e06e      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a75      	ldr	r2, [pc, #468]	; (8008f44 <UART_SetConfig+0x6a4>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d130      	bne.n	8008dd4 <UART_SetConfig+0x534>
 8008d72:	4b72      	ldr	r3, [pc, #456]	; (8008f3c <UART_SetConfig+0x69c>)
 8008d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d76:	f003 0307 	and.w	r3, r3, #7
 8008d7a:	2b05      	cmp	r3, #5
 8008d7c:	d826      	bhi.n	8008dcc <UART_SetConfig+0x52c>
 8008d7e:	a201      	add	r2, pc, #4	; (adr r2, 8008d84 <UART_SetConfig+0x4e4>)
 8008d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d84:	08008d9d 	.word	0x08008d9d
 8008d88:	08008da5 	.word	0x08008da5
 8008d8c:	08008dad 	.word	0x08008dad
 8008d90:	08008db5 	.word	0x08008db5
 8008d94:	08008dbd 	.word	0x08008dbd
 8008d98:	08008dc5 	.word	0x08008dc5
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008da2:	e050      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008da4:	2304      	movs	r3, #4
 8008da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008daa:	e04c      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008dac:	2308      	movs	r3, #8
 8008dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008db2:	e048      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008db4:	2310      	movs	r3, #16
 8008db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dba:	e044      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008dbc:	2320      	movs	r3, #32
 8008dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dc2:	e040      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008dc4:	2340      	movs	r3, #64	; 0x40
 8008dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dca:	e03c      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008dcc:	2380      	movs	r3, #128	; 0x80
 8008dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dd2:	e038      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a5b      	ldr	r2, [pc, #364]	; (8008f48 <UART_SetConfig+0x6a8>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d130      	bne.n	8008e40 <UART_SetConfig+0x5a0>
 8008dde:	4b57      	ldr	r3, [pc, #348]	; (8008f3c <UART_SetConfig+0x69c>)
 8008de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008de2:	f003 0307 	and.w	r3, r3, #7
 8008de6:	2b05      	cmp	r3, #5
 8008de8:	d826      	bhi.n	8008e38 <UART_SetConfig+0x598>
 8008dea:	a201      	add	r2, pc, #4	; (adr r2, 8008df0 <UART_SetConfig+0x550>)
 8008dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df0:	08008e09 	.word	0x08008e09
 8008df4:	08008e11 	.word	0x08008e11
 8008df8:	08008e19 	.word	0x08008e19
 8008dfc:	08008e21 	.word	0x08008e21
 8008e00:	08008e29 	.word	0x08008e29
 8008e04:	08008e31 	.word	0x08008e31
 8008e08:	2302      	movs	r3, #2
 8008e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e0e:	e01a      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008e10:	2304      	movs	r3, #4
 8008e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e16:	e016      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008e18:	2308      	movs	r3, #8
 8008e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e1e:	e012      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008e20:	2310      	movs	r3, #16
 8008e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e26:	e00e      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008e28:	2320      	movs	r3, #32
 8008e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e2e:	e00a      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008e30:	2340      	movs	r3, #64	; 0x40
 8008e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e36:	e006      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008e38:	2380      	movs	r3, #128	; 0x80
 8008e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e3e:	e002      	b.n	8008e46 <UART_SetConfig+0x5a6>
 8008e40:	2380      	movs	r3, #128	; 0x80
 8008e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a3f      	ldr	r2, [pc, #252]	; (8008f48 <UART_SetConfig+0x6a8>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	f040 80f8 	bne.w	8009042 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008e52:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008e56:	2b20      	cmp	r3, #32
 8008e58:	dc46      	bgt.n	8008ee8 <UART_SetConfig+0x648>
 8008e5a:	2b02      	cmp	r3, #2
 8008e5c:	f2c0 8082 	blt.w	8008f64 <UART_SetConfig+0x6c4>
 8008e60:	3b02      	subs	r3, #2
 8008e62:	2b1e      	cmp	r3, #30
 8008e64:	d87e      	bhi.n	8008f64 <UART_SetConfig+0x6c4>
 8008e66:	a201      	add	r2, pc, #4	; (adr r2, 8008e6c <UART_SetConfig+0x5cc>)
 8008e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e6c:	08008eef 	.word	0x08008eef
 8008e70:	08008f65 	.word	0x08008f65
 8008e74:	08008ef7 	.word	0x08008ef7
 8008e78:	08008f65 	.word	0x08008f65
 8008e7c:	08008f65 	.word	0x08008f65
 8008e80:	08008f65 	.word	0x08008f65
 8008e84:	08008f07 	.word	0x08008f07
 8008e88:	08008f65 	.word	0x08008f65
 8008e8c:	08008f65 	.word	0x08008f65
 8008e90:	08008f65 	.word	0x08008f65
 8008e94:	08008f65 	.word	0x08008f65
 8008e98:	08008f65 	.word	0x08008f65
 8008e9c:	08008f65 	.word	0x08008f65
 8008ea0:	08008f65 	.word	0x08008f65
 8008ea4:	08008f17 	.word	0x08008f17
 8008ea8:	08008f65 	.word	0x08008f65
 8008eac:	08008f65 	.word	0x08008f65
 8008eb0:	08008f65 	.word	0x08008f65
 8008eb4:	08008f65 	.word	0x08008f65
 8008eb8:	08008f65 	.word	0x08008f65
 8008ebc:	08008f65 	.word	0x08008f65
 8008ec0:	08008f65 	.word	0x08008f65
 8008ec4:	08008f65 	.word	0x08008f65
 8008ec8:	08008f65 	.word	0x08008f65
 8008ecc:	08008f65 	.word	0x08008f65
 8008ed0:	08008f65 	.word	0x08008f65
 8008ed4:	08008f65 	.word	0x08008f65
 8008ed8:	08008f65 	.word	0x08008f65
 8008edc:	08008f65 	.word	0x08008f65
 8008ee0:	08008f65 	.word	0x08008f65
 8008ee4:	08008f57 	.word	0x08008f57
 8008ee8:	2b40      	cmp	r3, #64	; 0x40
 8008eea:	d037      	beq.n	8008f5c <UART_SetConfig+0x6bc>
 8008eec:	e03a      	b.n	8008f64 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008eee:	f7fc fe25 	bl	8005b3c <HAL_RCCEx_GetD3PCLK1Freq>
 8008ef2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008ef4:	e03c      	b.n	8008f70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008efa:	4618      	mov	r0, r3
 8008efc:	f7fc fe34 	bl	8005b68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f04:	e034      	b.n	8008f70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f06:	f107 0318 	add.w	r3, r7, #24
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7fc ff80 	bl	8005e10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008f10:	69fb      	ldr	r3, [r7, #28]
 8008f12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f14:	e02c      	b.n	8008f70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f16:	4b09      	ldr	r3, [pc, #36]	; (8008f3c <UART_SetConfig+0x69c>)
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f003 0320 	and.w	r3, r3, #32
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d016      	beq.n	8008f50 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008f22:	4b06      	ldr	r3, [pc, #24]	; (8008f3c <UART_SetConfig+0x69c>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	08db      	lsrs	r3, r3, #3
 8008f28:	f003 0303 	and.w	r3, r3, #3
 8008f2c:	4a07      	ldr	r2, [pc, #28]	; (8008f4c <UART_SetConfig+0x6ac>)
 8008f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8008f32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008f34:	e01c      	b.n	8008f70 <UART_SetConfig+0x6d0>
 8008f36:	bf00      	nop
 8008f38:	40011400 	.word	0x40011400
 8008f3c:	58024400 	.word	0x58024400
 8008f40:	40007800 	.word	0x40007800
 8008f44:	40007c00 	.word	0x40007c00
 8008f48:	58000c00 	.word	0x58000c00
 8008f4c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008f50:	4b9d      	ldr	r3, [pc, #628]	; (80091c8 <UART_SetConfig+0x928>)
 8008f52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f54:	e00c      	b.n	8008f70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008f56:	4b9d      	ldr	r3, [pc, #628]	; (80091cc <UART_SetConfig+0x92c>)
 8008f58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f5a:	e009      	b.n	8008f70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f62:	e005      	b.n	8008f70 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008f64:	2300      	movs	r3, #0
 8008f66:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008f6e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	f000 81de 	beq.w	8009334 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f7c:	4a94      	ldr	r2, [pc, #592]	; (80091d0 <UART_SetConfig+0x930>)
 8008f7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f82:	461a      	mov	r2, r3
 8008f84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f86:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f8a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	685a      	ldr	r2, [r3, #4]
 8008f90:	4613      	mov	r3, r2
 8008f92:	005b      	lsls	r3, r3, #1
 8008f94:	4413      	add	r3, r2
 8008f96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d305      	bcc.n	8008fa8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008fa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d903      	bls.n	8008fb0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008fa8:	2301      	movs	r3, #1
 8008faa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008fae:	e1c1      	b.n	8009334 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	60bb      	str	r3, [r7, #8]
 8008fb6:	60fa      	str	r2, [r7, #12]
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fbc:	4a84      	ldr	r2, [pc, #528]	; (80091d0 <UART_SetConfig+0x930>)
 8008fbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	603b      	str	r3, [r7, #0]
 8008fc8:	607a      	str	r2, [r7, #4]
 8008fca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008fd2:	f7f7 f9dd 	bl	8000390 <__aeabi_uldivmod>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	460b      	mov	r3, r1
 8008fda:	4610      	mov	r0, r2
 8008fdc:	4619      	mov	r1, r3
 8008fde:	f04f 0200 	mov.w	r2, #0
 8008fe2:	f04f 0300 	mov.w	r3, #0
 8008fe6:	020b      	lsls	r3, r1, #8
 8008fe8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008fec:	0202      	lsls	r2, r0, #8
 8008fee:	6979      	ldr	r1, [r7, #20]
 8008ff0:	6849      	ldr	r1, [r1, #4]
 8008ff2:	0849      	lsrs	r1, r1, #1
 8008ff4:	2000      	movs	r0, #0
 8008ff6:	460c      	mov	r4, r1
 8008ff8:	4605      	mov	r5, r0
 8008ffa:	eb12 0804 	adds.w	r8, r2, r4
 8008ffe:	eb43 0905 	adc.w	r9, r3, r5
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	685b      	ldr	r3, [r3, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	469a      	mov	sl, r3
 800900a:	4693      	mov	fp, r2
 800900c:	4652      	mov	r2, sl
 800900e:	465b      	mov	r3, fp
 8009010:	4640      	mov	r0, r8
 8009012:	4649      	mov	r1, r9
 8009014:	f7f7 f9bc 	bl	8000390 <__aeabi_uldivmod>
 8009018:	4602      	mov	r2, r0
 800901a:	460b      	mov	r3, r1
 800901c:	4613      	mov	r3, r2
 800901e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009022:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009026:	d308      	bcc.n	800903a <UART_SetConfig+0x79a>
 8009028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800902a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800902e:	d204      	bcs.n	800903a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009036:	60da      	str	r2, [r3, #12]
 8009038:	e17c      	b.n	8009334 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800903a:	2301      	movs	r3, #1
 800903c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009040:	e178      	b.n	8009334 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	69db      	ldr	r3, [r3, #28]
 8009046:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800904a:	f040 80c5 	bne.w	80091d8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800904e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009052:	2b20      	cmp	r3, #32
 8009054:	dc48      	bgt.n	80090e8 <UART_SetConfig+0x848>
 8009056:	2b00      	cmp	r3, #0
 8009058:	db7b      	blt.n	8009152 <UART_SetConfig+0x8b2>
 800905a:	2b20      	cmp	r3, #32
 800905c:	d879      	bhi.n	8009152 <UART_SetConfig+0x8b2>
 800905e:	a201      	add	r2, pc, #4	; (adr r2, 8009064 <UART_SetConfig+0x7c4>)
 8009060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009064:	080090ef 	.word	0x080090ef
 8009068:	080090f7 	.word	0x080090f7
 800906c:	08009153 	.word	0x08009153
 8009070:	08009153 	.word	0x08009153
 8009074:	080090ff 	.word	0x080090ff
 8009078:	08009153 	.word	0x08009153
 800907c:	08009153 	.word	0x08009153
 8009080:	08009153 	.word	0x08009153
 8009084:	0800910f 	.word	0x0800910f
 8009088:	08009153 	.word	0x08009153
 800908c:	08009153 	.word	0x08009153
 8009090:	08009153 	.word	0x08009153
 8009094:	08009153 	.word	0x08009153
 8009098:	08009153 	.word	0x08009153
 800909c:	08009153 	.word	0x08009153
 80090a0:	08009153 	.word	0x08009153
 80090a4:	0800911f 	.word	0x0800911f
 80090a8:	08009153 	.word	0x08009153
 80090ac:	08009153 	.word	0x08009153
 80090b0:	08009153 	.word	0x08009153
 80090b4:	08009153 	.word	0x08009153
 80090b8:	08009153 	.word	0x08009153
 80090bc:	08009153 	.word	0x08009153
 80090c0:	08009153 	.word	0x08009153
 80090c4:	08009153 	.word	0x08009153
 80090c8:	08009153 	.word	0x08009153
 80090cc:	08009153 	.word	0x08009153
 80090d0:	08009153 	.word	0x08009153
 80090d4:	08009153 	.word	0x08009153
 80090d8:	08009153 	.word	0x08009153
 80090dc:	08009153 	.word	0x08009153
 80090e0:	08009153 	.word	0x08009153
 80090e4:	08009145 	.word	0x08009145
 80090e8:	2b40      	cmp	r3, #64	; 0x40
 80090ea:	d02e      	beq.n	800914a <UART_SetConfig+0x8aa>
 80090ec:	e031      	b.n	8009152 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80090ee:	f7fb fdb3 	bl	8004c58 <HAL_RCC_GetPCLK1Freq>
 80090f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80090f4:	e033      	b.n	800915e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80090f6:	f7fb fdc5 	bl	8004c84 <HAL_RCC_GetPCLK2Freq>
 80090fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80090fc:	e02f      	b.n	800915e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009102:	4618      	mov	r0, r3
 8009104:	f7fc fd30 	bl	8005b68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800910a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800910c:	e027      	b.n	800915e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800910e:	f107 0318 	add.w	r3, r7, #24
 8009112:	4618      	mov	r0, r3
 8009114:	f7fc fe7c 	bl	8005e10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009118:	69fb      	ldr	r3, [r7, #28]
 800911a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800911c:	e01f      	b.n	800915e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800911e:	4b2d      	ldr	r3, [pc, #180]	; (80091d4 <UART_SetConfig+0x934>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f003 0320 	and.w	r3, r3, #32
 8009126:	2b00      	cmp	r3, #0
 8009128:	d009      	beq.n	800913e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800912a:	4b2a      	ldr	r3, [pc, #168]	; (80091d4 <UART_SetConfig+0x934>)
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	08db      	lsrs	r3, r3, #3
 8009130:	f003 0303 	and.w	r3, r3, #3
 8009134:	4a24      	ldr	r2, [pc, #144]	; (80091c8 <UART_SetConfig+0x928>)
 8009136:	fa22 f303 	lsr.w	r3, r2, r3
 800913a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800913c:	e00f      	b.n	800915e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800913e:	4b22      	ldr	r3, [pc, #136]	; (80091c8 <UART_SetConfig+0x928>)
 8009140:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009142:	e00c      	b.n	800915e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009144:	4b21      	ldr	r3, [pc, #132]	; (80091cc <UART_SetConfig+0x92c>)
 8009146:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009148:	e009      	b.n	800915e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800914a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800914e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009150:	e005      	b.n	800915e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009152:	2300      	movs	r3, #0
 8009154:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009156:	2301      	movs	r3, #1
 8009158:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800915c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800915e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009160:	2b00      	cmp	r3, #0
 8009162:	f000 80e7 	beq.w	8009334 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800916a:	4a19      	ldr	r2, [pc, #100]	; (80091d0 <UART_SetConfig+0x930>)
 800916c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009170:	461a      	mov	r2, r3
 8009172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009174:	fbb3 f3f2 	udiv	r3, r3, r2
 8009178:	005a      	lsls	r2, r3, #1
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	085b      	lsrs	r3, r3, #1
 8009180:	441a      	add	r2, r3
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	fbb2 f3f3 	udiv	r3, r2, r3
 800918a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800918c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800918e:	2b0f      	cmp	r3, #15
 8009190:	d916      	bls.n	80091c0 <UART_SetConfig+0x920>
 8009192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009198:	d212      	bcs.n	80091c0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800919a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800919c:	b29b      	uxth	r3, r3
 800919e:	f023 030f 	bic.w	r3, r3, #15
 80091a2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80091a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a6:	085b      	lsrs	r3, r3, #1
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	f003 0307 	and.w	r3, r3, #7
 80091ae:	b29a      	uxth	r2, r3
 80091b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80091b2:	4313      	orrs	r3, r2
 80091b4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80091b6:	697b      	ldr	r3, [r7, #20]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80091bc:	60da      	str	r2, [r3, #12]
 80091be:	e0b9      	b.n	8009334 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80091c0:	2301      	movs	r3, #1
 80091c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80091c6:	e0b5      	b.n	8009334 <UART_SetConfig+0xa94>
 80091c8:	03d09000 	.word	0x03d09000
 80091cc:	003d0900 	.word	0x003d0900
 80091d0:	0800b470 	.word	0x0800b470
 80091d4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80091d8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80091dc:	2b20      	cmp	r3, #32
 80091de:	dc49      	bgt.n	8009274 <UART_SetConfig+0x9d4>
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	db7c      	blt.n	80092de <UART_SetConfig+0xa3e>
 80091e4:	2b20      	cmp	r3, #32
 80091e6:	d87a      	bhi.n	80092de <UART_SetConfig+0xa3e>
 80091e8:	a201      	add	r2, pc, #4	; (adr r2, 80091f0 <UART_SetConfig+0x950>)
 80091ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091ee:	bf00      	nop
 80091f0:	0800927b 	.word	0x0800927b
 80091f4:	08009283 	.word	0x08009283
 80091f8:	080092df 	.word	0x080092df
 80091fc:	080092df 	.word	0x080092df
 8009200:	0800928b 	.word	0x0800928b
 8009204:	080092df 	.word	0x080092df
 8009208:	080092df 	.word	0x080092df
 800920c:	080092df 	.word	0x080092df
 8009210:	0800929b 	.word	0x0800929b
 8009214:	080092df 	.word	0x080092df
 8009218:	080092df 	.word	0x080092df
 800921c:	080092df 	.word	0x080092df
 8009220:	080092df 	.word	0x080092df
 8009224:	080092df 	.word	0x080092df
 8009228:	080092df 	.word	0x080092df
 800922c:	080092df 	.word	0x080092df
 8009230:	080092ab 	.word	0x080092ab
 8009234:	080092df 	.word	0x080092df
 8009238:	080092df 	.word	0x080092df
 800923c:	080092df 	.word	0x080092df
 8009240:	080092df 	.word	0x080092df
 8009244:	080092df 	.word	0x080092df
 8009248:	080092df 	.word	0x080092df
 800924c:	080092df 	.word	0x080092df
 8009250:	080092df 	.word	0x080092df
 8009254:	080092df 	.word	0x080092df
 8009258:	080092df 	.word	0x080092df
 800925c:	080092df 	.word	0x080092df
 8009260:	080092df 	.word	0x080092df
 8009264:	080092df 	.word	0x080092df
 8009268:	080092df 	.word	0x080092df
 800926c:	080092df 	.word	0x080092df
 8009270:	080092d1 	.word	0x080092d1
 8009274:	2b40      	cmp	r3, #64	; 0x40
 8009276:	d02e      	beq.n	80092d6 <UART_SetConfig+0xa36>
 8009278:	e031      	b.n	80092de <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800927a:	f7fb fced 	bl	8004c58 <HAL_RCC_GetPCLK1Freq>
 800927e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009280:	e033      	b.n	80092ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009282:	f7fb fcff 	bl	8004c84 <HAL_RCC_GetPCLK2Freq>
 8009286:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009288:	e02f      	b.n	80092ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800928a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800928e:	4618      	mov	r0, r3
 8009290:	f7fc fc6a 	bl	8005b68 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009296:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009298:	e027      	b.n	80092ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800929a:	f107 0318 	add.w	r3, r7, #24
 800929e:	4618      	mov	r0, r3
 80092a0:	f7fc fdb6 	bl	8005e10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80092a4:	69fb      	ldr	r3, [r7, #28]
 80092a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092a8:	e01f      	b.n	80092ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092aa:	4b2d      	ldr	r3, [pc, #180]	; (8009360 <UART_SetConfig+0xac0>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f003 0320 	and.w	r3, r3, #32
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d009      	beq.n	80092ca <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80092b6:	4b2a      	ldr	r3, [pc, #168]	; (8009360 <UART_SetConfig+0xac0>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	08db      	lsrs	r3, r3, #3
 80092bc:	f003 0303 	and.w	r3, r3, #3
 80092c0:	4a28      	ldr	r2, [pc, #160]	; (8009364 <UART_SetConfig+0xac4>)
 80092c2:	fa22 f303 	lsr.w	r3, r2, r3
 80092c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80092c8:	e00f      	b.n	80092ea <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80092ca:	4b26      	ldr	r3, [pc, #152]	; (8009364 <UART_SetConfig+0xac4>)
 80092cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092ce:	e00c      	b.n	80092ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80092d0:	4b25      	ldr	r3, [pc, #148]	; (8009368 <UART_SetConfig+0xac8>)
 80092d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092d4:	e009      	b.n	80092ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092dc:	e005      	b.n	80092ea <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80092de:	2300      	movs	r3, #0
 80092e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80092e2:	2301      	movs	r3, #1
 80092e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80092e8:	bf00      	nop
    }

    if (pclk != 0U)
 80092ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d021      	beq.n	8009334 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f4:	4a1d      	ldr	r2, [pc, #116]	; (800936c <UART_SetConfig+0xacc>)
 80092f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092fa:	461a      	mov	r2, r3
 80092fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	085b      	lsrs	r3, r3, #1
 8009308:	441a      	add	r2, r3
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009312:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009316:	2b0f      	cmp	r3, #15
 8009318:	d909      	bls.n	800932e <UART_SetConfig+0xa8e>
 800931a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800931c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009320:	d205      	bcs.n	800932e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009324:	b29a      	uxth	r2, r3
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	60da      	str	r2, [r3, #12]
 800932c:	e002      	b.n	8009334 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800932e:	2301      	movs	r3, #1
 8009330:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	2201      	movs	r2, #1
 8009338:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	2201      	movs	r2, #1
 8009340:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	2200      	movs	r2, #0
 8009348:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	2200      	movs	r2, #0
 800934e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009350:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009354:	4618      	mov	r0, r3
 8009356:	3748      	adds	r7, #72	; 0x48
 8009358:	46bd      	mov	sp, r7
 800935a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800935e:	bf00      	nop
 8009360:	58024400 	.word	0x58024400
 8009364:	03d09000 	.word	0x03d09000
 8009368:	003d0900 	.word	0x003d0900
 800936c:	0800b470 	.word	0x0800b470

08009370 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009370:	b480      	push	{r7}
 8009372:	b083      	sub	sp, #12
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800937c:	f003 0301 	and.w	r3, r3, #1
 8009380:	2b00      	cmp	r3, #0
 8009382:	d00a      	beq.n	800939a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	430a      	orrs	r2, r1
 8009398:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800939e:	f003 0302 	and.w	r3, r3, #2
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d00a      	beq.n	80093bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	430a      	orrs	r2, r1
 80093ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093c0:	f003 0304 	and.w	r3, r3, #4
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d00a      	beq.n	80093de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	430a      	orrs	r2, r1
 80093dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093e2:	f003 0308 	and.w	r3, r3, #8
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d00a      	beq.n	8009400 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	430a      	orrs	r2, r1
 80093fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009404:	f003 0310 	and.w	r3, r3, #16
 8009408:	2b00      	cmp	r3, #0
 800940a:	d00a      	beq.n	8009422 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	689b      	ldr	r3, [r3, #8]
 8009412:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	430a      	orrs	r2, r1
 8009420:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009426:	f003 0320 	and.w	r3, r3, #32
 800942a:	2b00      	cmp	r3, #0
 800942c:	d00a      	beq.n	8009444 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	689b      	ldr	r3, [r3, #8]
 8009434:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	430a      	orrs	r2, r1
 8009442:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800944c:	2b00      	cmp	r3, #0
 800944e:	d01a      	beq.n	8009486 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	685b      	ldr	r3, [r3, #4]
 8009456:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	430a      	orrs	r2, r1
 8009464:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800946a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800946e:	d10a      	bne.n	8009486 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	685b      	ldr	r3, [r3, #4]
 8009476:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	430a      	orrs	r2, r1
 8009484:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800948a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800948e:	2b00      	cmp	r3, #0
 8009490:	d00a      	beq.n	80094a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	430a      	orrs	r2, r1
 80094a6:	605a      	str	r2, [r3, #4]
  }
}
 80094a8:	bf00      	nop
 80094aa:	370c      	adds	r7, #12
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr

080094b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b086      	sub	sp, #24
 80094b8:	af02      	add	r7, sp, #8
 80094ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2200      	movs	r2, #0
 80094c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80094c4:	f7f9 fbf0 	bl	8002ca8 <HAL_GetTick>
 80094c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f003 0308 	and.w	r3, r3, #8
 80094d4:	2b08      	cmp	r3, #8
 80094d6:	d10e      	bne.n	80094f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80094d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80094dc:	9300      	str	r3, [sp, #0]
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2200      	movs	r2, #0
 80094e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 f82f 	bl	800954a <UART_WaitOnFlagUntilTimeout>
 80094ec:	4603      	mov	r3, r0
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d001      	beq.n	80094f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094f2:	2303      	movs	r3, #3
 80094f4:	e025      	b.n	8009542 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f003 0304 	and.w	r3, r3, #4
 8009500:	2b04      	cmp	r3, #4
 8009502:	d10e      	bne.n	8009522 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009504:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009508:	9300      	str	r3, [sp, #0]
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2200      	movs	r2, #0
 800950e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 f819 	bl	800954a <UART_WaitOnFlagUntilTimeout>
 8009518:	4603      	mov	r3, r0
 800951a:	2b00      	cmp	r3, #0
 800951c:	d001      	beq.n	8009522 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800951e:	2303      	movs	r3, #3
 8009520:	e00f      	b.n	8009542 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2220      	movs	r2, #32
 8009526:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2220      	movs	r2, #32
 800952e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2200      	movs	r2, #0
 8009536:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2200      	movs	r2, #0
 800953c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009540:	2300      	movs	r3, #0
}
 8009542:	4618      	mov	r0, r3
 8009544:	3710      	adds	r7, #16
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}

0800954a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800954a:	b580      	push	{r7, lr}
 800954c:	b09c      	sub	sp, #112	; 0x70
 800954e:	af00      	add	r7, sp, #0
 8009550:	60f8      	str	r0, [r7, #12]
 8009552:	60b9      	str	r1, [r7, #8]
 8009554:	603b      	str	r3, [r7, #0]
 8009556:	4613      	mov	r3, r2
 8009558:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800955a:	e0a9      	b.n	80096b0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800955c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800955e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009562:	f000 80a5 	beq.w	80096b0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009566:	f7f9 fb9f 	bl	8002ca8 <HAL_GetTick>
 800956a:	4602      	mov	r2, r0
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	1ad3      	subs	r3, r2, r3
 8009570:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009572:	429a      	cmp	r2, r3
 8009574:	d302      	bcc.n	800957c <UART_WaitOnFlagUntilTimeout+0x32>
 8009576:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009578:	2b00      	cmp	r3, #0
 800957a:	d140      	bne.n	80095fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009584:	e853 3f00 	ldrex	r3, [r3]
 8009588:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800958a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800958c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009590:	667b      	str	r3, [r7, #100]	; 0x64
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	461a      	mov	r2, r3
 8009598:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800959a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800959c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800959e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80095a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80095a2:	e841 2300 	strex	r3, r2, [r1]
 80095a6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80095a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d1e6      	bne.n	800957c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	3308      	adds	r3, #8
 80095b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095b8:	e853 3f00 	ldrex	r3, [r3]
 80095bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80095be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c0:	f023 0301 	bic.w	r3, r3, #1
 80095c4:	663b      	str	r3, [r7, #96]	; 0x60
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	3308      	adds	r3, #8
 80095cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80095ce:	64ba      	str	r2, [r7, #72]	; 0x48
 80095d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80095d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095d6:	e841 2300 	strex	r3, r2, [r1]
 80095da:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80095dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d1e5      	bne.n	80095ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2220      	movs	r2, #32
 80095e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2220      	movs	r2, #32
 80095ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	2200      	movs	r2, #0
 80095f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80095fa:	2303      	movs	r3, #3
 80095fc:	e069      	b.n	80096d2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f003 0304 	and.w	r3, r3, #4
 8009608:	2b00      	cmp	r3, #0
 800960a:	d051      	beq.n	80096b0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	69db      	ldr	r3, [r3, #28]
 8009612:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009616:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800961a:	d149      	bne.n	80096b0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009624:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800962c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800962e:	e853 3f00 	ldrex	r3, [r3]
 8009632:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009636:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800963a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	461a      	mov	r2, r3
 8009642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009644:	637b      	str	r3, [r7, #52]	; 0x34
 8009646:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009648:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800964a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800964c:	e841 2300 	strex	r3, r2, [r1]
 8009650:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009654:	2b00      	cmp	r3, #0
 8009656:	d1e6      	bne.n	8009626 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	3308      	adds	r3, #8
 800965e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	e853 3f00 	ldrex	r3, [r3]
 8009666:	613b      	str	r3, [r7, #16]
   return(result);
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	f023 0301 	bic.w	r3, r3, #1
 800966e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	3308      	adds	r3, #8
 8009676:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009678:	623a      	str	r2, [r7, #32]
 800967a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800967c:	69f9      	ldr	r1, [r7, #28]
 800967e:	6a3a      	ldr	r2, [r7, #32]
 8009680:	e841 2300 	strex	r3, r2, [r1]
 8009684:	61bb      	str	r3, [r7, #24]
   return(result);
 8009686:	69bb      	ldr	r3, [r7, #24]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d1e5      	bne.n	8009658 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2220      	movs	r2, #32
 8009690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2220      	movs	r2, #32
 8009698:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2220      	movs	r2, #32
 80096a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2200      	movs	r2, #0
 80096a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80096ac:	2303      	movs	r3, #3
 80096ae:	e010      	b.n	80096d2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	69da      	ldr	r2, [r3, #28]
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	4013      	ands	r3, r2
 80096ba:	68ba      	ldr	r2, [r7, #8]
 80096bc:	429a      	cmp	r2, r3
 80096be:	bf0c      	ite	eq
 80096c0:	2301      	moveq	r3, #1
 80096c2:	2300      	movne	r3, #0
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	461a      	mov	r2, r3
 80096c8:	79fb      	ldrb	r3, [r7, #7]
 80096ca:	429a      	cmp	r2, r3
 80096cc:	f43f af46 	beq.w	800955c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80096d0:	2300      	movs	r3, #0
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3770      	adds	r7, #112	; 0x70
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}

080096da <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80096da:	b480      	push	{r7}
 80096dc:	b085      	sub	sp, #20
 80096de:	af00      	add	r7, sp, #0
 80096e0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80096e8:	2b01      	cmp	r3, #1
 80096ea:	d101      	bne.n	80096f0 <HAL_UARTEx_DisableFifoMode+0x16>
 80096ec:	2302      	movs	r3, #2
 80096ee:	e027      	b.n	8009740 <HAL_UARTEx_DisableFifoMode+0x66>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2201      	movs	r2, #1
 80096f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2224      	movs	r2, #36	; 0x24
 80096fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f022 0201 	bic.w	r2, r2, #1
 8009716:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800971e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2200      	movs	r2, #0
 8009724:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	68fa      	ldr	r2, [r7, #12]
 800972c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2220      	movs	r2, #32
 8009732:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2200      	movs	r2, #0
 800973a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800973e:	2300      	movs	r3, #0
}
 8009740:	4618      	mov	r0, r3
 8009742:	3714      	adds	r7, #20
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr

0800974c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800975c:	2b01      	cmp	r3, #1
 800975e:	d101      	bne.n	8009764 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009760:	2302      	movs	r3, #2
 8009762:	e02d      	b.n	80097c0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2201      	movs	r2, #1
 8009768:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2224      	movs	r2, #36	; 0x24
 8009770:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	681a      	ldr	r2, [r3, #0]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f022 0201 	bic.w	r2, r2, #1
 800978a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	683a      	ldr	r2, [r7, #0]
 800979c:	430a      	orrs	r2, r1
 800979e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f000 f84f 	bl	8009844 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	68fa      	ldr	r2, [r7, #12]
 80097ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2220      	movs	r2, #32
 80097b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2200      	movs	r2, #0
 80097ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80097be:	2300      	movs	r3, #0
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3710      	adds	r7, #16
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b084      	sub	sp, #16
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
 80097d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d101      	bne.n	80097e0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80097dc:	2302      	movs	r3, #2
 80097de:	e02d      	b.n	800983c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2201      	movs	r2, #1
 80097e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2224      	movs	r2, #36	; 0x24
 80097ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	681a      	ldr	r2, [r3, #0]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f022 0201 	bic.w	r2, r2, #1
 8009806:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	689b      	ldr	r3, [r3, #8]
 800980e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	683a      	ldr	r2, [r7, #0]
 8009818:	430a      	orrs	r2, r1
 800981a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f000 f811 	bl	8009844 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	68fa      	ldr	r2, [r7, #12]
 8009828:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2220      	movs	r2, #32
 800982e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2200      	movs	r2, #0
 8009836:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800983a:	2300      	movs	r3, #0
}
 800983c:	4618      	mov	r0, r3
 800983e:	3710      	adds	r7, #16
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009844:	b480      	push	{r7}
 8009846:	b085      	sub	sp, #20
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009850:	2b00      	cmp	r3, #0
 8009852:	d108      	bne.n	8009866 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2201      	movs	r2, #1
 8009858:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2201      	movs	r2, #1
 8009860:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009864:	e031      	b.n	80098ca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009866:	2310      	movs	r3, #16
 8009868:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800986a:	2310      	movs	r3, #16
 800986c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	689b      	ldr	r3, [r3, #8]
 8009874:	0e5b      	lsrs	r3, r3, #25
 8009876:	b2db      	uxtb	r3, r3
 8009878:	f003 0307 	and.w	r3, r3, #7
 800987c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	689b      	ldr	r3, [r3, #8]
 8009884:	0f5b      	lsrs	r3, r3, #29
 8009886:	b2db      	uxtb	r3, r3
 8009888:	f003 0307 	and.w	r3, r3, #7
 800988c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800988e:	7bbb      	ldrb	r3, [r7, #14]
 8009890:	7b3a      	ldrb	r2, [r7, #12]
 8009892:	4911      	ldr	r1, [pc, #68]	; (80098d8 <UARTEx_SetNbDataToProcess+0x94>)
 8009894:	5c8a      	ldrb	r2, [r1, r2]
 8009896:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800989a:	7b3a      	ldrb	r2, [r7, #12]
 800989c:	490f      	ldr	r1, [pc, #60]	; (80098dc <UARTEx_SetNbDataToProcess+0x98>)
 800989e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80098a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80098a4:	b29a      	uxth	r2, r3
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80098ac:	7bfb      	ldrb	r3, [r7, #15]
 80098ae:	7b7a      	ldrb	r2, [r7, #13]
 80098b0:	4909      	ldr	r1, [pc, #36]	; (80098d8 <UARTEx_SetNbDataToProcess+0x94>)
 80098b2:	5c8a      	ldrb	r2, [r1, r2]
 80098b4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80098b8:	7b7a      	ldrb	r2, [r7, #13]
 80098ba:	4908      	ldr	r1, [pc, #32]	; (80098dc <UARTEx_SetNbDataToProcess+0x98>)
 80098bc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80098be:	fb93 f3f2 	sdiv	r3, r3, r2
 80098c2:	b29a      	uxth	r2, r3
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80098ca:	bf00      	nop
 80098cc:	3714      	adds	r7, #20
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr
 80098d6:	bf00      	nop
 80098d8:	0800b488 	.word	0x0800b488
 80098dc:	0800b490 	.word	0x0800b490

080098e0 <__errno>:
 80098e0:	4b01      	ldr	r3, [pc, #4]	; (80098e8 <__errno+0x8>)
 80098e2:	6818      	ldr	r0, [r3, #0]
 80098e4:	4770      	bx	lr
 80098e6:	bf00      	nop
 80098e8:	24000038 	.word	0x24000038

080098ec <__libc_init_array>:
 80098ec:	b570      	push	{r4, r5, r6, lr}
 80098ee:	4d0d      	ldr	r5, [pc, #52]	; (8009924 <__libc_init_array+0x38>)
 80098f0:	4c0d      	ldr	r4, [pc, #52]	; (8009928 <__libc_init_array+0x3c>)
 80098f2:	1b64      	subs	r4, r4, r5
 80098f4:	10a4      	asrs	r4, r4, #2
 80098f6:	2600      	movs	r6, #0
 80098f8:	42a6      	cmp	r6, r4
 80098fa:	d109      	bne.n	8009910 <__libc_init_array+0x24>
 80098fc:	4d0b      	ldr	r5, [pc, #44]	; (800992c <__libc_init_array+0x40>)
 80098fe:	4c0c      	ldr	r4, [pc, #48]	; (8009930 <__libc_init_array+0x44>)
 8009900:	f001 fa34 	bl	800ad6c <_init>
 8009904:	1b64      	subs	r4, r4, r5
 8009906:	10a4      	asrs	r4, r4, #2
 8009908:	2600      	movs	r6, #0
 800990a:	42a6      	cmp	r6, r4
 800990c:	d105      	bne.n	800991a <__libc_init_array+0x2e>
 800990e:	bd70      	pop	{r4, r5, r6, pc}
 8009910:	f855 3b04 	ldr.w	r3, [r5], #4
 8009914:	4798      	blx	r3
 8009916:	3601      	adds	r6, #1
 8009918:	e7ee      	b.n	80098f8 <__libc_init_array+0xc>
 800991a:	f855 3b04 	ldr.w	r3, [r5], #4
 800991e:	4798      	blx	r3
 8009920:	3601      	adds	r6, #1
 8009922:	e7f2      	b.n	800990a <__libc_init_array+0x1e>
 8009924:	0800b538 	.word	0x0800b538
 8009928:	0800b538 	.word	0x0800b538
 800992c:	0800b538 	.word	0x0800b538
 8009930:	0800b53c 	.word	0x0800b53c

08009934 <memcpy>:
 8009934:	440a      	add	r2, r1
 8009936:	4291      	cmp	r1, r2
 8009938:	f100 33ff 	add.w	r3, r0, #4294967295
 800993c:	d100      	bne.n	8009940 <memcpy+0xc>
 800993e:	4770      	bx	lr
 8009940:	b510      	push	{r4, lr}
 8009942:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009946:	f803 4f01 	strb.w	r4, [r3, #1]!
 800994a:	4291      	cmp	r1, r2
 800994c:	d1f9      	bne.n	8009942 <memcpy+0xe>
 800994e:	bd10      	pop	{r4, pc}

08009950 <memset>:
 8009950:	4402      	add	r2, r0
 8009952:	4603      	mov	r3, r0
 8009954:	4293      	cmp	r3, r2
 8009956:	d100      	bne.n	800995a <memset+0xa>
 8009958:	4770      	bx	lr
 800995a:	f803 1b01 	strb.w	r1, [r3], #1
 800995e:	e7f9      	b.n	8009954 <memset+0x4>

08009960 <iprintf>:
 8009960:	b40f      	push	{r0, r1, r2, r3}
 8009962:	4b0a      	ldr	r3, [pc, #40]	; (800998c <iprintf+0x2c>)
 8009964:	b513      	push	{r0, r1, r4, lr}
 8009966:	681c      	ldr	r4, [r3, #0]
 8009968:	b124      	cbz	r4, 8009974 <iprintf+0x14>
 800996a:	69a3      	ldr	r3, [r4, #24]
 800996c:	b913      	cbnz	r3, 8009974 <iprintf+0x14>
 800996e:	4620      	mov	r0, r4
 8009970:	f000 fab2 	bl	8009ed8 <__sinit>
 8009974:	ab05      	add	r3, sp, #20
 8009976:	9a04      	ldr	r2, [sp, #16]
 8009978:	68a1      	ldr	r1, [r4, #8]
 800997a:	9301      	str	r3, [sp, #4]
 800997c:	4620      	mov	r0, r4
 800997e:	f000 fe17 	bl	800a5b0 <_vfiprintf_r>
 8009982:	b002      	add	sp, #8
 8009984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009988:	b004      	add	sp, #16
 800998a:	4770      	bx	lr
 800998c:	24000038 	.word	0x24000038

08009990 <_puts_r>:
 8009990:	b570      	push	{r4, r5, r6, lr}
 8009992:	460e      	mov	r6, r1
 8009994:	4605      	mov	r5, r0
 8009996:	b118      	cbz	r0, 80099a0 <_puts_r+0x10>
 8009998:	6983      	ldr	r3, [r0, #24]
 800999a:	b90b      	cbnz	r3, 80099a0 <_puts_r+0x10>
 800999c:	f000 fa9c 	bl	8009ed8 <__sinit>
 80099a0:	69ab      	ldr	r3, [r5, #24]
 80099a2:	68ac      	ldr	r4, [r5, #8]
 80099a4:	b913      	cbnz	r3, 80099ac <_puts_r+0x1c>
 80099a6:	4628      	mov	r0, r5
 80099a8:	f000 fa96 	bl	8009ed8 <__sinit>
 80099ac:	4b2c      	ldr	r3, [pc, #176]	; (8009a60 <_puts_r+0xd0>)
 80099ae:	429c      	cmp	r4, r3
 80099b0:	d120      	bne.n	80099f4 <_puts_r+0x64>
 80099b2:	686c      	ldr	r4, [r5, #4]
 80099b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80099b6:	07db      	lsls	r3, r3, #31
 80099b8:	d405      	bmi.n	80099c6 <_puts_r+0x36>
 80099ba:	89a3      	ldrh	r3, [r4, #12]
 80099bc:	0598      	lsls	r0, r3, #22
 80099be:	d402      	bmi.n	80099c6 <_puts_r+0x36>
 80099c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80099c2:	f000 fb27 	bl	800a014 <__retarget_lock_acquire_recursive>
 80099c6:	89a3      	ldrh	r3, [r4, #12]
 80099c8:	0719      	lsls	r1, r3, #28
 80099ca:	d51d      	bpl.n	8009a08 <_puts_r+0x78>
 80099cc:	6923      	ldr	r3, [r4, #16]
 80099ce:	b1db      	cbz	r3, 8009a08 <_puts_r+0x78>
 80099d0:	3e01      	subs	r6, #1
 80099d2:	68a3      	ldr	r3, [r4, #8]
 80099d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80099d8:	3b01      	subs	r3, #1
 80099da:	60a3      	str	r3, [r4, #8]
 80099dc:	bb39      	cbnz	r1, 8009a2e <_puts_r+0x9e>
 80099de:	2b00      	cmp	r3, #0
 80099e0:	da38      	bge.n	8009a54 <_puts_r+0xc4>
 80099e2:	4622      	mov	r2, r4
 80099e4:	210a      	movs	r1, #10
 80099e6:	4628      	mov	r0, r5
 80099e8:	f000 f89c 	bl	8009b24 <__swbuf_r>
 80099ec:	3001      	adds	r0, #1
 80099ee:	d011      	beq.n	8009a14 <_puts_r+0x84>
 80099f0:	250a      	movs	r5, #10
 80099f2:	e011      	b.n	8009a18 <_puts_r+0x88>
 80099f4:	4b1b      	ldr	r3, [pc, #108]	; (8009a64 <_puts_r+0xd4>)
 80099f6:	429c      	cmp	r4, r3
 80099f8:	d101      	bne.n	80099fe <_puts_r+0x6e>
 80099fa:	68ac      	ldr	r4, [r5, #8]
 80099fc:	e7da      	b.n	80099b4 <_puts_r+0x24>
 80099fe:	4b1a      	ldr	r3, [pc, #104]	; (8009a68 <_puts_r+0xd8>)
 8009a00:	429c      	cmp	r4, r3
 8009a02:	bf08      	it	eq
 8009a04:	68ec      	ldreq	r4, [r5, #12]
 8009a06:	e7d5      	b.n	80099b4 <_puts_r+0x24>
 8009a08:	4621      	mov	r1, r4
 8009a0a:	4628      	mov	r0, r5
 8009a0c:	f000 f8dc 	bl	8009bc8 <__swsetup_r>
 8009a10:	2800      	cmp	r0, #0
 8009a12:	d0dd      	beq.n	80099d0 <_puts_r+0x40>
 8009a14:	f04f 35ff 	mov.w	r5, #4294967295
 8009a18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a1a:	07da      	lsls	r2, r3, #31
 8009a1c:	d405      	bmi.n	8009a2a <_puts_r+0x9a>
 8009a1e:	89a3      	ldrh	r3, [r4, #12]
 8009a20:	059b      	lsls	r3, r3, #22
 8009a22:	d402      	bmi.n	8009a2a <_puts_r+0x9a>
 8009a24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a26:	f000 faf6 	bl	800a016 <__retarget_lock_release_recursive>
 8009a2a:	4628      	mov	r0, r5
 8009a2c:	bd70      	pop	{r4, r5, r6, pc}
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	da04      	bge.n	8009a3c <_puts_r+0xac>
 8009a32:	69a2      	ldr	r2, [r4, #24]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	dc06      	bgt.n	8009a46 <_puts_r+0xb6>
 8009a38:	290a      	cmp	r1, #10
 8009a3a:	d004      	beq.n	8009a46 <_puts_r+0xb6>
 8009a3c:	6823      	ldr	r3, [r4, #0]
 8009a3e:	1c5a      	adds	r2, r3, #1
 8009a40:	6022      	str	r2, [r4, #0]
 8009a42:	7019      	strb	r1, [r3, #0]
 8009a44:	e7c5      	b.n	80099d2 <_puts_r+0x42>
 8009a46:	4622      	mov	r2, r4
 8009a48:	4628      	mov	r0, r5
 8009a4a:	f000 f86b 	bl	8009b24 <__swbuf_r>
 8009a4e:	3001      	adds	r0, #1
 8009a50:	d1bf      	bne.n	80099d2 <_puts_r+0x42>
 8009a52:	e7df      	b.n	8009a14 <_puts_r+0x84>
 8009a54:	6823      	ldr	r3, [r4, #0]
 8009a56:	250a      	movs	r5, #10
 8009a58:	1c5a      	adds	r2, r3, #1
 8009a5a:	6022      	str	r2, [r4, #0]
 8009a5c:	701d      	strb	r5, [r3, #0]
 8009a5e:	e7db      	b.n	8009a18 <_puts_r+0x88>
 8009a60:	0800b4bc 	.word	0x0800b4bc
 8009a64:	0800b4dc 	.word	0x0800b4dc
 8009a68:	0800b49c 	.word	0x0800b49c

08009a6c <puts>:
 8009a6c:	4b02      	ldr	r3, [pc, #8]	; (8009a78 <puts+0xc>)
 8009a6e:	4601      	mov	r1, r0
 8009a70:	6818      	ldr	r0, [r3, #0]
 8009a72:	f7ff bf8d 	b.w	8009990 <_puts_r>
 8009a76:	bf00      	nop
 8009a78:	24000038 	.word	0x24000038

08009a7c <sniprintf>:
 8009a7c:	b40c      	push	{r2, r3}
 8009a7e:	b530      	push	{r4, r5, lr}
 8009a80:	4b17      	ldr	r3, [pc, #92]	; (8009ae0 <sniprintf+0x64>)
 8009a82:	1e0c      	subs	r4, r1, #0
 8009a84:	681d      	ldr	r5, [r3, #0]
 8009a86:	b09d      	sub	sp, #116	; 0x74
 8009a88:	da08      	bge.n	8009a9c <sniprintf+0x20>
 8009a8a:	238b      	movs	r3, #139	; 0x8b
 8009a8c:	602b      	str	r3, [r5, #0]
 8009a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8009a92:	b01d      	add	sp, #116	; 0x74
 8009a94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a98:	b002      	add	sp, #8
 8009a9a:	4770      	bx	lr
 8009a9c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009aa0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009aa4:	bf14      	ite	ne
 8009aa6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009aaa:	4623      	moveq	r3, r4
 8009aac:	9304      	str	r3, [sp, #16]
 8009aae:	9307      	str	r3, [sp, #28]
 8009ab0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009ab4:	9002      	str	r0, [sp, #8]
 8009ab6:	9006      	str	r0, [sp, #24]
 8009ab8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009abc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009abe:	ab21      	add	r3, sp, #132	; 0x84
 8009ac0:	a902      	add	r1, sp, #8
 8009ac2:	4628      	mov	r0, r5
 8009ac4:	9301      	str	r3, [sp, #4]
 8009ac6:	f000 fc49 	bl	800a35c <_svfiprintf_r>
 8009aca:	1c43      	adds	r3, r0, #1
 8009acc:	bfbc      	itt	lt
 8009ace:	238b      	movlt	r3, #139	; 0x8b
 8009ad0:	602b      	strlt	r3, [r5, #0]
 8009ad2:	2c00      	cmp	r4, #0
 8009ad4:	d0dd      	beq.n	8009a92 <sniprintf+0x16>
 8009ad6:	9b02      	ldr	r3, [sp, #8]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	701a      	strb	r2, [r3, #0]
 8009adc:	e7d9      	b.n	8009a92 <sniprintf+0x16>
 8009ade:	bf00      	nop
 8009ae0:	24000038 	.word	0x24000038

08009ae4 <siprintf>:
 8009ae4:	b40e      	push	{r1, r2, r3}
 8009ae6:	b500      	push	{lr}
 8009ae8:	b09c      	sub	sp, #112	; 0x70
 8009aea:	ab1d      	add	r3, sp, #116	; 0x74
 8009aec:	9002      	str	r0, [sp, #8]
 8009aee:	9006      	str	r0, [sp, #24]
 8009af0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009af4:	4809      	ldr	r0, [pc, #36]	; (8009b1c <siprintf+0x38>)
 8009af6:	9107      	str	r1, [sp, #28]
 8009af8:	9104      	str	r1, [sp, #16]
 8009afa:	4909      	ldr	r1, [pc, #36]	; (8009b20 <siprintf+0x3c>)
 8009afc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b00:	9105      	str	r1, [sp, #20]
 8009b02:	6800      	ldr	r0, [r0, #0]
 8009b04:	9301      	str	r3, [sp, #4]
 8009b06:	a902      	add	r1, sp, #8
 8009b08:	f000 fc28 	bl	800a35c <_svfiprintf_r>
 8009b0c:	9b02      	ldr	r3, [sp, #8]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	701a      	strb	r2, [r3, #0]
 8009b12:	b01c      	add	sp, #112	; 0x70
 8009b14:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b18:	b003      	add	sp, #12
 8009b1a:	4770      	bx	lr
 8009b1c:	24000038 	.word	0x24000038
 8009b20:	ffff0208 	.word	0xffff0208

08009b24 <__swbuf_r>:
 8009b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b26:	460e      	mov	r6, r1
 8009b28:	4614      	mov	r4, r2
 8009b2a:	4605      	mov	r5, r0
 8009b2c:	b118      	cbz	r0, 8009b36 <__swbuf_r+0x12>
 8009b2e:	6983      	ldr	r3, [r0, #24]
 8009b30:	b90b      	cbnz	r3, 8009b36 <__swbuf_r+0x12>
 8009b32:	f000 f9d1 	bl	8009ed8 <__sinit>
 8009b36:	4b21      	ldr	r3, [pc, #132]	; (8009bbc <__swbuf_r+0x98>)
 8009b38:	429c      	cmp	r4, r3
 8009b3a:	d12b      	bne.n	8009b94 <__swbuf_r+0x70>
 8009b3c:	686c      	ldr	r4, [r5, #4]
 8009b3e:	69a3      	ldr	r3, [r4, #24]
 8009b40:	60a3      	str	r3, [r4, #8]
 8009b42:	89a3      	ldrh	r3, [r4, #12]
 8009b44:	071a      	lsls	r2, r3, #28
 8009b46:	d52f      	bpl.n	8009ba8 <__swbuf_r+0x84>
 8009b48:	6923      	ldr	r3, [r4, #16]
 8009b4a:	b36b      	cbz	r3, 8009ba8 <__swbuf_r+0x84>
 8009b4c:	6923      	ldr	r3, [r4, #16]
 8009b4e:	6820      	ldr	r0, [r4, #0]
 8009b50:	1ac0      	subs	r0, r0, r3
 8009b52:	6963      	ldr	r3, [r4, #20]
 8009b54:	b2f6      	uxtb	r6, r6
 8009b56:	4283      	cmp	r3, r0
 8009b58:	4637      	mov	r7, r6
 8009b5a:	dc04      	bgt.n	8009b66 <__swbuf_r+0x42>
 8009b5c:	4621      	mov	r1, r4
 8009b5e:	4628      	mov	r0, r5
 8009b60:	f000 f926 	bl	8009db0 <_fflush_r>
 8009b64:	bb30      	cbnz	r0, 8009bb4 <__swbuf_r+0x90>
 8009b66:	68a3      	ldr	r3, [r4, #8]
 8009b68:	3b01      	subs	r3, #1
 8009b6a:	60a3      	str	r3, [r4, #8]
 8009b6c:	6823      	ldr	r3, [r4, #0]
 8009b6e:	1c5a      	adds	r2, r3, #1
 8009b70:	6022      	str	r2, [r4, #0]
 8009b72:	701e      	strb	r6, [r3, #0]
 8009b74:	6963      	ldr	r3, [r4, #20]
 8009b76:	3001      	adds	r0, #1
 8009b78:	4283      	cmp	r3, r0
 8009b7a:	d004      	beq.n	8009b86 <__swbuf_r+0x62>
 8009b7c:	89a3      	ldrh	r3, [r4, #12]
 8009b7e:	07db      	lsls	r3, r3, #31
 8009b80:	d506      	bpl.n	8009b90 <__swbuf_r+0x6c>
 8009b82:	2e0a      	cmp	r6, #10
 8009b84:	d104      	bne.n	8009b90 <__swbuf_r+0x6c>
 8009b86:	4621      	mov	r1, r4
 8009b88:	4628      	mov	r0, r5
 8009b8a:	f000 f911 	bl	8009db0 <_fflush_r>
 8009b8e:	b988      	cbnz	r0, 8009bb4 <__swbuf_r+0x90>
 8009b90:	4638      	mov	r0, r7
 8009b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b94:	4b0a      	ldr	r3, [pc, #40]	; (8009bc0 <__swbuf_r+0x9c>)
 8009b96:	429c      	cmp	r4, r3
 8009b98:	d101      	bne.n	8009b9e <__swbuf_r+0x7a>
 8009b9a:	68ac      	ldr	r4, [r5, #8]
 8009b9c:	e7cf      	b.n	8009b3e <__swbuf_r+0x1a>
 8009b9e:	4b09      	ldr	r3, [pc, #36]	; (8009bc4 <__swbuf_r+0xa0>)
 8009ba0:	429c      	cmp	r4, r3
 8009ba2:	bf08      	it	eq
 8009ba4:	68ec      	ldreq	r4, [r5, #12]
 8009ba6:	e7ca      	b.n	8009b3e <__swbuf_r+0x1a>
 8009ba8:	4621      	mov	r1, r4
 8009baa:	4628      	mov	r0, r5
 8009bac:	f000 f80c 	bl	8009bc8 <__swsetup_r>
 8009bb0:	2800      	cmp	r0, #0
 8009bb2:	d0cb      	beq.n	8009b4c <__swbuf_r+0x28>
 8009bb4:	f04f 37ff 	mov.w	r7, #4294967295
 8009bb8:	e7ea      	b.n	8009b90 <__swbuf_r+0x6c>
 8009bba:	bf00      	nop
 8009bbc:	0800b4bc 	.word	0x0800b4bc
 8009bc0:	0800b4dc 	.word	0x0800b4dc
 8009bc4:	0800b49c 	.word	0x0800b49c

08009bc8 <__swsetup_r>:
 8009bc8:	4b32      	ldr	r3, [pc, #200]	; (8009c94 <__swsetup_r+0xcc>)
 8009bca:	b570      	push	{r4, r5, r6, lr}
 8009bcc:	681d      	ldr	r5, [r3, #0]
 8009bce:	4606      	mov	r6, r0
 8009bd0:	460c      	mov	r4, r1
 8009bd2:	b125      	cbz	r5, 8009bde <__swsetup_r+0x16>
 8009bd4:	69ab      	ldr	r3, [r5, #24]
 8009bd6:	b913      	cbnz	r3, 8009bde <__swsetup_r+0x16>
 8009bd8:	4628      	mov	r0, r5
 8009bda:	f000 f97d 	bl	8009ed8 <__sinit>
 8009bde:	4b2e      	ldr	r3, [pc, #184]	; (8009c98 <__swsetup_r+0xd0>)
 8009be0:	429c      	cmp	r4, r3
 8009be2:	d10f      	bne.n	8009c04 <__swsetup_r+0x3c>
 8009be4:	686c      	ldr	r4, [r5, #4]
 8009be6:	89a3      	ldrh	r3, [r4, #12]
 8009be8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009bec:	0719      	lsls	r1, r3, #28
 8009bee:	d42c      	bmi.n	8009c4a <__swsetup_r+0x82>
 8009bf0:	06dd      	lsls	r5, r3, #27
 8009bf2:	d411      	bmi.n	8009c18 <__swsetup_r+0x50>
 8009bf4:	2309      	movs	r3, #9
 8009bf6:	6033      	str	r3, [r6, #0]
 8009bf8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009bfc:	81a3      	strh	r3, [r4, #12]
 8009bfe:	f04f 30ff 	mov.w	r0, #4294967295
 8009c02:	e03e      	b.n	8009c82 <__swsetup_r+0xba>
 8009c04:	4b25      	ldr	r3, [pc, #148]	; (8009c9c <__swsetup_r+0xd4>)
 8009c06:	429c      	cmp	r4, r3
 8009c08:	d101      	bne.n	8009c0e <__swsetup_r+0x46>
 8009c0a:	68ac      	ldr	r4, [r5, #8]
 8009c0c:	e7eb      	b.n	8009be6 <__swsetup_r+0x1e>
 8009c0e:	4b24      	ldr	r3, [pc, #144]	; (8009ca0 <__swsetup_r+0xd8>)
 8009c10:	429c      	cmp	r4, r3
 8009c12:	bf08      	it	eq
 8009c14:	68ec      	ldreq	r4, [r5, #12]
 8009c16:	e7e6      	b.n	8009be6 <__swsetup_r+0x1e>
 8009c18:	0758      	lsls	r0, r3, #29
 8009c1a:	d512      	bpl.n	8009c42 <__swsetup_r+0x7a>
 8009c1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c1e:	b141      	cbz	r1, 8009c32 <__swsetup_r+0x6a>
 8009c20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c24:	4299      	cmp	r1, r3
 8009c26:	d002      	beq.n	8009c2e <__swsetup_r+0x66>
 8009c28:	4630      	mov	r0, r6
 8009c2a:	f000 fa5b 	bl	800a0e4 <_free_r>
 8009c2e:	2300      	movs	r3, #0
 8009c30:	6363      	str	r3, [r4, #52]	; 0x34
 8009c32:	89a3      	ldrh	r3, [r4, #12]
 8009c34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009c38:	81a3      	strh	r3, [r4, #12]
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	6063      	str	r3, [r4, #4]
 8009c3e:	6923      	ldr	r3, [r4, #16]
 8009c40:	6023      	str	r3, [r4, #0]
 8009c42:	89a3      	ldrh	r3, [r4, #12]
 8009c44:	f043 0308 	orr.w	r3, r3, #8
 8009c48:	81a3      	strh	r3, [r4, #12]
 8009c4a:	6923      	ldr	r3, [r4, #16]
 8009c4c:	b94b      	cbnz	r3, 8009c62 <__swsetup_r+0x9a>
 8009c4e:	89a3      	ldrh	r3, [r4, #12]
 8009c50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009c54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009c58:	d003      	beq.n	8009c62 <__swsetup_r+0x9a>
 8009c5a:	4621      	mov	r1, r4
 8009c5c:	4630      	mov	r0, r6
 8009c5e:	f000 fa01 	bl	800a064 <__smakebuf_r>
 8009c62:	89a0      	ldrh	r0, [r4, #12]
 8009c64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009c68:	f010 0301 	ands.w	r3, r0, #1
 8009c6c:	d00a      	beq.n	8009c84 <__swsetup_r+0xbc>
 8009c6e:	2300      	movs	r3, #0
 8009c70:	60a3      	str	r3, [r4, #8]
 8009c72:	6963      	ldr	r3, [r4, #20]
 8009c74:	425b      	negs	r3, r3
 8009c76:	61a3      	str	r3, [r4, #24]
 8009c78:	6923      	ldr	r3, [r4, #16]
 8009c7a:	b943      	cbnz	r3, 8009c8e <__swsetup_r+0xc6>
 8009c7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009c80:	d1ba      	bne.n	8009bf8 <__swsetup_r+0x30>
 8009c82:	bd70      	pop	{r4, r5, r6, pc}
 8009c84:	0781      	lsls	r1, r0, #30
 8009c86:	bf58      	it	pl
 8009c88:	6963      	ldrpl	r3, [r4, #20]
 8009c8a:	60a3      	str	r3, [r4, #8]
 8009c8c:	e7f4      	b.n	8009c78 <__swsetup_r+0xb0>
 8009c8e:	2000      	movs	r0, #0
 8009c90:	e7f7      	b.n	8009c82 <__swsetup_r+0xba>
 8009c92:	bf00      	nop
 8009c94:	24000038 	.word	0x24000038
 8009c98:	0800b4bc 	.word	0x0800b4bc
 8009c9c:	0800b4dc 	.word	0x0800b4dc
 8009ca0:	0800b49c 	.word	0x0800b49c

08009ca4 <__sflush_r>:
 8009ca4:	898a      	ldrh	r2, [r1, #12]
 8009ca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009caa:	4605      	mov	r5, r0
 8009cac:	0710      	lsls	r0, r2, #28
 8009cae:	460c      	mov	r4, r1
 8009cb0:	d458      	bmi.n	8009d64 <__sflush_r+0xc0>
 8009cb2:	684b      	ldr	r3, [r1, #4]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	dc05      	bgt.n	8009cc4 <__sflush_r+0x20>
 8009cb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	dc02      	bgt.n	8009cc4 <__sflush_r+0x20>
 8009cbe:	2000      	movs	r0, #0
 8009cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cc6:	2e00      	cmp	r6, #0
 8009cc8:	d0f9      	beq.n	8009cbe <__sflush_r+0x1a>
 8009cca:	2300      	movs	r3, #0
 8009ccc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009cd0:	682f      	ldr	r7, [r5, #0]
 8009cd2:	602b      	str	r3, [r5, #0]
 8009cd4:	d032      	beq.n	8009d3c <__sflush_r+0x98>
 8009cd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009cd8:	89a3      	ldrh	r3, [r4, #12]
 8009cda:	075a      	lsls	r2, r3, #29
 8009cdc:	d505      	bpl.n	8009cea <__sflush_r+0x46>
 8009cde:	6863      	ldr	r3, [r4, #4]
 8009ce0:	1ac0      	subs	r0, r0, r3
 8009ce2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ce4:	b10b      	cbz	r3, 8009cea <__sflush_r+0x46>
 8009ce6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009ce8:	1ac0      	subs	r0, r0, r3
 8009cea:	2300      	movs	r3, #0
 8009cec:	4602      	mov	r2, r0
 8009cee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009cf0:	6a21      	ldr	r1, [r4, #32]
 8009cf2:	4628      	mov	r0, r5
 8009cf4:	47b0      	blx	r6
 8009cf6:	1c43      	adds	r3, r0, #1
 8009cf8:	89a3      	ldrh	r3, [r4, #12]
 8009cfa:	d106      	bne.n	8009d0a <__sflush_r+0x66>
 8009cfc:	6829      	ldr	r1, [r5, #0]
 8009cfe:	291d      	cmp	r1, #29
 8009d00:	d82c      	bhi.n	8009d5c <__sflush_r+0xb8>
 8009d02:	4a2a      	ldr	r2, [pc, #168]	; (8009dac <__sflush_r+0x108>)
 8009d04:	40ca      	lsrs	r2, r1
 8009d06:	07d6      	lsls	r6, r2, #31
 8009d08:	d528      	bpl.n	8009d5c <__sflush_r+0xb8>
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	6062      	str	r2, [r4, #4]
 8009d0e:	04d9      	lsls	r1, r3, #19
 8009d10:	6922      	ldr	r2, [r4, #16]
 8009d12:	6022      	str	r2, [r4, #0]
 8009d14:	d504      	bpl.n	8009d20 <__sflush_r+0x7c>
 8009d16:	1c42      	adds	r2, r0, #1
 8009d18:	d101      	bne.n	8009d1e <__sflush_r+0x7a>
 8009d1a:	682b      	ldr	r3, [r5, #0]
 8009d1c:	b903      	cbnz	r3, 8009d20 <__sflush_r+0x7c>
 8009d1e:	6560      	str	r0, [r4, #84]	; 0x54
 8009d20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d22:	602f      	str	r7, [r5, #0]
 8009d24:	2900      	cmp	r1, #0
 8009d26:	d0ca      	beq.n	8009cbe <__sflush_r+0x1a>
 8009d28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d2c:	4299      	cmp	r1, r3
 8009d2e:	d002      	beq.n	8009d36 <__sflush_r+0x92>
 8009d30:	4628      	mov	r0, r5
 8009d32:	f000 f9d7 	bl	800a0e4 <_free_r>
 8009d36:	2000      	movs	r0, #0
 8009d38:	6360      	str	r0, [r4, #52]	; 0x34
 8009d3a:	e7c1      	b.n	8009cc0 <__sflush_r+0x1c>
 8009d3c:	6a21      	ldr	r1, [r4, #32]
 8009d3e:	2301      	movs	r3, #1
 8009d40:	4628      	mov	r0, r5
 8009d42:	47b0      	blx	r6
 8009d44:	1c41      	adds	r1, r0, #1
 8009d46:	d1c7      	bne.n	8009cd8 <__sflush_r+0x34>
 8009d48:	682b      	ldr	r3, [r5, #0]
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d0c4      	beq.n	8009cd8 <__sflush_r+0x34>
 8009d4e:	2b1d      	cmp	r3, #29
 8009d50:	d001      	beq.n	8009d56 <__sflush_r+0xb2>
 8009d52:	2b16      	cmp	r3, #22
 8009d54:	d101      	bne.n	8009d5a <__sflush_r+0xb6>
 8009d56:	602f      	str	r7, [r5, #0]
 8009d58:	e7b1      	b.n	8009cbe <__sflush_r+0x1a>
 8009d5a:	89a3      	ldrh	r3, [r4, #12]
 8009d5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d60:	81a3      	strh	r3, [r4, #12]
 8009d62:	e7ad      	b.n	8009cc0 <__sflush_r+0x1c>
 8009d64:	690f      	ldr	r7, [r1, #16]
 8009d66:	2f00      	cmp	r7, #0
 8009d68:	d0a9      	beq.n	8009cbe <__sflush_r+0x1a>
 8009d6a:	0793      	lsls	r3, r2, #30
 8009d6c:	680e      	ldr	r6, [r1, #0]
 8009d6e:	bf08      	it	eq
 8009d70:	694b      	ldreq	r3, [r1, #20]
 8009d72:	600f      	str	r7, [r1, #0]
 8009d74:	bf18      	it	ne
 8009d76:	2300      	movne	r3, #0
 8009d78:	eba6 0807 	sub.w	r8, r6, r7
 8009d7c:	608b      	str	r3, [r1, #8]
 8009d7e:	f1b8 0f00 	cmp.w	r8, #0
 8009d82:	dd9c      	ble.n	8009cbe <__sflush_r+0x1a>
 8009d84:	6a21      	ldr	r1, [r4, #32]
 8009d86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009d88:	4643      	mov	r3, r8
 8009d8a:	463a      	mov	r2, r7
 8009d8c:	4628      	mov	r0, r5
 8009d8e:	47b0      	blx	r6
 8009d90:	2800      	cmp	r0, #0
 8009d92:	dc06      	bgt.n	8009da2 <__sflush_r+0xfe>
 8009d94:	89a3      	ldrh	r3, [r4, #12]
 8009d96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d9a:	81a3      	strh	r3, [r4, #12]
 8009d9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009da0:	e78e      	b.n	8009cc0 <__sflush_r+0x1c>
 8009da2:	4407      	add	r7, r0
 8009da4:	eba8 0800 	sub.w	r8, r8, r0
 8009da8:	e7e9      	b.n	8009d7e <__sflush_r+0xda>
 8009daa:	bf00      	nop
 8009dac:	20400001 	.word	0x20400001

08009db0 <_fflush_r>:
 8009db0:	b538      	push	{r3, r4, r5, lr}
 8009db2:	690b      	ldr	r3, [r1, #16]
 8009db4:	4605      	mov	r5, r0
 8009db6:	460c      	mov	r4, r1
 8009db8:	b913      	cbnz	r3, 8009dc0 <_fflush_r+0x10>
 8009dba:	2500      	movs	r5, #0
 8009dbc:	4628      	mov	r0, r5
 8009dbe:	bd38      	pop	{r3, r4, r5, pc}
 8009dc0:	b118      	cbz	r0, 8009dca <_fflush_r+0x1a>
 8009dc2:	6983      	ldr	r3, [r0, #24]
 8009dc4:	b90b      	cbnz	r3, 8009dca <_fflush_r+0x1a>
 8009dc6:	f000 f887 	bl	8009ed8 <__sinit>
 8009dca:	4b14      	ldr	r3, [pc, #80]	; (8009e1c <_fflush_r+0x6c>)
 8009dcc:	429c      	cmp	r4, r3
 8009dce:	d11b      	bne.n	8009e08 <_fflush_r+0x58>
 8009dd0:	686c      	ldr	r4, [r5, #4]
 8009dd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d0ef      	beq.n	8009dba <_fflush_r+0xa>
 8009dda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ddc:	07d0      	lsls	r0, r2, #31
 8009dde:	d404      	bmi.n	8009dea <_fflush_r+0x3a>
 8009de0:	0599      	lsls	r1, r3, #22
 8009de2:	d402      	bmi.n	8009dea <_fflush_r+0x3a>
 8009de4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009de6:	f000 f915 	bl	800a014 <__retarget_lock_acquire_recursive>
 8009dea:	4628      	mov	r0, r5
 8009dec:	4621      	mov	r1, r4
 8009dee:	f7ff ff59 	bl	8009ca4 <__sflush_r>
 8009df2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009df4:	07da      	lsls	r2, r3, #31
 8009df6:	4605      	mov	r5, r0
 8009df8:	d4e0      	bmi.n	8009dbc <_fflush_r+0xc>
 8009dfa:	89a3      	ldrh	r3, [r4, #12]
 8009dfc:	059b      	lsls	r3, r3, #22
 8009dfe:	d4dd      	bmi.n	8009dbc <_fflush_r+0xc>
 8009e00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e02:	f000 f908 	bl	800a016 <__retarget_lock_release_recursive>
 8009e06:	e7d9      	b.n	8009dbc <_fflush_r+0xc>
 8009e08:	4b05      	ldr	r3, [pc, #20]	; (8009e20 <_fflush_r+0x70>)
 8009e0a:	429c      	cmp	r4, r3
 8009e0c:	d101      	bne.n	8009e12 <_fflush_r+0x62>
 8009e0e:	68ac      	ldr	r4, [r5, #8]
 8009e10:	e7df      	b.n	8009dd2 <_fflush_r+0x22>
 8009e12:	4b04      	ldr	r3, [pc, #16]	; (8009e24 <_fflush_r+0x74>)
 8009e14:	429c      	cmp	r4, r3
 8009e16:	bf08      	it	eq
 8009e18:	68ec      	ldreq	r4, [r5, #12]
 8009e1a:	e7da      	b.n	8009dd2 <_fflush_r+0x22>
 8009e1c:	0800b4bc 	.word	0x0800b4bc
 8009e20:	0800b4dc 	.word	0x0800b4dc
 8009e24:	0800b49c 	.word	0x0800b49c

08009e28 <std>:
 8009e28:	2300      	movs	r3, #0
 8009e2a:	b510      	push	{r4, lr}
 8009e2c:	4604      	mov	r4, r0
 8009e2e:	e9c0 3300 	strd	r3, r3, [r0]
 8009e32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e36:	6083      	str	r3, [r0, #8]
 8009e38:	8181      	strh	r1, [r0, #12]
 8009e3a:	6643      	str	r3, [r0, #100]	; 0x64
 8009e3c:	81c2      	strh	r2, [r0, #14]
 8009e3e:	6183      	str	r3, [r0, #24]
 8009e40:	4619      	mov	r1, r3
 8009e42:	2208      	movs	r2, #8
 8009e44:	305c      	adds	r0, #92	; 0x5c
 8009e46:	f7ff fd83 	bl	8009950 <memset>
 8009e4a:	4b05      	ldr	r3, [pc, #20]	; (8009e60 <std+0x38>)
 8009e4c:	6263      	str	r3, [r4, #36]	; 0x24
 8009e4e:	4b05      	ldr	r3, [pc, #20]	; (8009e64 <std+0x3c>)
 8009e50:	62a3      	str	r3, [r4, #40]	; 0x28
 8009e52:	4b05      	ldr	r3, [pc, #20]	; (8009e68 <std+0x40>)
 8009e54:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009e56:	4b05      	ldr	r3, [pc, #20]	; (8009e6c <std+0x44>)
 8009e58:	6224      	str	r4, [r4, #32]
 8009e5a:	6323      	str	r3, [r4, #48]	; 0x30
 8009e5c:	bd10      	pop	{r4, pc}
 8009e5e:	bf00      	nop
 8009e60:	0800ab59 	.word	0x0800ab59
 8009e64:	0800ab7b 	.word	0x0800ab7b
 8009e68:	0800abb3 	.word	0x0800abb3
 8009e6c:	0800abd7 	.word	0x0800abd7

08009e70 <_cleanup_r>:
 8009e70:	4901      	ldr	r1, [pc, #4]	; (8009e78 <_cleanup_r+0x8>)
 8009e72:	f000 b8af 	b.w	8009fd4 <_fwalk_reent>
 8009e76:	bf00      	nop
 8009e78:	08009db1 	.word	0x08009db1

08009e7c <__sfmoreglue>:
 8009e7c:	b570      	push	{r4, r5, r6, lr}
 8009e7e:	2268      	movs	r2, #104	; 0x68
 8009e80:	1e4d      	subs	r5, r1, #1
 8009e82:	4355      	muls	r5, r2
 8009e84:	460e      	mov	r6, r1
 8009e86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009e8a:	f000 f997 	bl	800a1bc <_malloc_r>
 8009e8e:	4604      	mov	r4, r0
 8009e90:	b140      	cbz	r0, 8009ea4 <__sfmoreglue+0x28>
 8009e92:	2100      	movs	r1, #0
 8009e94:	e9c0 1600 	strd	r1, r6, [r0]
 8009e98:	300c      	adds	r0, #12
 8009e9a:	60a0      	str	r0, [r4, #8]
 8009e9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009ea0:	f7ff fd56 	bl	8009950 <memset>
 8009ea4:	4620      	mov	r0, r4
 8009ea6:	bd70      	pop	{r4, r5, r6, pc}

08009ea8 <__sfp_lock_acquire>:
 8009ea8:	4801      	ldr	r0, [pc, #4]	; (8009eb0 <__sfp_lock_acquire+0x8>)
 8009eaa:	f000 b8b3 	b.w	800a014 <__retarget_lock_acquire_recursive>
 8009eae:	bf00      	nop
 8009eb0:	240004e1 	.word	0x240004e1

08009eb4 <__sfp_lock_release>:
 8009eb4:	4801      	ldr	r0, [pc, #4]	; (8009ebc <__sfp_lock_release+0x8>)
 8009eb6:	f000 b8ae 	b.w	800a016 <__retarget_lock_release_recursive>
 8009eba:	bf00      	nop
 8009ebc:	240004e1 	.word	0x240004e1

08009ec0 <__sinit_lock_acquire>:
 8009ec0:	4801      	ldr	r0, [pc, #4]	; (8009ec8 <__sinit_lock_acquire+0x8>)
 8009ec2:	f000 b8a7 	b.w	800a014 <__retarget_lock_acquire_recursive>
 8009ec6:	bf00      	nop
 8009ec8:	240004e2 	.word	0x240004e2

08009ecc <__sinit_lock_release>:
 8009ecc:	4801      	ldr	r0, [pc, #4]	; (8009ed4 <__sinit_lock_release+0x8>)
 8009ece:	f000 b8a2 	b.w	800a016 <__retarget_lock_release_recursive>
 8009ed2:	bf00      	nop
 8009ed4:	240004e2 	.word	0x240004e2

08009ed8 <__sinit>:
 8009ed8:	b510      	push	{r4, lr}
 8009eda:	4604      	mov	r4, r0
 8009edc:	f7ff fff0 	bl	8009ec0 <__sinit_lock_acquire>
 8009ee0:	69a3      	ldr	r3, [r4, #24]
 8009ee2:	b11b      	cbz	r3, 8009eec <__sinit+0x14>
 8009ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ee8:	f7ff bff0 	b.w	8009ecc <__sinit_lock_release>
 8009eec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009ef0:	6523      	str	r3, [r4, #80]	; 0x50
 8009ef2:	4b13      	ldr	r3, [pc, #76]	; (8009f40 <__sinit+0x68>)
 8009ef4:	4a13      	ldr	r2, [pc, #76]	; (8009f44 <__sinit+0x6c>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	62a2      	str	r2, [r4, #40]	; 0x28
 8009efa:	42a3      	cmp	r3, r4
 8009efc:	bf04      	itt	eq
 8009efe:	2301      	moveq	r3, #1
 8009f00:	61a3      	streq	r3, [r4, #24]
 8009f02:	4620      	mov	r0, r4
 8009f04:	f000 f820 	bl	8009f48 <__sfp>
 8009f08:	6060      	str	r0, [r4, #4]
 8009f0a:	4620      	mov	r0, r4
 8009f0c:	f000 f81c 	bl	8009f48 <__sfp>
 8009f10:	60a0      	str	r0, [r4, #8]
 8009f12:	4620      	mov	r0, r4
 8009f14:	f000 f818 	bl	8009f48 <__sfp>
 8009f18:	2200      	movs	r2, #0
 8009f1a:	60e0      	str	r0, [r4, #12]
 8009f1c:	2104      	movs	r1, #4
 8009f1e:	6860      	ldr	r0, [r4, #4]
 8009f20:	f7ff ff82 	bl	8009e28 <std>
 8009f24:	68a0      	ldr	r0, [r4, #8]
 8009f26:	2201      	movs	r2, #1
 8009f28:	2109      	movs	r1, #9
 8009f2a:	f7ff ff7d 	bl	8009e28 <std>
 8009f2e:	68e0      	ldr	r0, [r4, #12]
 8009f30:	2202      	movs	r2, #2
 8009f32:	2112      	movs	r1, #18
 8009f34:	f7ff ff78 	bl	8009e28 <std>
 8009f38:	2301      	movs	r3, #1
 8009f3a:	61a3      	str	r3, [r4, #24]
 8009f3c:	e7d2      	b.n	8009ee4 <__sinit+0xc>
 8009f3e:	bf00      	nop
 8009f40:	0800b498 	.word	0x0800b498
 8009f44:	08009e71 	.word	0x08009e71

08009f48 <__sfp>:
 8009f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f4a:	4607      	mov	r7, r0
 8009f4c:	f7ff ffac 	bl	8009ea8 <__sfp_lock_acquire>
 8009f50:	4b1e      	ldr	r3, [pc, #120]	; (8009fcc <__sfp+0x84>)
 8009f52:	681e      	ldr	r6, [r3, #0]
 8009f54:	69b3      	ldr	r3, [r6, #24]
 8009f56:	b913      	cbnz	r3, 8009f5e <__sfp+0x16>
 8009f58:	4630      	mov	r0, r6
 8009f5a:	f7ff ffbd 	bl	8009ed8 <__sinit>
 8009f5e:	3648      	adds	r6, #72	; 0x48
 8009f60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009f64:	3b01      	subs	r3, #1
 8009f66:	d503      	bpl.n	8009f70 <__sfp+0x28>
 8009f68:	6833      	ldr	r3, [r6, #0]
 8009f6a:	b30b      	cbz	r3, 8009fb0 <__sfp+0x68>
 8009f6c:	6836      	ldr	r6, [r6, #0]
 8009f6e:	e7f7      	b.n	8009f60 <__sfp+0x18>
 8009f70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009f74:	b9d5      	cbnz	r5, 8009fac <__sfp+0x64>
 8009f76:	4b16      	ldr	r3, [pc, #88]	; (8009fd0 <__sfp+0x88>)
 8009f78:	60e3      	str	r3, [r4, #12]
 8009f7a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009f7e:	6665      	str	r5, [r4, #100]	; 0x64
 8009f80:	f000 f847 	bl	800a012 <__retarget_lock_init_recursive>
 8009f84:	f7ff ff96 	bl	8009eb4 <__sfp_lock_release>
 8009f88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009f8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009f90:	6025      	str	r5, [r4, #0]
 8009f92:	61a5      	str	r5, [r4, #24]
 8009f94:	2208      	movs	r2, #8
 8009f96:	4629      	mov	r1, r5
 8009f98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009f9c:	f7ff fcd8 	bl	8009950 <memset>
 8009fa0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009fa4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009fa8:	4620      	mov	r0, r4
 8009faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fac:	3468      	adds	r4, #104	; 0x68
 8009fae:	e7d9      	b.n	8009f64 <__sfp+0x1c>
 8009fb0:	2104      	movs	r1, #4
 8009fb2:	4638      	mov	r0, r7
 8009fb4:	f7ff ff62 	bl	8009e7c <__sfmoreglue>
 8009fb8:	4604      	mov	r4, r0
 8009fba:	6030      	str	r0, [r6, #0]
 8009fbc:	2800      	cmp	r0, #0
 8009fbe:	d1d5      	bne.n	8009f6c <__sfp+0x24>
 8009fc0:	f7ff ff78 	bl	8009eb4 <__sfp_lock_release>
 8009fc4:	230c      	movs	r3, #12
 8009fc6:	603b      	str	r3, [r7, #0]
 8009fc8:	e7ee      	b.n	8009fa8 <__sfp+0x60>
 8009fca:	bf00      	nop
 8009fcc:	0800b498 	.word	0x0800b498
 8009fd0:	ffff0001 	.word	0xffff0001

08009fd4 <_fwalk_reent>:
 8009fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fd8:	4606      	mov	r6, r0
 8009fda:	4688      	mov	r8, r1
 8009fdc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009fe0:	2700      	movs	r7, #0
 8009fe2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009fe6:	f1b9 0901 	subs.w	r9, r9, #1
 8009fea:	d505      	bpl.n	8009ff8 <_fwalk_reent+0x24>
 8009fec:	6824      	ldr	r4, [r4, #0]
 8009fee:	2c00      	cmp	r4, #0
 8009ff0:	d1f7      	bne.n	8009fe2 <_fwalk_reent+0xe>
 8009ff2:	4638      	mov	r0, r7
 8009ff4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ff8:	89ab      	ldrh	r3, [r5, #12]
 8009ffa:	2b01      	cmp	r3, #1
 8009ffc:	d907      	bls.n	800a00e <_fwalk_reent+0x3a>
 8009ffe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a002:	3301      	adds	r3, #1
 800a004:	d003      	beq.n	800a00e <_fwalk_reent+0x3a>
 800a006:	4629      	mov	r1, r5
 800a008:	4630      	mov	r0, r6
 800a00a:	47c0      	blx	r8
 800a00c:	4307      	orrs	r7, r0
 800a00e:	3568      	adds	r5, #104	; 0x68
 800a010:	e7e9      	b.n	8009fe6 <_fwalk_reent+0x12>

0800a012 <__retarget_lock_init_recursive>:
 800a012:	4770      	bx	lr

0800a014 <__retarget_lock_acquire_recursive>:
 800a014:	4770      	bx	lr

0800a016 <__retarget_lock_release_recursive>:
 800a016:	4770      	bx	lr

0800a018 <__swhatbuf_r>:
 800a018:	b570      	push	{r4, r5, r6, lr}
 800a01a:	460e      	mov	r6, r1
 800a01c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a020:	2900      	cmp	r1, #0
 800a022:	b096      	sub	sp, #88	; 0x58
 800a024:	4614      	mov	r4, r2
 800a026:	461d      	mov	r5, r3
 800a028:	da08      	bge.n	800a03c <__swhatbuf_r+0x24>
 800a02a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a02e:	2200      	movs	r2, #0
 800a030:	602a      	str	r2, [r5, #0]
 800a032:	061a      	lsls	r2, r3, #24
 800a034:	d410      	bmi.n	800a058 <__swhatbuf_r+0x40>
 800a036:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a03a:	e00e      	b.n	800a05a <__swhatbuf_r+0x42>
 800a03c:	466a      	mov	r2, sp
 800a03e:	f000 fdf1 	bl	800ac24 <_fstat_r>
 800a042:	2800      	cmp	r0, #0
 800a044:	dbf1      	blt.n	800a02a <__swhatbuf_r+0x12>
 800a046:	9a01      	ldr	r2, [sp, #4]
 800a048:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a04c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a050:	425a      	negs	r2, r3
 800a052:	415a      	adcs	r2, r3
 800a054:	602a      	str	r2, [r5, #0]
 800a056:	e7ee      	b.n	800a036 <__swhatbuf_r+0x1e>
 800a058:	2340      	movs	r3, #64	; 0x40
 800a05a:	2000      	movs	r0, #0
 800a05c:	6023      	str	r3, [r4, #0]
 800a05e:	b016      	add	sp, #88	; 0x58
 800a060:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a064 <__smakebuf_r>:
 800a064:	898b      	ldrh	r3, [r1, #12]
 800a066:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a068:	079d      	lsls	r5, r3, #30
 800a06a:	4606      	mov	r6, r0
 800a06c:	460c      	mov	r4, r1
 800a06e:	d507      	bpl.n	800a080 <__smakebuf_r+0x1c>
 800a070:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a074:	6023      	str	r3, [r4, #0]
 800a076:	6123      	str	r3, [r4, #16]
 800a078:	2301      	movs	r3, #1
 800a07a:	6163      	str	r3, [r4, #20]
 800a07c:	b002      	add	sp, #8
 800a07e:	bd70      	pop	{r4, r5, r6, pc}
 800a080:	ab01      	add	r3, sp, #4
 800a082:	466a      	mov	r2, sp
 800a084:	f7ff ffc8 	bl	800a018 <__swhatbuf_r>
 800a088:	9900      	ldr	r1, [sp, #0]
 800a08a:	4605      	mov	r5, r0
 800a08c:	4630      	mov	r0, r6
 800a08e:	f000 f895 	bl	800a1bc <_malloc_r>
 800a092:	b948      	cbnz	r0, 800a0a8 <__smakebuf_r+0x44>
 800a094:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a098:	059a      	lsls	r2, r3, #22
 800a09a:	d4ef      	bmi.n	800a07c <__smakebuf_r+0x18>
 800a09c:	f023 0303 	bic.w	r3, r3, #3
 800a0a0:	f043 0302 	orr.w	r3, r3, #2
 800a0a4:	81a3      	strh	r3, [r4, #12]
 800a0a6:	e7e3      	b.n	800a070 <__smakebuf_r+0xc>
 800a0a8:	4b0d      	ldr	r3, [pc, #52]	; (800a0e0 <__smakebuf_r+0x7c>)
 800a0aa:	62b3      	str	r3, [r6, #40]	; 0x28
 800a0ac:	89a3      	ldrh	r3, [r4, #12]
 800a0ae:	6020      	str	r0, [r4, #0]
 800a0b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0b4:	81a3      	strh	r3, [r4, #12]
 800a0b6:	9b00      	ldr	r3, [sp, #0]
 800a0b8:	6163      	str	r3, [r4, #20]
 800a0ba:	9b01      	ldr	r3, [sp, #4]
 800a0bc:	6120      	str	r0, [r4, #16]
 800a0be:	b15b      	cbz	r3, 800a0d8 <__smakebuf_r+0x74>
 800a0c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0c4:	4630      	mov	r0, r6
 800a0c6:	f000 fdbf 	bl	800ac48 <_isatty_r>
 800a0ca:	b128      	cbz	r0, 800a0d8 <__smakebuf_r+0x74>
 800a0cc:	89a3      	ldrh	r3, [r4, #12]
 800a0ce:	f023 0303 	bic.w	r3, r3, #3
 800a0d2:	f043 0301 	orr.w	r3, r3, #1
 800a0d6:	81a3      	strh	r3, [r4, #12]
 800a0d8:	89a0      	ldrh	r0, [r4, #12]
 800a0da:	4305      	orrs	r5, r0
 800a0dc:	81a5      	strh	r5, [r4, #12]
 800a0de:	e7cd      	b.n	800a07c <__smakebuf_r+0x18>
 800a0e0:	08009e71 	.word	0x08009e71

0800a0e4 <_free_r>:
 800a0e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0e6:	2900      	cmp	r1, #0
 800a0e8:	d044      	beq.n	800a174 <_free_r+0x90>
 800a0ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0ee:	9001      	str	r0, [sp, #4]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	f1a1 0404 	sub.w	r4, r1, #4
 800a0f6:	bfb8      	it	lt
 800a0f8:	18e4      	addlt	r4, r4, r3
 800a0fa:	f000 fde1 	bl	800acc0 <__malloc_lock>
 800a0fe:	4a1e      	ldr	r2, [pc, #120]	; (800a178 <_free_r+0x94>)
 800a100:	9801      	ldr	r0, [sp, #4]
 800a102:	6813      	ldr	r3, [r2, #0]
 800a104:	b933      	cbnz	r3, 800a114 <_free_r+0x30>
 800a106:	6063      	str	r3, [r4, #4]
 800a108:	6014      	str	r4, [r2, #0]
 800a10a:	b003      	add	sp, #12
 800a10c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a110:	f000 bddc 	b.w	800accc <__malloc_unlock>
 800a114:	42a3      	cmp	r3, r4
 800a116:	d908      	bls.n	800a12a <_free_r+0x46>
 800a118:	6825      	ldr	r5, [r4, #0]
 800a11a:	1961      	adds	r1, r4, r5
 800a11c:	428b      	cmp	r3, r1
 800a11e:	bf01      	itttt	eq
 800a120:	6819      	ldreq	r1, [r3, #0]
 800a122:	685b      	ldreq	r3, [r3, #4]
 800a124:	1949      	addeq	r1, r1, r5
 800a126:	6021      	streq	r1, [r4, #0]
 800a128:	e7ed      	b.n	800a106 <_free_r+0x22>
 800a12a:	461a      	mov	r2, r3
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	b10b      	cbz	r3, 800a134 <_free_r+0x50>
 800a130:	42a3      	cmp	r3, r4
 800a132:	d9fa      	bls.n	800a12a <_free_r+0x46>
 800a134:	6811      	ldr	r1, [r2, #0]
 800a136:	1855      	adds	r5, r2, r1
 800a138:	42a5      	cmp	r5, r4
 800a13a:	d10b      	bne.n	800a154 <_free_r+0x70>
 800a13c:	6824      	ldr	r4, [r4, #0]
 800a13e:	4421      	add	r1, r4
 800a140:	1854      	adds	r4, r2, r1
 800a142:	42a3      	cmp	r3, r4
 800a144:	6011      	str	r1, [r2, #0]
 800a146:	d1e0      	bne.n	800a10a <_free_r+0x26>
 800a148:	681c      	ldr	r4, [r3, #0]
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	6053      	str	r3, [r2, #4]
 800a14e:	4421      	add	r1, r4
 800a150:	6011      	str	r1, [r2, #0]
 800a152:	e7da      	b.n	800a10a <_free_r+0x26>
 800a154:	d902      	bls.n	800a15c <_free_r+0x78>
 800a156:	230c      	movs	r3, #12
 800a158:	6003      	str	r3, [r0, #0]
 800a15a:	e7d6      	b.n	800a10a <_free_r+0x26>
 800a15c:	6825      	ldr	r5, [r4, #0]
 800a15e:	1961      	adds	r1, r4, r5
 800a160:	428b      	cmp	r3, r1
 800a162:	bf04      	itt	eq
 800a164:	6819      	ldreq	r1, [r3, #0]
 800a166:	685b      	ldreq	r3, [r3, #4]
 800a168:	6063      	str	r3, [r4, #4]
 800a16a:	bf04      	itt	eq
 800a16c:	1949      	addeq	r1, r1, r5
 800a16e:	6021      	streq	r1, [r4, #0]
 800a170:	6054      	str	r4, [r2, #4]
 800a172:	e7ca      	b.n	800a10a <_free_r+0x26>
 800a174:	b003      	add	sp, #12
 800a176:	bd30      	pop	{r4, r5, pc}
 800a178:	240004e4 	.word	0x240004e4

0800a17c <sbrk_aligned>:
 800a17c:	b570      	push	{r4, r5, r6, lr}
 800a17e:	4e0e      	ldr	r6, [pc, #56]	; (800a1b8 <sbrk_aligned+0x3c>)
 800a180:	460c      	mov	r4, r1
 800a182:	6831      	ldr	r1, [r6, #0]
 800a184:	4605      	mov	r5, r0
 800a186:	b911      	cbnz	r1, 800a18e <sbrk_aligned+0x12>
 800a188:	f000 fcd6 	bl	800ab38 <_sbrk_r>
 800a18c:	6030      	str	r0, [r6, #0]
 800a18e:	4621      	mov	r1, r4
 800a190:	4628      	mov	r0, r5
 800a192:	f000 fcd1 	bl	800ab38 <_sbrk_r>
 800a196:	1c43      	adds	r3, r0, #1
 800a198:	d00a      	beq.n	800a1b0 <sbrk_aligned+0x34>
 800a19a:	1cc4      	adds	r4, r0, #3
 800a19c:	f024 0403 	bic.w	r4, r4, #3
 800a1a0:	42a0      	cmp	r0, r4
 800a1a2:	d007      	beq.n	800a1b4 <sbrk_aligned+0x38>
 800a1a4:	1a21      	subs	r1, r4, r0
 800a1a6:	4628      	mov	r0, r5
 800a1a8:	f000 fcc6 	bl	800ab38 <_sbrk_r>
 800a1ac:	3001      	adds	r0, #1
 800a1ae:	d101      	bne.n	800a1b4 <sbrk_aligned+0x38>
 800a1b0:	f04f 34ff 	mov.w	r4, #4294967295
 800a1b4:	4620      	mov	r0, r4
 800a1b6:	bd70      	pop	{r4, r5, r6, pc}
 800a1b8:	240004e8 	.word	0x240004e8

0800a1bc <_malloc_r>:
 800a1bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1c0:	1ccd      	adds	r5, r1, #3
 800a1c2:	f025 0503 	bic.w	r5, r5, #3
 800a1c6:	3508      	adds	r5, #8
 800a1c8:	2d0c      	cmp	r5, #12
 800a1ca:	bf38      	it	cc
 800a1cc:	250c      	movcc	r5, #12
 800a1ce:	2d00      	cmp	r5, #0
 800a1d0:	4607      	mov	r7, r0
 800a1d2:	db01      	blt.n	800a1d8 <_malloc_r+0x1c>
 800a1d4:	42a9      	cmp	r1, r5
 800a1d6:	d905      	bls.n	800a1e4 <_malloc_r+0x28>
 800a1d8:	230c      	movs	r3, #12
 800a1da:	603b      	str	r3, [r7, #0]
 800a1dc:	2600      	movs	r6, #0
 800a1de:	4630      	mov	r0, r6
 800a1e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1e4:	4e2e      	ldr	r6, [pc, #184]	; (800a2a0 <_malloc_r+0xe4>)
 800a1e6:	f000 fd6b 	bl	800acc0 <__malloc_lock>
 800a1ea:	6833      	ldr	r3, [r6, #0]
 800a1ec:	461c      	mov	r4, r3
 800a1ee:	bb34      	cbnz	r4, 800a23e <_malloc_r+0x82>
 800a1f0:	4629      	mov	r1, r5
 800a1f2:	4638      	mov	r0, r7
 800a1f4:	f7ff ffc2 	bl	800a17c <sbrk_aligned>
 800a1f8:	1c43      	adds	r3, r0, #1
 800a1fa:	4604      	mov	r4, r0
 800a1fc:	d14d      	bne.n	800a29a <_malloc_r+0xde>
 800a1fe:	6834      	ldr	r4, [r6, #0]
 800a200:	4626      	mov	r6, r4
 800a202:	2e00      	cmp	r6, #0
 800a204:	d140      	bne.n	800a288 <_malloc_r+0xcc>
 800a206:	6823      	ldr	r3, [r4, #0]
 800a208:	4631      	mov	r1, r6
 800a20a:	4638      	mov	r0, r7
 800a20c:	eb04 0803 	add.w	r8, r4, r3
 800a210:	f000 fc92 	bl	800ab38 <_sbrk_r>
 800a214:	4580      	cmp	r8, r0
 800a216:	d13a      	bne.n	800a28e <_malloc_r+0xd2>
 800a218:	6821      	ldr	r1, [r4, #0]
 800a21a:	3503      	adds	r5, #3
 800a21c:	1a6d      	subs	r5, r5, r1
 800a21e:	f025 0503 	bic.w	r5, r5, #3
 800a222:	3508      	adds	r5, #8
 800a224:	2d0c      	cmp	r5, #12
 800a226:	bf38      	it	cc
 800a228:	250c      	movcc	r5, #12
 800a22a:	4629      	mov	r1, r5
 800a22c:	4638      	mov	r0, r7
 800a22e:	f7ff ffa5 	bl	800a17c <sbrk_aligned>
 800a232:	3001      	adds	r0, #1
 800a234:	d02b      	beq.n	800a28e <_malloc_r+0xd2>
 800a236:	6823      	ldr	r3, [r4, #0]
 800a238:	442b      	add	r3, r5
 800a23a:	6023      	str	r3, [r4, #0]
 800a23c:	e00e      	b.n	800a25c <_malloc_r+0xa0>
 800a23e:	6822      	ldr	r2, [r4, #0]
 800a240:	1b52      	subs	r2, r2, r5
 800a242:	d41e      	bmi.n	800a282 <_malloc_r+0xc6>
 800a244:	2a0b      	cmp	r2, #11
 800a246:	d916      	bls.n	800a276 <_malloc_r+0xba>
 800a248:	1961      	adds	r1, r4, r5
 800a24a:	42a3      	cmp	r3, r4
 800a24c:	6025      	str	r5, [r4, #0]
 800a24e:	bf18      	it	ne
 800a250:	6059      	strne	r1, [r3, #4]
 800a252:	6863      	ldr	r3, [r4, #4]
 800a254:	bf08      	it	eq
 800a256:	6031      	streq	r1, [r6, #0]
 800a258:	5162      	str	r2, [r4, r5]
 800a25a:	604b      	str	r3, [r1, #4]
 800a25c:	4638      	mov	r0, r7
 800a25e:	f104 060b 	add.w	r6, r4, #11
 800a262:	f000 fd33 	bl	800accc <__malloc_unlock>
 800a266:	f026 0607 	bic.w	r6, r6, #7
 800a26a:	1d23      	adds	r3, r4, #4
 800a26c:	1af2      	subs	r2, r6, r3
 800a26e:	d0b6      	beq.n	800a1de <_malloc_r+0x22>
 800a270:	1b9b      	subs	r3, r3, r6
 800a272:	50a3      	str	r3, [r4, r2]
 800a274:	e7b3      	b.n	800a1de <_malloc_r+0x22>
 800a276:	6862      	ldr	r2, [r4, #4]
 800a278:	42a3      	cmp	r3, r4
 800a27a:	bf0c      	ite	eq
 800a27c:	6032      	streq	r2, [r6, #0]
 800a27e:	605a      	strne	r2, [r3, #4]
 800a280:	e7ec      	b.n	800a25c <_malloc_r+0xa0>
 800a282:	4623      	mov	r3, r4
 800a284:	6864      	ldr	r4, [r4, #4]
 800a286:	e7b2      	b.n	800a1ee <_malloc_r+0x32>
 800a288:	4634      	mov	r4, r6
 800a28a:	6876      	ldr	r6, [r6, #4]
 800a28c:	e7b9      	b.n	800a202 <_malloc_r+0x46>
 800a28e:	230c      	movs	r3, #12
 800a290:	603b      	str	r3, [r7, #0]
 800a292:	4638      	mov	r0, r7
 800a294:	f000 fd1a 	bl	800accc <__malloc_unlock>
 800a298:	e7a1      	b.n	800a1de <_malloc_r+0x22>
 800a29a:	6025      	str	r5, [r4, #0]
 800a29c:	e7de      	b.n	800a25c <_malloc_r+0xa0>
 800a29e:	bf00      	nop
 800a2a0:	240004e4 	.word	0x240004e4

0800a2a4 <__ssputs_r>:
 800a2a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2a8:	688e      	ldr	r6, [r1, #8]
 800a2aa:	429e      	cmp	r6, r3
 800a2ac:	4682      	mov	sl, r0
 800a2ae:	460c      	mov	r4, r1
 800a2b0:	4690      	mov	r8, r2
 800a2b2:	461f      	mov	r7, r3
 800a2b4:	d838      	bhi.n	800a328 <__ssputs_r+0x84>
 800a2b6:	898a      	ldrh	r2, [r1, #12]
 800a2b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a2bc:	d032      	beq.n	800a324 <__ssputs_r+0x80>
 800a2be:	6825      	ldr	r5, [r4, #0]
 800a2c0:	6909      	ldr	r1, [r1, #16]
 800a2c2:	eba5 0901 	sub.w	r9, r5, r1
 800a2c6:	6965      	ldr	r5, [r4, #20]
 800a2c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a2cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a2d0:	3301      	adds	r3, #1
 800a2d2:	444b      	add	r3, r9
 800a2d4:	106d      	asrs	r5, r5, #1
 800a2d6:	429d      	cmp	r5, r3
 800a2d8:	bf38      	it	cc
 800a2da:	461d      	movcc	r5, r3
 800a2dc:	0553      	lsls	r3, r2, #21
 800a2de:	d531      	bpl.n	800a344 <__ssputs_r+0xa0>
 800a2e0:	4629      	mov	r1, r5
 800a2e2:	f7ff ff6b 	bl	800a1bc <_malloc_r>
 800a2e6:	4606      	mov	r6, r0
 800a2e8:	b950      	cbnz	r0, 800a300 <__ssputs_r+0x5c>
 800a2ea:	230c      	movs	r3, #12
 800a2ec:	f8ca 3000 	str.w	r3, [sl]
 800a2f0:	89a3      	ldrh	r3, [r4, #12]
 800a2f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2f6:	81a3      	strh	r3, [r4, #12]
 800a2f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a300:	6921      	ldr	r1, [r4, #16]
 800a302:	464a      	mov	r2, r9
 800a304:	f7ff fb16 	bl	8009934 <memcpy>
 800a308:	89a3      	ldrh	r3, [r4, #12]
 800a30a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a30e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a312:	81a3      	strh	r3, [r4, #12]
 800a314:	6126      	str	r6, [r4, #16]
 800a316:	6165      	str	r5, [r4, #20]
 800a318:	444e      	add	r6, r9
 800a31a:	eba5 0509 	sub.w	r5, r5, r9
 800a31e:	6026      	str	r6, [r4, #0]
 800a320:	60a5      	str	r5, [r4, #8]
 800a322:	463e      	mov	r6, r7
 800a324:	42be      	cmp	r6, r7
 800a326:	d900      	bls.n	800a32a <__ssputs_r+0x86>
 800a328:	463e      	mov	r6, r7
 800a32a:	6820      	ldr	r0, [r4, #0]
 800a32c:	4632      	mov	r2, r6
 800a32e:	4641      	mov	r1, r8
 800a330:	f000 fcac 	bl	800ac8c <memmove>
 800a334:	68a3      	ldr	r3, [r4, #8]
 800a336:	1b9b      	subs	r3, r3, r6
 800a338:	60a3      	str	r3, [r4, #8]
 800a33a:	6823      	ldr	r3, [r4, #0]
 800a33c:	4433      	add	r3, r6
 800a33e:	6023      	str	r3, [r4, #0]
 800a340:	2000      	movs	r0, #0
 800a342:	e7db      	b.n	800a2fc <__ssputs_r+0x58>
 800a344:	462a      	mov	r2, r5
 800a346:	f000 fcc7 	bl	800acd8 <_realloc_r>
 800a34a:	4606      	mov	r6, r0
 800a34c:	2800      	cmp	r0, #0
 800a34e:	d1e1      	bne.n	800a314 <__ssputs_r+0x70>
 800a350:	6921      	ldr	r1, [r4, #16]
 800a352:	4650      	mov	r0, sl
 800a354:	f7ff fec6 	bl	800a0e4 <_free_r>
 800a358:	e7c7      	b.n	800a2ea <__ssputs_r+0x46>
	...

0800a35c <_svfiprintf_r>:
 800a35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a360:	4698      	mov	r8, r3
 800a362:	898b      	ldrh	r3, [r1, #12]
 800a364:	061b      	lsls	r3, r3, #24
 800a366:	b09d      	sub	sp, #116	; 0x74
 800a368:	4607      	mov	r7, r0
 800a36a:	460d      	mov	r5, r1
 800a36c:	4614      	mov	r4, r2
 800a36e:	d50e      	bpl.n	800a38e <_svfiprintf_r+0x32>
 800a370:	690b      	ldr	r3, [r1, #16]
 800a372:	b963      	cbnz	r3, 800a38e <_svfiprintf_r+0x32>
 800a374:	2140      	movs	r1, #64	; 0x40
 800a376:	f7ff ff21 	bl	800a1bc <_malloc_r>
 800a37a:	6028      	str	r0, [r5, #0]
 800a37c:	6128      	str	r0, [r5, #16]
 800a37e:	b920      	cbnz	r0, 800a38a <_svfiprintf_r+0x2e>
 800a380:	230c      	movs	r3, #12
 800a382:	603b      	str	r3, [r7, #0]
 800a384:	f04f 30ff 	mov.w	r0, #4294967295
 800a388:	e0d1      	b.n	800a52e <_svfiprintf_r+0x1d2>
 800a38a:	2340      	movs	r3, #64	; 0x40
 800a38c:	616b      	str	r3, [r5, #20]
 800a38e:	2300      	movs	r3, #0
 800a390:	9309      	str	r3, [sp, #36]	; 0x24
 800a392:	2320      	movs	r3, #32
 800a394:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a398:	f8cd 800c 	str.w	r8, [sp, #12]
 800a39c:	2330      	movs	r3, #48	; 0x30
 800a39e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a548 <_svfiprintf_r+0x1ec>
 800a3a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3a6:	f04f 0901 	mov.w	r9, #1
 800a3aa:	4623      	mov	r3, r4
 800a3ac:	469a      	mov	sl, r3
 800a3ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3b2:	b10a      	cbz	r2, 800a3b8 <_svfiprintf_r+0x5c>
 800a3b4:	2a25      	cmp	r2, #37	; 0x25
 800a3b6:	d1f9      	bne.n	800a3ac <_svfiprintf_r+0x50>
 800a3b8:	ebba 0b04 	subs.w	fp, sl, r4
 800a3bc:	d00b      	beq.n	800a3d6 <_svfiprintf_r+0x7a>
 800a3be:	465b      	mov	r3, fp
 800a3c0:	4622      	mov	r2, r4
 800a3c2:	4629      	mov	r1, r5
 800a3c4:	4638      	mov	r0, r7
 800a3c6:	f7ff ff6d 	bl	800a2a4 <__ssputs_r>
 800a3ca:	3001      	adds	r0, #1
 800a3cc:	f000 80aa 	beq.w	800a524 <_svfiprintf_r+0x1c8>
 800a3d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3d2:	445a      	add	r2, fp
 800a3d4:	9209      	str	r2, [sp, #36]	; 0x24
 800a3d6:	f89a 3000 	ldrb.w	r3, [sl]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	f000 80a2 	beq.w	800a524 <_svfiprintf_r+0x1c8>
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a3e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3ea:	f10a 0a01 	add.w	sl, sl, #1
 800a3ee:	9304      	str	r3, [sp, #16]
 800a3f0:	9307      	str	r3, [sp, #28]
 800a3f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a3f6:	931a      	str	r3, [sp, #104]	; 0x68
 800a3f8:	4654      	mov	r4, sl
 800a3fa:	2205      	movs	r2, #5
 800a3fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a400:	4851      	ldr	r0, [pc, #324]	; (800a548 <_svfiprintf_r+0x1ec>)
 800a402:	f7f5 ff75 	bl	80002f0 <memchr>
 800a406:	9a04      	ldr	r2, [sp, #16]
 800a408:	b9d8      	cbnz	r0, 800a442 <_svfiprintf_r+0xe6>
 800a40a:	06d0      	lsls	r0, r2, #27
 800a40c:	bf44      	itt	mi
 800a40e:	2320      	movmi	r3, #32
 800a410:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a414:	0711      	lsls	r1, r2, #28
 800a416:	bf44      	itt	mi
 800a418:	232b      	movmi	r3, #43	; 0x2b
 800a41a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a41e:	f89a 3000 	ldrb.w	r3, [sl]
 800a422:	2b2a      	cmp	r3, #42	; 0x2a
 800a424:	d015      	beq.n	800a452 <_svfiprintf_r+0xf6>
 800a426:	9a07      	ldr	r2, [sp, #28]
 800a428:	4654      	mov	r4, sl
 800a42a:	2000      	movs	r0, #0
 800a42c:	f04f 0c0a 	mov.w	ip, #10
 800a430:	4621      	mov	r1, r4
 800a432:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a436:	3b30      	subs	r3, #48	; 0x30
 800a438:	2b09      	cmp	r3, #9
 800a43a:	d94e      	bls.n	800a4da <_svfiprintf_r+0x17e>
 800a43c:	b1b0      	cbz	r0, 800a46c <_svfiprintf_r+0x110>
 800a43e:	9207      	str	r2, [sp, #28]
 800a440:	e014      	b.n	800a46c <_svfiprintf_r+0x110>
 800a442:	eba0 0308 	sub.w	r3, r0, r8
 800a446:	fa09 f303 	lsl.w	r3, r9, r3
 800a44a:	4313      	orrs	r3, r2
 800a44c:	9304      	str	r3, [sp, #16]
 800a44e:	46a2      	mov	sl, r4
 800a450:	e7d2      	b.n	800a3f8 <_svfiprintf_r+0x9c>
 800a452:	9b03      	ldr	r3, [sp, #12]
 800a454:	1d19      	adds	r1, r3, #4
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	9103      	str	r1, [sp, #12]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	bfbb      	ittet	lt
 800a45e:	425b      	neglt	r3, r3
 800a460:	f042 0202 	orrlt.w	r2, r2, #2
 800a464:	9307      	strge	r3, [sp, #28]
 800a466:	9307      	strlt	r3, [sp, #28]
 800a468:	bfb8      	it	lt
 800a46a:	9204      	strlt	r2, [sp, #16]
 800a46c:	7823      	ldrb	r3, [r4, #0]
 800a46e:	2b2e      	cmp	r3, #46	; 0x2e
 800a470:	d10c      	bne.n	800a48c <_svfiprintf_r+0x130>
 800a472:	7863      	ldrb	r3, [r4, #1]
 800a474:	2b2a      	cmp	r3, #42	; 0x2a
 800a476:	d135      	bne.n	800a4e4 <_svfiprintf_r+0x188>
 800a478:	9b03      	ldr	r3, [sp, #12]
 800a47a:	1d1a      	adds	r2, r3, #4
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	9203      	str	r2, [sp, #12]
 800a480:	2b00      	cmp	r3, #0
 800a482:	bfb8      	it	lt
 800a484:	f04f 33ff 	movlt.w	r3, #4294967295
 800a488:	3402      	adds	r4, #2
 800a48a:	9305      	str	r3, [sp, #20]
 800a48c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a558 <_svfiprintf_r+0x1fc>
 800a490:	7821      	ldrb	r1, [r4, #0]
 800a492:	2203      	movs	r2, #3
 800a494:	4650      	mov	r0, sl
 800a496:	f7f5 ff2b 	bl	80002f0 <memchr>
 800a49a:	b140      	cbz	r0, 800a4ae <_svfiprintf_r+0x152>
 800a49c:	2340      	movs	r3, #64	; 0x40
 800a49e:	eba0 000a 	sub.w	r0, r0, sl
 800a4a2:	fa03 f000 	lsl.w	r0, r3, r0
 800a4a6:	9b04      	ldr	r3, [sp, #16]
 800a4a8:	4303      	orrs	r3, r0
 800a4aa:	3401      	adds	r4, #1
 800a4ac:	9304      	str	r3, [sp, #16]
 800a4ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4b2:	4826      	ldr	r0, [pc, #152]	; (800a54c <_svfiprintf_r+0x1f0>)
 800a4b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4b8:	2206      	movs	r2, #6
 800a4ba:	f7f5 ff19 	bl	80002f0 <memchr>
 800a4be:	2800      	cmp	r0, #0
 800a4c0:	d038      	beq.n	800a534 <_svfiprintf_r+0x1d8>
 800a4c2:	4b23      	ldr	r3, [pc, #140]	; (800a550 <_svfiprintf_r+0x1f4>)
 800a4c4:	bb1b      	cbnz	r3, 800a50e <_svfiprintf_r+0x1b2>
 800a4c6:	9b03      	ldr	r3, [sp, #12]
 800a4c8:	3307      	adds	r3, #7
 800a4ca:	f023 0307 	bic.w	r3, r3, #7
 800a4ce:	3308      	adds	r3, #8
 800a4d0:	9303      	str	r3, [sp, #12]
 800a4d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4d4:	4433      	add	r3, r6
 800a4d6:	9309      	str	r3, [sp, #36]	; 0x24
 800a4d8:	e767      	b.n	800a3aa <_svfiprintf_r+0x4e>
 800a4da:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4de:	460c      	mov	r4, r1
 800a4e0:	2001      	movs	r0, #1
 800a4e2:	e7a5      	b.n	800a430 <_svfiprintf_r+0xd4>
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	3401      	adds	r4, #1
 800a4e8:	9305      	str	r3, [sp, #20]
 800a4ea:	4619      	mov	r1, r3
 800a4ec:	f04f 0c0a 	mov.w	ip, #10
 800a4f0:	4620      	mov	r0, r4
 800a4f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4f6:	3a30      	subs	r2, #48	; 0x30
 800a4f8:	2a09      	cmp	r2, #9
 800a4fa:	d903      	bls.n	800a504 <_svfiprintf_r+0x1a8>
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d0c5      	beq.n	800a48c <_svfiprintf_r+0x130>
 800a500:	9105      	str	r1, [sp, #20]
 800a502:	e7c3      	b.n	800a48c <_svfiprintf_r+0x130>
 800a504:	fb0c 2101 	mla	r1, ip, r1, r2
 800a508:	4604      	mov	r4, r0
 800a50a:	2301      	movs	r3, #1
 800a50c:	e7f0      	b.n	800a4f0 <_svfiprintf_r+0x194>
 800a50e:	ab03      	add	r3, sp, #12
 800a510:	9300      	str	r3, [sp, #0]
 800a512:	462a      	mov	r2, r5
 800a514:	4b0f      	ldr	r3, [pc, #60]	; (800a554 <_svfiprintf_r+0x1f8>)
 800a516:	a904      	add	r1, sp, #16
 800a518:	4638      	mov	r0, r7
 800a51a:	f3af 8000 	nop.w
 800a51e:	1c42      	adds	r2, r0, #1
 800a520:	4606      	mov	r6, r0
 800a522:	d1d6      	bne.n	800a4d2 <_svfiprintf_r+0x176>
 800a524:	89ab      	ldrh	r3, [r5, #12]
 800a526:	065b      	lsls	r3, r3, #25
 800a528:	f53f af2c 	bmi.w	800a384 <_svfiprintf_r+0x28>
 800a52c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a52e:	b01d      	add	sp, #116	; 0x74
 800a530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a534:	ab03      	add	r3, sp, #12
 800a536:	9300      	str	r3, [sp, #0]
 800a538:	462a      	mov	r2, r5
 800a53a:	4b06      	ldr	r3, [pc, #24]	; (800a554 <_svfiprintf_r+0x1f8>)
 800a53c:	a904      	add	r1, sp, #16
 800a53e:	4638      	mov	r0, r7
 800a540:	f000 f9d4 	bl	800a8ec <_printf_i>
 800a544:	e7eb      	b.n	800a51e <_svfiprintf_r+0x1c2>
 800a546:	bf00      	nop
 800a548:	0800b4fc 	.word	0x0800b4fc
 800a54c:	0800b506 	.word	0x0800b506
 800a550:	00000000 	.word	0x00000000
 800a554:	0800a2a5 	.word	0x0800a2a5
 800a558:	0800b502 	.word	0x0800b502

0800a55c <__sfputc_r>:
 800a55c:	6893      	ldr	r3, [r2, #8]
 800a55e:	3b01      	subs	r3, #1
 800a560:	2b00      	cmp	r3, #0
 800a562:	b410      	push	{r4}
 800a564:	6093      	str	r3, [r2, #8]
 800a566:	da08      	bge.n	800a57a <__sfputc_r+0x1e>
 800a568:	6994      	ldr	r4, [r2, #24]
 800a56a:	42a3      	cmp	r3, r4
 800a56c:	db01      	blt.n	800a572 <__sfputc_r+0x16>
 800a56e:	290a      	cmp	r1, #10
 800a570:	d103      	bne.n	800a57a <__sfputc_r+0x1e>
 800a572:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a576:	f7ff bad5 	b.w	8009b24 <__swbuf_r>
 800a57a:	6813      	ldr	r3, [r2, #0]
 800a57c:	1c58      	adds	r0, r3, #1
 800a57e:	6010      	str	r0, [r2, #0]
 800a580:	7019      	strb	r1, [r3, #0]
 800a582:	4608      	mov	r0, r1
 800a584:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a588:	4770      	bx	lr

0800a58a <__sfputs_r>:
 800a58a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a58c:	4606      	mov	r6, r0
 800a58e:	460f      	mov	r7, r1
 800a590:	4614      	mov	r4, r2
 800a592:	18d5      	adds	r5, r2, r3
 800a594:	42ac      	cmp	r4, r5
 800a596:	d101      	bne.n	800a59c <__sfputs_r+0x12>
 800a598:	2000      	movs	r0, #0
 800a59a:	e007      	b.n	800a5ac <__sfputs_r+0x22>
 800a59c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5a0:	463a      	mov	r2, r7
 800a5a2:	4630      	mov	r0, r6
 800a5a4:	f7ff ffda 	bl	800a55c <__sfputc_r>
 800a5a8:	1c43      	adds	r3, r0, #1
 800a5aa:	d1f3      	bne.n	800a594 <__sfputs_r+0xa>
 800a5ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a5b0 <_vfiprintf_r>:
 800a5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5b4:	460d      	mov	r5, r1
 800a5b6:	b09d      	sub	sp, #116	; 0x74
 800a5b8:	4614      	mov	r4, r2
 800a5ba:	4698      	mov	r8, r3
 800a5bc:	4606      	mov	r6, r0
 800a5be:	b118      	cbz	r0, 800a5c8 <_vfiprintf_r+0x18>
 800a5c0:	6983      	ldr	r3, [r0, #24]
 800a5c2:	b90b      	cbnz	r3, 800a5c8 <_vfiprintf_r+0x18>
 800a5c4:	f7ff fc88 	bl	8009ed8 <__sinit>
 800a5c8:	4b89      	ldr	r3, [pc, #548]	; (800a7f0 <_vfiprintf_r+0x240>)
 800a5ca:	429d      	cmp	r5, r3
 800a5cc:	d11b      	bne.n	800a606 <_vfiprintf_r+0x56>
 800a5ce:	6875      	ldr	r5, [r6, #4]
 800a5d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5d2:	07d9      	lsls	r1, r3, #31
 800a5d4:	d405      	bmi.n	800a5e2 <_vfiprintf_r+0x32>
 800a5d6:	89ab      	ldrh	r3, [r5, #12]
 800a5d8:	059a      	lsls	r2, r3, #22
 800a5da:	d402      	bmi.n	800a5e2 <_vfiprintf_r+0x32>
 800a5dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5de:	f7ff fd19 	bl	800a014 <__retarget_lock_acquire_recursive>
 800a5e2:	89ab      	ldrh	r3, [r5, #12]
 800a5e4:	071b      	lsls	r3, r3, #28
 800a5e6:	d501      	bpl.n	800a5ec <_vfiprintf_r+0x3c>
 800a5e8:	692b      	ldr	r3, [r5, #16]
 800a5ea:	b9eb      	cbnz	r3, 800a628 <_vfiprintf_r+0x78>
 800a5ec:	4629      	mov	r1, r5
 800a5ee:	4630      	mov	r0, r6
 800a5f0:	f7ff faea 	bl	8009bc8 <__swsetup_r>
 800a5f4:	b1c0      	cbz	r0, 800a628 <_vfiprintf_r+0x78>
 800a5f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5f8:	07dc      	lsls	r4, r3, #31
 800a5fa:	d50e      	bpl.n	800a61a <_vfiprintf_r+0x6a>
 800a5fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a600:	b01d      	add	sp, #116	; 0x74
 800a602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a606:	4b7b      	ldr	r3, [pc, #492]	; (800a7f4 <_vfiprintf_r+0x244>)
 800a608:	429d      	cmp	r5, r3
 800a60a:	d101      	bne.n	800a610 <_vfiprintf_r+0x60>
 800a60c:	68b5      	ldr	r5, [r6, #8]
 800a60e:	e7df      	b.n	800a5d0 <_vfiprintf_r+0x20>
 800a610:	4b79      	ldr	r3, [pc, #484]	; (800a7f8 <_vfiprintf_r+0x248>)
 800a612:	429d      	cmp	r5, r3
 800a614:	bf08      	it	eq
 800a616:	68f5      	ldreq	r5, [r6, #12]
 800a618:	e7da      	b.n	800a5d0 <_vfiprintf_r+0x20>
 800a61a:	89ab      	ldrh	r3, [r5, #12]
 800a61c:	0598      	lsls	r0, r3, #22
 800a61e:	d4ed      	bmi.n	800a5fc <_vfiprintf_r+0x4c>
 800a620:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a622:	f7ff fcf8 	bl	800a016 <__retarget_lock_release_recursive>
 800a626:	e7e9      	b.n	800a5fc <_vfiprintf_r+0x4c>
 800a628:	2300      	movs	r3, #0
 800a62a:	9309      	str	r3, [sp, #36]	; 0x24
 800a62c:	2320      	movs	r3, #32
 800a62e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a632:	f8cd 800c 	str.w	r8, [sp, #12]
 800a636:	2330      	movs	r3, #48	; 0x30
 800a638:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a7fc <_vfiprintf_r+0x24c>
 800a63c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a640:	f04f 0901 	mov.w	r9, #1
 800a644:	4623      	mov	r3, r4
 800a646:	469a      	mov	sl, r3
 800a648:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a64c:	b10a      	cbz	r2, 800a652 <_vfiprintf_r+0xa2>
 800a64e:	2a25      	cmp	r2, #37	; 0x25
 800a650:	d1f9      	bne.n	800a646 <_vfiprintf_r+0x96>
 800a652:	ebba 0b04 	subs.w	fp, sl, r4
 800a656:	d00b      	beq.n	800a670 <_vfiprintf_r+0xc0>
 800a658:	465b      	mov	r3, fp
 800a65a:	4622      	mov	r2, r4
 800a65c:	4629      	mov	r1, r5
 800a65e:	4630      	mov	r0, r6
 800a660:	f7ff ff93 	bl	800a58a <__sfputs_r>
 800a664:	3001      	adds	r0, #1
 800a666:	f000 80aa 	beq.w	800a7be <_vfiprintf_r+0x20e>
 800a66a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a66c:	445a      	add	r2, fp
 800a66e:	9209      	str	r2, [sp, #36]	; 0x24
 800a670:	f89a 3000 	ldrb.w	r3, [sl]
 800a674:	2b00      	cmp	r3, #0
 800a676:	f000 80a2 	beq.w	800a7be <_vfiprintf_r+0x20e>
 800a67a:	2300      	movs	r3, #0
 800a67c:	f04f 32ff 	mov.w	r2, #4294967295
 800a680:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a684:	f10a 0a01 	add.w	sl, sl, #1
 800a688:	9304      	str	r3, [sp, #16]
 800a68a:	9307      	str	r3, [sp, #28]
 800a68c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a690:	931a      	str	r3, [sp, #104]	; 0x68
 800a692:	4654      	mov	r4, sl
 800a694:	2205      	movs	r2, #5
 800a696:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a69a:	4858      	ldr	r0, [pc, #352]	; (800a7fc <_vfiprintf_r+0x24c>)
 800a69c:	f7f5 fe28 	bl	80002f0 <memchr>
 800a6a0:	9a04      	ldr	r2, [sp, #16]
 800a6a2:	b9d8      	cbnz	r0, 800a6dc <_vfiprintf_r+0x12c>
 800a6a4:	06d1      	lsls	r1, r2, #27
 800a6a6:	bf44      	itt	mi
 800a6a8:	2320      	movmi	r3, #32
 800a6aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6ae:	0713      	lsls	r3, r2, #28
 800a6b0:	bf44      	itt	mi
 800a6b2:	232b      	movmi	r3, #43	; 0x2b
 800a6b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a6b8:	f89a 3000 	ldrb.w	r3, [sl]
 800a6bc:	2b2a      	cmp	r3, #42	; 0x2a
 800a6be:	d015      	beq.n	800a6ec <_vfiprintf_r+0x13c>
 800a6c0:	9a07      	ldr	r2, [sp, #28]
 800a6c2:	4654      	mov	r4, sl
 800a6c4:	2000      	movs	r0, #0
 800a6c6:	f04f 0c0a 	mov.w	ip, #10
 800a6ca:	4621      	mov	r1, r4
 800a6cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6d0:	3b30      	subs	r3, #48	; 0x30
 800a6d2:	2b09      	cmp	r3, #9
 800a6d4:	d94e      	bls.n	800a774 <_vfiprintf_r+0x1c4>
 800a6d6:	b1b0      	cbz	r0, 800a706 <_vfiprintf_r+0x156>
 800a6d8:	9207      	str	r2, [sp, #28]
 800a6da:	e014      	b.n	800a706 <_vfiprintf_r+0x156>
 800a6dc:	eba0 0308 	sub.w	r3, r0, r8
 800a6e0:	fa09 f303 	lsl.w	r3, r9, r3
 800a6e4:	4313      	orrs	r3, r2
 800a6e6:	9304      	str	r3, [sp, #16]
 800a6e8:	46a2      	mov	sl, r4
 800a6ea:	e7d2      	b.n	800a692 <_vfiprintf_r+0xe2>
 800a6ec:	9b03      	ldr	r3, [sp, #12]
 800a6ee:	1d19      	adds	r1, r3, #4
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	9103      	str	r1, [sp, #12]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	bfbb      	ittet	lt
 800a6f8:	425b      	neglt	r3, r3
 800a6fa:	f042 0202 	orrlt.w	r2, r2, #2
 800a6fe:	9307      	strge	r3, [sp, #28]
 800a700:	9307      	strlt	r3, [sp, #28]
 800a702:	bfb8      	it	lt
 800a704:	9204      	strlt	r2, [sp, #16]
 800a706:	7823      	ldrb	r3, [r4, #0]
 800a708:	2b2e      	cmp	r3, #46	; 0x2e
 800a70a:	d10c      	bne.n	800a726 <_vfiprintf_r+0x176>
 800a70c:	7863      	ldrb	r3, [r4, #1]
 800a70e:	2b2a      	cmp	r3, #42	; 0x2a
 800a710:	d135      	bne.n	800a77e <_vfiprintf_r+0x1ce>
 800a712:	9b03      	ldr	r3, [sp, #12]
 800a714:	1d1a      	adds	r2, r3, #4
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	9203      	str	r2, [sp, #12]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	bfb8      	it	lt
 800a71e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a722:	3402      	adds	r4, #2
 800a724:	9305      	str	r3, [sp, #20]
 800a726:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a80c <_vfiprintf_r+0x25c>
 800a72a:	7821      	ldrb	r1, [r4, #0]
 800a72c:	2203      	movs	r2, #3
 800a72e:	4650      	mov	r0, sl
 800a730:	f7f5 fdde 	bl	80002f0 <memchr>
 800a734:	b140      	cbz	r0, 800a748 <_vfiprintf_r+0x198>
 800a736:	2340      	movs	r3, #64	; 0x40
 800a738:	eba0 000a 	sub.w	r0, r0, sl
 800a73c:	fa03 f000 	lsl.w	r0, r3, r0
 800a740:	9b04      	ldr	r3, [sp, #16]
 800a742:	4303      	orrs	r3, r0
 800a744:	3401      	adds	r4, #1
 800a746:	9304      	str	r3, [sp, #16]
 800a748:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a74c:	482c      	ldr	r0, [pc, #176]	; (800a800 <_vfiprintf_r+0x250>)
 800a74e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a752:	2206      	movs	r2, #6
 800a754:	f7f5 fdcc 	bl	80002f0 <memchr>
 800a758:	2800      	cmp	r0, #0
 800a75a:	d03f      	beq.n	800a7dc <_vfiprintf_r+0x22c>
 800a75c:	4b29      	ldr	r3, [pc, #164]	; (800a804 <_vfiprintf_r+0x254>)
 800a75e:	bb1b      	cbnz	r3, 800a7a8 <_vfiprintf_r+0x1f8>
 800a760:	9b03      	ldr	r3, [sp, #12]
 800a762:	3307      	adds	r3, #7
 800a764:	f023 0307 	bic.w	r3, r3, #7
 800a768:	3308      	adds	r3, #8
 800a76a:	9303      	str	r3, [sp, #12]
 800a76c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a76e:	443b      	add	r3, r7
 800a770:	9309      	str	r3, [sp, #36]	; 0x24
 800a772:	e767      	b.n	800a644 <_vfiprintf_r+0x94>
 800a774:	fb0c 3202 	mla	r2, ip, r2, r3
 800a778:	460c      	mov	r4, r1
 800a77a:	2001      	movs	r0, #1
 800a77c:	e7a5      	b.n	800a6ca <_vfiprintf_r+0x11a>
 800a77e:	2300      	movs	r3, #0
 800a780:	3401      	adds	r4, #1
 800a782:	9305      	str	r3, [sp, #20]
 800a784:	4619      	mov	r1, r3
 800a786:	f04f 0c0a 	mov.w	ip, #10
 800a78a:	4620      	mov	r0, r4
 800a78c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a790:	3a30      	subs	r2, #48	; 0x30
 800a792:	2a09      	cmp	r2, #9
 800a794:	d903      	bls.n	800a79e <_vfiprintf_r+0x1ee>
 800a796:	2b00      	cmp	r3, #0
 800a798:	d0c5      	beq.n	800a726 <_vfiprintf_r+0x176>
 800a79a:	9105      	str	r1, [sp, #20]
 800a79c:	e7c3      	b.n	800a726 <_vfiprintf_r+0x176>
 800a79e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a7a2:	4604      	mov	r4, r0
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	e7f0      	b.n	800a78a <_vfiprintf_r+0x1da>
 800a7a8:	ab03      	add	r3, sp, #12
 800a7aa:	9300      	str	r3, [sp, #0]
 800a7ac:	462a      	mov	r2, r5
 800a7ae:	4b16      	ldr	r3, [pc, #88]	; (800a808 <_vfiprintf_r+0x258>)
 800a7b0:	a904      	add	r1, sp, #16
 800a7b2:	4630      	mov	r0, r6
 800a7b4:	f3af 8000 	nop.w
 800a7b8:	4607      	mov	r7, r0
 800a7ba:	1c78      	adds	r0, r7, #1
 800a7bc:	d1d6      	bne.n	800a76c <_vfiprintf_r+0x1bc>
 800a7be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7c0:	07d9      	lsls	r1, r3, #31
 800a7c2:	d405      	bmi.n	800a7d0 <_vfiprintf_r+0x220>
 800a7c4:	89ab      	ldrh	r3, [r5, #12]
 800a7c6:	059a      	lsls	r2, r3, #22
 800a7c8:	d402      	bmi.n	800a7d0 <_vfiprintf_r+0x220>
 800a7ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7cc:	f7ff fc23 	bl	800a016 <__retarget_lock_release_recursive>
 800a7d0:	89ab      	ldrh	r3, [r5, #12]
 800a7d2:	065b      	lsls	r3, r3, #25
 800a7d4:	f53f af12 	bmi.w	800a5fc <_vfiprintf_r+0x4c>
 800a7d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7da:	e711      	b.n	800a600 <_vfiprintf_r+0x50>
 800a7dc:	ab03      	add	r3, sp, #12
 800a7de:	9300      	str	r3, [sp, #0]
 800a7e0:	462a      	mov	r2, r5
 800a7e2:	4b09      	ldr	r3, [pc, #36]	; (800a808 <_vfiprintf_r+0x258>)
 800a7e4:	a904      	add	r1, sp, #16
 800a7e6:	4630      	mov	r0, r6
 800a7e8:	f000 f880 	bl	800a8ec <_printf_i>
 800a7ec:	e7e4      	b.n	800a7b8 <_vfiprintf_r+0x208>
 800a7ee:	bf00      	nop
 800a7f0:	0800b4bc 	.word	0x0800b4bc
 800a7f4:	0800b4dc 	.word	0x0800b4dc
 800a7f8:	0800b49c 	.word	0x0800b49c
 800a7fc:	0800b4fc 	.word	0x0800b4fc
 800a800:	0800b506 	.word	0x0800b506
 800a804:	00000000 	.word	0x00000000
 800a808:	0800a58b 	.word	0x0800a58b
 800a80c:	0800b502 	.word	0x0800b502

0800a810 <_printf_common>:
 800a810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a814:	4616      	mov	r6, r2
 800a816:	4699      	mov	r9, r3
 800a818:	688a      	ldr	r2, [r1, #8]
 800a81a:	690b      	ldr	r3, [r1, #16]
 800a81c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a820:	4293      	cmp	r3, r2
 800a822:	bfb8      	it	lt
 800a824:	4613      	movlt	r3, r2
 800a826:	6033      	str	r3, [r6, #0]
 800a828:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a82c:	4607      	mov	r7, r0
 800a82e:	460c      	mov	r4, r1
 800a830:	b10a      	cbz	r2, 800a836 <_printf_common+0x26>
 800a832:	3301      	adds	r3, #1
 800a834:	6033      	str	r3, [r6, #0]
 800a836:	6823      	ldr	r3, [r4, #0]
 800a838:	0699      	lsls	r1, r3, #26
 800a83a:	bf42      	ittt	mi
 800a83c:	6833      	ldrmi	r3, [r6, #0]
 800a83e:	3302      	addmi	r3, #2
 800a840:	6033      	strmi	r3, [r6, #0]
 800a842:	6825      	ldr	r5, [r4, #0]
 800a844:	f015 0506 	ands.w	r5, r5, #6
 800a848:	d106      	bne.n	800a858 <_printf_common+0x48>
 800a84a:	f104 0a19 	add.w	sl, r4, #25
 800a84e:	68e3      	ldr	r3, [r4, #12]
 800a850:	6832      	ldr	r2, [r6, #0]
 800a852:	1a9b      	subs	r3, r3, r2
 800a854:	42ab      	cmp	r3, r5
 800a856:	dc26      	bgt.n	800a8a6 <_printf_common+0x96>
 800a858:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a85c:	1e13      	subs	r3, r2, #0
 800a85e:	6822      	ldr	r2, [r4, #0]
 800a860:	bf18      	it	ne
 800a862:	2301      	movne	r3, #1
 800a864:	0692      	lsls	r2, r2, #26
 800a866:	d42b      	bmi.n	800a8c0 <_printf_common+0xb0>
 800a868:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a86c:	4649      	mov	r1, r9
 800a86e:	4638      	mov	r0, r7
 800a870:	47c0      	blx	r8
 800a872:	3001      	adds	r0, #1
 800a874:	d01e      	beq.n	800a8b4 <_printf_common+0xa4>
 800a876:	6823      	ldr	r3, [r4, #0]
 800a878:	68e5      	ldr	r5, [r4, #12]
 800a87a:	6832      	ldr	r2, [r6, #0]
 800a87c:	f003 0306 	and.w	r3, r3, #6
 800a880:	2b04      	cmp	r3, #4
 800a882:	bf08      	it	eq
 800a884:	1aad      	subeq	r5, r5, r2
 800a886:	68a3      	ldr	r3, [r4, #8]
 800a888:	6922      	ldr	r2, [r4, #16]
 800a88a:	bf0c      	ite	eq
 800a88c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a890:	2500      	movne	r5, #0
 800a892:	4293      	cmp	r3, r2
 800a894:	bfc4      	itt	gt
 800a896:	1a9b      	subgt	r3, r3, r2
 800a898:	18ed      	addgt	r5, r5, r3
 800a89a:	2600      	movs	r6, #0
 800a89c:	341a      	adds	r4, #26
 800a89e:	42b5      	cmp	r5, r6
 800a8a0:	d11a      	bne.n	800a8d8 <_printf_common+0xc8>
 800a8a2:	2000      	movs	r0, #0
 800a8a4:	e008      	b.n	800a8b8 <_printf_common+0xa8>
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	4652      	mov	r2, sl
 800a8aa:	4649      	mov	r1, r9
 800a8ac:	4638      	mov	r0, r7
 800a8ae:	47c0      	blx	r8
 800a8b0:	3001      	adds	r0, #1
 800a8b2:	d103      	bne.n	800a8bc <_printf_common+0xac>
 800a8b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a8b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8bc:	3501      	adds	r5, #1
 800a8be:	e7c6      	b.n	800a84e <_printf_common+0x3e>
 800a8c0:	18e1      	adds	r1, r4, r3
 800a8c2:	1c5a      	adds	r2, r3, #1
 800a8c4:	2030      	movs	r0, #48	; 0x30
 800a8c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a8ca:	4422      	add	r2, r4
 800a8cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a8d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a8d4:	3302      	adds	r3, #2
 800a8d6:	e7c7      	b.n	800a868 <_printf_common+0x58>
 800a8d8:	2301      	movs	r3, #1
 800a8da:	4622      	mov	r2, r4
 800a8dc:	4649      	mov	r1, r9
 800a8de:	4638      	mov	r0, r7
 800a8e0:	47c0      	blx	r8
 800a8e2:	3001      	adds	r0, #1
 800a8e4:	d0e6      	beq.n	800a8b4 <_printf_common+0xa4>
 800a8e6:	3601      	adds	r6, #1
 800a8e8:	e7d9      	b.n	800a89e <_printf_common+0x8e>
	...

0800a8ec <_printf_i>:
 800a8ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8f0:	7e0f      	ldrb	r7, [r1, #24]
 800a8f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a8f4:	2f78      	cmp	r7, #120	; 0x78
 800a8f6:	4691      	mov	r9, r2
 800a8f8:	4680      	mov	r8, r0
 800a8fa:	460c      	mov	r4, r1
 800a8fc:	469a      	mov	sl, r3
 800a8fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a902:	d807      	bhi.n	800a914 <_printf_i+0x28>
 800a904:	2f62      	cmp	r7, #98	; 0x62
 800a906:	d80a      	bhi.n	800a91e <_printf_i+0x32>
 800a908:	2f00      	cmp	r7, #0
 800a90a:	f000 80d8 	beq.w	800aabe <_printf_i+0x1d2>
 800a90e:	2f58      	cmp	r7, #88	; 0x58
 800a910:	f000 80a3 	beq.w	800aa5a <_printf_i+0x16e>
 800a914:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a918:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a91c:	e03a      	b.n	800a994 <_printf_i+0xa8>
 800a91e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a922:	2b15      	cmp	r3, #21
 800a924:	d8f6      	bhi.n	800a914 <_printf_i+0x28>
 800a926:	a101      	add	r1, pc, #4	; (adr r1, 800a92c <_printf_i+0x40>)
 800a928:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a92c:	0800a985 	.word	0x0800a985
 800a930:	0800a999 	.word	0x0800a999
 800a934:	0800a915 	.word	0x0800a915
 800a938:	0800a915 	.word	0x0800a915
 800a93c:	0800a915 	.word	0x0800a915
 800a940:	0800a915 	.word	0x0800a915
 800a944:	0800a999 	.word	0x0800a999
 800a948:	0800a915 	.word	0x0800a915
 800a94c:	0800a915 	.word	0x0800a915
 800a950:	0800a915 	.word	0x0800a915
 800a954:	0800a915 	.word	0x0800a915
 800a958:	0800aaa5 	.word	0x0800aaa5
 800a95c:	0800a9c9 	.word	0x0800a9c9
 800a960:	0800aa87 	.word	0x0800aa87
 800a964:	0800a915 	.word	0x0800a915
 800a968:	0800a915 	.word	0x0800a915
 800a96c:	0800aac7 	.word	0x0800aac7
 800a970:	0800a915 	.word	0x0800a915
 800a974:	0800a9c9 	.word	0x0800a9c9
 800a978:	0800a915 	.word	0x0800a915
 800a97c:	0800a915 	.word	0x0800a915
 800a980:	0800aa8f 	.word	0x0800aa8f
 800a984:	682b      	ldr	r3, [r5, #0]
 800a986:	1d1a      	adds	r2, r3, #4
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	602a      	str	r2, [r5, #0]
 800a98c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a990:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a994:	2301      	movs	r3, #1
 800a996:	e0a3      	b.n	800aae0 <_printf_i+0x1f4>
 800a998:	6820      	ldr	r0, [r4, #0]
 800a99a:	6829      	ldr	r1, [r5, #0]
 800a99c:	0606      	lsls	r6, r0, #24
 800a99e:	f101 0304 	add.w	r3, r1, #4
 800a9a2:	d50a      	bpl.n	800a9ba <_printf_i+0xce>
 800a9a4:	680e      	ldr	r6, [r1, #0]
 800a9a6:	602b      	str	r3, [r5, #0]
 800a9a8:	2e00      	cmp	r6, #0
 800a9aa:	da03      	bge.n	800a9b4 <_printf_i+0xc8>
 800a9ac:	232d      	movs	r3, #45	; 0x2d
 800a9ae:	4276      	negs	r6, r6
 800a9b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9b4:	485e      	ldr	r0, [pc, #376]	; (800ab30 <_printf_i+0x244>)
 800a9b6:	230a      	movs	r3, #10
 800a9b8:	e019      	b.n	800a9ee <_printf_i+0x102>
 800a9ba:	680e      	ldr	r6, [r1, #0]
 800a9bc:	602b      	str	r3, [r5, #0]
 800a9be:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a9c2:	bf18      	it	ne
 800a9c4:	b236      	sxthne	r6, r6
 800a9c6:	e7ef      	b.n	800a9a8 <_printf_i+0xbc>
 800a9c8:	682b      	ldr	r3, [r5, #0]
 800a9ca:	6820      	ldr	r0, [r4, #0]
 800a9cc:	1d19      	adds	r1, r3, #4
 800a9ce:	6029      	str	r1, [r5, #0]
 800a9d0:	0601      	lsls	r1, r0, #24
 800a9d2:	d501      	bpl.n	800a9d8 <_printf_i+0xec>
 800a9d4:	681e      	ldr	r6, [r3, #0]
 800a9d6:	e002      	b.n	800a9de <_printf_i+0xf2>
 800a9d8:	0646      	lsls	r6, r0, #25
 800a9da:	d5fb      	bpl.n	800a9d4 <_printf_i+0xe8>
 800a9dc:	881e      	ldrh	r6, [r3, #0]
 800a9de:	4854      	ldr	r0, [pc, #336]	; (800ab30 <_printf_i+0x244>)
 800a9e0:	2f6f      	cmp	r7, #111	; 0x6f
 800a9e2:	bf0c      	ite	eq
 800a9e4:	2308      	moveq	r3, #8
 800a9e6:	230a      	movne	r3, #10
 800a9e8:	2100      	movs	r1, #0
 800a9ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a9ee:	6865      	ldr	r5, [r4, #4]
 800a9f0:	60a5      	str	r5, [r4, #8]
 800a9f2:	2d00      	cmp	r5, #0
 800a9f4:	bfa2      	ittt	ge
 800a9f6:	6821      	ldrge	r1, [r4, #0]
 800a9f8:	f021 0104 	bicge.w	r1, r1, #4
 800a9fc:	6021      	strge	r1, [r4, #0]
 800a9fe:	b90e      	cbnz	r6, 800aa04 <_printf_i+0x118>
 800aa00:	2d00      	cmp	r5, #0
 800aa02:	d04d      	beq.n	800aaa0 <_printf_i+0x1b4>
 800aa04:	4615      	mov	r5, r2
 800aa06:	fbb6 f1f3 	udiv	r1, r6, r3
 800aa0a:	fb03 6711 	mls	r7, r3, r1, r6
 800aa0e:	5dc7      	ldrb	r7, [r0, r7]
 800aa10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aa14:	4637      	mov	r7, r6
 800aa16:	42bb      	cmp	r3, r7
 800aa18:	460e      	mov	r6, r1
 800aa1a:	d9f4      	bls.n	800aa06 <_printf_i+0x11a>
 800aa1c:	2b08      	cmp	r3, #8
 800aa1e:	d10b      	bne.n	800aa38 <_printf_i+0x14c>
 800aa20:	6823      	ldr	r3, [r4, #0]
 800aa22:	07de      	lsls	r6, r3, #31
 800aa24:	d508      	bpl.n	800aa38 <_printf_i+0x14c>
 800aa26:	6923      	ldr	r3, [r4, #16]
 800aa28:	6861      	ldr	r1, [r4, #4]
 800aa2a:	4299      	cmp	r1, r3
 800aa2c:	bfde      	ittt	le
 800aa2e:	2330      	movle	r3, #48	; 0x30
 800aa30:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aa34:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aa38:	1b52      	subs	r2, r2, r5
 800aa3a:	6122      	str	r2, [r4, #16]
 800aa3c:	f8cd a000 	str.w	sl, [sp]
 800aa40:	464b      	mov	r3, r9
 800aa42:	aa03      	add	r2, sp, #12
 800aa44:	4621      	mov	r1, r4
 800aa46:	4640      	mov	r0, r8
 800aa48:	f7ff fee2 	bl	800a810 <_printf_common>
 800aa4c:	3001      	adds	r0, #1
 800aa4e:	d14c      	bne.n	800aaea <_printf_i+0x1fe>
 800aa50:	f04f 30ff 	mov.w	r0, #4294967295
 800aa54:	b004      	add	sp, #16
 800aa56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa5a:	4835      	ldr	r0, [pc, #212]	; (800ab30 <_printf_i+0x244>)
 800aa5c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800aa60:	6829      	ldr	r1, [r5, #0]
 800aa62:	6823      	ldr	r3, [r4, #0]
 800aa64:	f851 6b04 	ldr.w	r6, [r1], #4
 800aa68:	6029      	str	r1, [r5, #0]
 800aa6a:	061d      	lsls	r5, r3, #24
 800aa6c:	d514      	bpl.n	800aa98 <_printf_i+0x1ac>
 800aa6e:	07df      	lsls	r7, r3, #31
 800aa70:	bf44      	itt	mi
 800aa72:	f043 0320 	orrmi.w	r3, r3, #32
 800aa76:	6023      	strmi	r3, [r4, #0]
 800aa78:	b91e      	cbnz	r6, 800aa82 <_printf_i+0x196>
 800aa7a:	6823      	ldr	r3, [r4, #0]
 800aa7c:	f023 0320 	bic.w	r3, r3, #32
 800aa80:	6023      	str	r3, [r4, #0]
 800aa82:	2310      	movs	r3, #16
 800aa84:	e7b0      	b.n	800a9e8 <_printf_i+0xfc>
 800aa86:	6823      	ldr	r3, [r4, #0]
 800aa88:	f043 0320 	orr.w	r3, r3, #32
 800aa8c:	6023      	str	r3, [r4, #0]
 800aa8e:	2378      	movs	r3, #120	; 0x78
 800aa90:	4828      	ldr	r0, [pc, #160]	; (800ab34 <_printf_i+0x248>)
 800aa92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aa96:	e7e3      	b.n	800aa60 <_printf_i+0x174>
 800aa98:	0659      	lsls	r1, r3, #25
 800aa9a:	bf48      	it	mi
 800aa9c:	b2b6      	uxthmi	r6, r6
 800aa9e:	e7e6      	b.n	800aa6e <_printf_i+0x182>
 800aaa0:	4615      	mov	r5, r2
 800aaa2:	e7bb      	b.n	800aa1c <_printf_i+0x130>
 800aaa4:	682b      	ldr	r3, [r5, #0]
 800aaa6:	6826      	ldr	r6, [r4, #0]
 800aaa8:	6961      	ldr	r1, [r4, #20]
 800aaaa:	1d18      	adds	r0, r3, #4
 800aaac:	6028      	str	r0, [r5, #0]
 800aaae:	0635      	lsls	r5, r6, #24
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	d501      	bpl.n	800aab8 <_printf_i+0x1cc>
 800aab4:	6019      	str	r1, [r3, #0]
 800aab6:	e002      	b.n	800aabe <_printf_i+0x1d2>
 800aab8:	0670      	lsls	r0, r6, #25
 800aaba:	d5fb      	bpl.n	800aab4 <_printf_i+0x1c8>
 800aabc:	8019      	strh	r1, [r3, #0]
 800aabe:	2300      	movs	r3, #0
 800aac0:	6123      	str	r3, [r4, #16]
 800aac2:	4615      	mov	r5, r2
 800aac4:	e7ba      	b.n	800aa3c <_printf_i+0x150>
 800aac6:	682b      	ldr	r3, [r5, #0]
 800aac8:	1d1a      	adds	r2, r3, #4
 800aaca:	602a      	str	r2, [r5, #0]
 800aacc:	681d      	ldr	r5, [r3, #0]
 800aace:	6862      	ldr	r2, [r4, #4]
 800aad0:	2100      	movs	r1, #0
 800aad2:	4628      	mov	r0, r5
 800aad4:	f7f5 fc0c 	bl	80002f0 <memchr>
 800aad8:	b108      	cbz	r0, 800aade <_printf_i+0x1f2>
 800aada:	1b40      	subs	r0, r0, r5
 800aadc:	6060      	str	r0, [r4, #4]
 800aade:	6863      	ldr	r3, [r4, #4]
 800aae0:	6123      	str	r3, [r4, #16]
 800aae2:	2300      	movs	r3, #0
 800aae4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aae8:	e7a8      	b.n	800aa3c <_printf_i+0x150>
 800aaea:	6923      	ldr	r3, [r4, #16]
 800aaec:	462a      	mov	r2, r5
 800aaee:	4649      	mov	r1, r9
 800aaf0:	4640      	mov	r0, r8
 800aaf2:	47d0      	blx	sl
 800aaf4:	3001      	adds	r0, #1
 800aaf6:	d0ab      	beq.n	800aa50 <_printf_i+0x164>
 800aaf8:	6823      	ldr	r3, [r4, #0]
 800aafa:	079b      	lsls	r3, r3, #30
 800aafc:	d413      	bmi.n	800ab26 <_printf_i+0x23a>
 800aafe:	68e0      	ldr	r0, [r4, #12]
 800ab00:	9b03      	ldr	r3, [sp, #12]
 800ab02:	4298      	cmp	r0, r3
 800ab04:	bfb8      	it	lt
 800ab06:	4618      	movlt	r0, r3
 800ab08:	e7a4      	b.n	800aa54 <_printf_i+0x168>
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	4632      	mov	r2, r6
 800ab0e:	4649      	mov	r1, r9
 800ab10:	4640      	mov	r0, r8
 800ab12:	47d0      	blx	sl
 800ab14:	3001      	adds	r0, #1
 800ab16:	d09b      	beq.n	800aa50 <_printf_i+0x164>
 800ab18:	3501      	adds	r5, #1
 800ab1a:	68e3      	ldr	r3, [r4, #12]
 800ab1c:	9903      	ldr	r1, [sp, #12]
 800ab1e:	1a5b      	subs	r3, r3, r1
 800ab20:	42ab      	cmp	r3, r5
 800ab22:	dcf2      	bgt.n	800ab0a <_printf_i+0x21e>
 800ab24:	e7eb      	b.n	800aafe <_printf_i+0x212>
 800ab26:	2500      	movs	r5, #0
 800ab28:	f104 0619 	add.w	r6, r4, #25
 800ab2c:	e7f5      	b.n	800ab1a <_printf_i+0x22e>
 800ab2e:	bf00      	nop
 800ab30:	0800b50d 	.word	0x0800b50d
 800ab34:	0800b51e 	.word	0x0800b51e

0800ab38 <_sbrk_r>:
 800ab38:	b538      	push	{r3, r4, r5, lr}
 800ab3a:	4d06      	ldr	r5, [pc, #24]	; (800ab54 <_sbrk_r+0x1c>)
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	4604      	mov	r4, r0
 800ab40:	4608      	mov	r0, r1
 800ab42:	602b      	str	r3, [r5, #0]
 800ab44:	f7f7 ffca 	bl	8002adc <_sbrk>
 800ab48:	1c43      	adds	r3, r0, #1
 800ab4a:	d102      	bne.n	800ab52 <_sbrk_r+0x1a>
 800ab4c:	682b      	ldr	r3, [r5, #0]
 800ab4e:	b103      	cbz	r3, 800ab52 <_sbrk_r+0x1a>
 800ab50:	6023      	str	r3, [r4, #0]
 800ab52:	bd38      	pop	{r3, r4, r5, pc}
 800ab54:	240004ec 	.word	0x240004ec

0800ab58 <__sread>:
 800ab58:	b510      	push	{r4, lr}
 800ab5a:	460c      	mov	r4, r1
 800ab5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab60:	f000 f8ea 	bl	800ad38 <_read_r>
 800ab64:	2800      	cmp	r0, #0
 800ab66:	bfab      	itete	ge
 800ab68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ab6a:	89a3      	ldrhlt	r3, [r4, #12]
 800ab6c:	181b      	addge	r3, r3, r0
 800ab6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ab72:	bfac      	ite	ge
 800ab74:	6563      	strge	r3, [r4, #84]	; 0x54
 800ab76:	81a3      	strhlt	r3, [r4, #12]
 800ab78:	bd10      	pop	{r4, pc}

0800ab7a <__swrite>:
 800ab7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab7e:	461f      	mov	r7, r3
 800ab80:	898b      	ldrh	r3, [r1, #12]
 800ab82:	05db      	lsls	r3, r3, #23
 800ab84:	4605      	mov	r5, r0
 800ab86:	460c      	mov	r4, r1
 800ab88:	4616      	mov	r6, r2
 800ab8a:	d505      	bpl.n	800ab98 <__swrite+0x1e>
 800ab8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab90:	2302      	movs	r3, #2
 800ab92:	2200      	movs	r2, #0
 800ab94:	f000 f868 	bl	800ac68 <_lseek_r>
 800ab98:	89a3      	ldrh	r3, [r4, #12]
 800ab9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aba2:	81a3      	strh	r3, [r4, #12]
 800aba4:	4632      	mov	r2, r6
 800aba6:	463b      	mov	r3, r7
 800aba8:	4628      	mov	r0, r5
 800abaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abae:	f000 b817 	b.w	800abe0 <_write_r>

0800abb2 <__sseek>:
 800abb2:	b510      	push	{r4, lr}
 800abb4:	460c      	mov	r4, r1
 800abb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abba:	f000 f855 	bl	800ac68 <_lseek_r>
 800abbe:	1c43      	adds	r3, r0, #1
 800abc0:	89a3      	ldrh	r3, [r4, #12]
 800abc2:	bf15      	itete	ne
 800abc4:	6560      	strne	r0, [r4, #84]	; 0x54
 800abc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800abca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800abce:	81a3      	strheq	r3, [r4, #12]
 800abd0:	bf18      	it	ne
 800abd2:	81a3      	strhne	r3, [r4, #12]
 800abd4:	bd10      	pop	{r4, pc}

0800abd6 <__sclose>:
 800abd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abda:	f000 b813 	b.w	800ac04 <_close_r>
	...

0800abe0 <_write_r>:
 800abe0:	b538      	push	{r3, r4, r5, lr}
 800abe2:	4d07      	ldr	r5, [pc, #28]	; (800ac00 <_write_r+0x20>)
 800abe4:	4604      	mov	r4, r0
 800abe6:	4608      	mov	r0, r1
 800abe8:	4611      	mov	r1, r2
 800abea:	2200      	movs	r2, #0
 800abec:	602a      	str	r2, [r5, #0]
 800abee:	461a      	mov	r2, r3
 800abf0:	f7f7 ff23 	bl	8002a3a <_write>
 800abf4:	1c43      	adds	r3, r0, #1
 800abf6:	d102      	bne.n	800abfe <_write_r+0x1e>
 800abf8:	682b      	ldr	r3, [r5, #0]
 800abfa:	b103      	cbz	r3, 800abfe <_write_r+0x1e>
 800abfc:	6023      	str	r3, [r4, #0]
 800abfe:	bd38      	pop	{r3, r4, r5, pc}
 800ac00:	240004ec 	.word	0x240004ec

0800ac04 <_close_r>:
 800ac04:	b538      	push	{r3, r4, r5, lr}
 800ac06:	4d06      	ldr	r5, [pc, #24]	; (800ac20 <_close_r+0x1c>)
 800ac08:	2300      	movs	r3, #0
 800ac0a:	4604      	mov	r4, r0
 800ac0c:	4608      	mov	r0, r1
 800ac0e:	602b      	str	r3, [r5, #0]
 800ac10:	f7f7 ff2f 	bl	8002a72 <_close>
 800ac14:	1c43      	adds	r3, r0, #1
 800ac16:	d102      	bne.n	800ac1e <_close_r+0x1a>
 800ac18:	682b      	ldr	r3, [r5, #0]
 800ac1a:	b103      	cbz	r3, 800ac1e <_close_r+0x1a>
 800ac1c:	6023      	str	r3, [r4, #0]
 800ac1e:	bd38      	pop	{r3, r4, r5, pc}
 800ac20:	240004ec 	.word	0x240004ec

0800ac24 <_fstat_r>:
 800ac24:	b538      	push	{r3, r4, r5, lr}
 800ac26:	4d07      	ldr	r5, [pc, #28]	; (800ac44 <_fstat_r+0x20>)
 800ac28:	2300      	movs	r3, #0
 800ac2a:	4604      	mov	r4, r0
 800ac2c:	4608      	mov	r0, r1
 800ac2e:	4611      	mov	r1, r2
 800ac30:	602b      	str	r3, [r5, #0]
 800ac32:	f7f7 ff2a 	bl	8002a8a <_fstat>
 800ac36:	1c43      	adds	r3, r0, #1
 800ac38:	d102      	bne.n	800ac40 <_fstat_r+0x1c>
 800ac3a:	682b      	ldr	r3, [r5, #0]
 800ac3c:	b103      	cbz	r3, 800ac40 <_fstat_r+0x1c>
 800ac3e:	6023      	str	r3, [r4, #0]
 800ac40:	bd38      	pop	{r3, r4, r5, pc}
 800ac42:	bf00      	nop
 800ac44:	240004ec 	.word	0x240004ec

0800ac48 <_isatty_r>:
 800ac48:	b538      	push	{r3, r4, r5, lr}
 800ac4a:	4d06      	ldr	r5, [pc, #24]	; (800ac64 <_isatty_r+0x1c>)
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	4604      	mov	r4, r0
 800ac50:	4608      	mov	r0, r1
 800ac52:	602b      	str	r3, [r5, #0]
 800ac54:	f7f7 ff29 	bl	8002aaa <_isatty>
 800ac58:	1c43      	adds	r3, r0, #1
 800ac5a:	d102      	bne.n	800ac62 <_isatty_r+0x1a>
 800ac5c:	682b      	ldr	r3, [r5, #0]
 800ac5e:	b103      	cbz	r3, 800ac62 <_isatty_r+0x1a>
 800ac60:	6023      	str	r3, [r4, #0]
 800ac62:	bd38      	pop	{r3, r4, r5, pc}
 800ac64:	240004ec 	.word	0x240004ec

0800ac68 <_lseek_r>:
 800ac68:	b538      	push	{r3, r4, r5, lr}
 800ac6a:	4d07      	ldr	r5, [pc, #28]	; (800ac88 <_lseek_r+0x20>)
 800ac6c:	4604      	mov	r4, r0
 800ac6e:	4608      	mov	r0, r1
 800ac70:	4611      	mov	r1, r2
 800ac72:	2200      	movs	r2, #0
 800ac74:	602a      	str	r2, [r5, #0]
 800ac76:	461a      	mov	r2, r3
 800ac78:	f7f7 ff22 	bl	8002ac0 <_lseek>
 800ac7c:	1c43      	adds	r3, r0, #1
 800ac7e:	d102      	bne.n	800ac86 <_lseek_r+0x1e>
 800ac80:	682b      	ldr	r3, [r5, #0]
 800ac82:	b103      	cbz	r3, 800ac86 <_lseek_r+0x1e>
 800ac84:	6023      	str	r3, [r4, #0]
 800ac86:	bd38      	pop	{r3, r4, r5, pc}
 800ac88:	240004ec 	.word	0x240004ec

0800ac8c <memmove>:
 800ac8c:	4288      	cmp	r0, r1
 800ac8e:	b510      	push	{r4, lr}
 800ac90:	eb01 0402 	add.w	r4, r1, r2
 800ac94:	d902      	bls.n	800ac9c <memmove+0x10>
 800ac96:	4284      	cmp	r4, r0
 800ac98:	4623      	mov	r3, r4
 800ac9a:	d807      	bhi.n	800acac <memmove+0x20>
 800ac9c:	1e43      	subs	r3, r0, #1
 800ac9e:	42a1      	cmp	r1, r4
 800aca0:	d008      	beq.n	800acb4 <memmove+0x28>
 800aca2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aca6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800acaa:	e7f8      	b.n	800ac9e <memmove+0x12>
 800acac:	4402      	add	r2, r0
 800acae:	4601      	mov	r1, r0
 800acb0:	428a      	cmp	r2, r1
 800acb2:	d100      	bne.n	800acb6 <memmove+0x2a>
 800acb4:	bd10      	pop	{r4, pc}
 800acb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800acba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800acbe:	e7f7      	b.n	800acb0 <memmove+0x24>

0800acc0 <__malloc_lock>:
 800acc0:	4801      	ldr	r0, [pc, #4]	; (800acc8 <__malloc_lock+0x8>)
 800acc2:	f7ff b9a7 	b.w	800a014 <__retarget_lock_acquire_recursive>
 800acc6:	bf00      	nop
 800acc8:	240004e0 	.word	0x240004e0

0800accc <__malloc_unlock>:
 800accc:	4801      	ldr	r0, [pc, #4]	; (800acd4 <__malloc_unlock+0x8>)
 800acce:	f7ff b9a2 	b.w	800a016 <__retarget_lock_release_recursive>
 800acd2:	bf00      	nop
 800acd4:	240004e0 	.word	0x240004e0

0800acd8 <_realloc_r>:
 800acd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acdc:	4680      	mov	r8, r0
 800acde:	4614      	mov	r4, r2
 800ace0:	460e      	mov	r6, r1
 800ace2:	b921      	cbnz	r1, 800acee <_realloc_r+0x16>
 800ace4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ace8:	4611      	mov	r1, r2
 800acea:	f7ff ba67 	b.w	800a1bc <_malloc_r>
 800acee:	b92a      	cbnz	r2, 800acfc <_realloc_r+0x24>
 800acf0:	f7ff f9f8 	bl	800a0e4 <_free_r>
 800acf4:	4625      	mov	r5, r4
 800acf6:	4628      	mov	r0, r5
 800acf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acfc:	f000 f82e 	bl	800ad5c <_malloc_usable_size_r>
 800ad00:	4284      	cmp	r4, r0
 800ad02:	4607      	mov	r7, r0
 800ad04:	d802      	bhi.n	800ad0c <_realloc_r+0x34>
 800ad06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ad0a:	d812      	bhi.n	800ad32 <_realloc_r+0x5a>
 800ad0c:	4621      	mov	r1, r4
 800ad0e:	4640      	mov	r0, r8
 800ad10:	f7ff fa54 	bl	800a1bc <_malloc_r>
 800ad14:	4605      	mov	r5, r0
 800ad16:	2800      	cmp	r0, #0
 800ad18:	d0ed      	beq.n	800acf6 <_realloc_r+0x1e>
 800ad1a:	42bc      	cmp	r4, r7
 800ad1c:	4622      	mov	r2, r4
 800ad1e:	4631      	mov	r1, r6
 800ad20:	bf28      	it	cs
 800ad22:	463a      	movcs	r2, r7
 800ad24:	f7fe fe06 	bl	8009934 <memcpy>
 800ad28:	4631      	mov	r1, r6
 800ad2a:	4640      	mov	r0, r8
 800ad2c:	f7ff f9da 	bl	800a0e4 <_free_r>
 800ad30:	e7e1      	b.n	800acf6 <_realloc_r+0x1e>
 800ad32:	4635      	mov	r5, r6
 800ad34:	e7df      	b.n	800acf6 <_realloc_r+0x1e>
	...

0800ad38 <_read_r>:
 800ad38:	b538      	push	{r3, r4, r5, lr}
 800ad3a:	4d07      	ldr	r5, [pc, #28]	; (800ad58 <_read_r+0x20>)
 800ad3c:	4604      	mov	r4, r0
 800ad3e:	4608      	mov	r0, r1
 800ad40:	4611      	mov	r1, r2
 800ad42:	2200      	movs	r2, #0
 800ad44:	602a      	str	r2, [r5, #0]
 800ad46:	461a      	mov	r2, r3
 800ad48:	f7f7 fe5a 	bl	8002a00 <_read>
 800ad4c:	1c43      	adds	r3, r0, #1
 800ad4e:	d102      	bne.n	800ad56 <_read_r+0x1e>
 800ad50:	682b      	ldr	r3, [r5, #0]
 800ad52:	b103      	cbz	r3, 800ad56 <_read_r+0x1e>
 800ad54:	6023      	str	r3, [r4, #0]
 800ad56:	bd38      	pop	{r3, r4, r5, pc}
 800ad58:	240004ec 	.word	0x240004ec

0800ad5c <_malloc_usable_size_r>:
 800ad5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad60:	1f18      	subs	r0, r3, #4
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	bfbc      	itt	lt
 800ad66:	580b      	ldrlt	r3, [r1, r0]
 800ad68:	18c0      	addlt	r0, r0, r3
 800ad6a:	4770      	bx	lr

0800ad6c <_init>:
 800ad6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad6e:	bf00      	nop
 800ad70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad72:	bc08      	pop	{r3}
 800ad74:	469e      	mov	lr, r3
 800ad76:	4770      	bx	lr

0800ad78 <_fini>:
 800ad78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad7a:	bf00      	nop
 800ad7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad7e:	bc08      	pop	{r3}
 800ad80:	469e      	mov	lr, r3
 800ad82:	4770      	bx	lr
